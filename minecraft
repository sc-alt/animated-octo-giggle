<!DOCTYPE html>
<!-- @MineKhan version Alpha 0.7.1
kayleß

THANKS:
Thanks to sarah🌹 and whoever helped created sarahtown (town with more blocks)for,people,walk tru doors,nether blocks water,anamal faces and more!Its crazy what ya'll done! THANKS!

LAIDES AND GENTELMEN! JUMPMAN PRESNETS:

| / |  |  \/  |    |     | | | |  |  |
|/  ||||  |   |    |||| |\   ||| | ||||  |
|\  |  |  |   |   
 |    | \  | | | |  | 
| \ |  |  |   |||| |||| |  \ ||| | |  |  |
__________________________________________
SUBSCRIBE!
sub in the new sub tread in the tips and thanks for updates!

First you start out in a survival house and you can follow the path to go into the subway.When you get into the black part fly up and turn right and your in the heart of kaylerbia!

Please dont mind the grass everywhere and I'll clean that up soon.And sorry about the fish they look like flowers and I will put some more fish in e aquarium.

Please claim in the tips and thanks one of the listed names to have your own house!!! 

.1: view       (the white house right next to the green buliding)
.2: cumbess[taken by Jaden](the brown brick house with the red truck)
.3:modern house     [taken by 🥯PunBun🥯](the house next to the cumbess house)
.4: heartland   [taken by Isaiahelliott](the house with the lake)
🂡♤♠️Ace Of Spades♠️♤🂡 house  (next to modern house)
The Egana                                       (in construction)


I will bulid more houses soon!!!

Please turn the render distance to 32 please.

I made a airport so you can go to cash kaylebia!I will up date that place too.


treasure hunt!

the first one who not only sees the treasure has to get to it and you can pick any house they want! even if someones there! 
make sure you tell me in the tips and thanks!!! 

Thanks voting guys!!!








NOTE:
If you spin off this projet,first,swich the hight to 600,then,press "ok" and reload the page

The "Save" button saves your world to your local browser. Nobody else can see it. However, if you're on a public or shared computer, that save may be deleted unexpectedly. So it's a good idea to keep a safe copy of your save string somewhere where it won't be deleted.

To share your save with other people, copy your world string into the "loadString" variable on line 189.

	Controls:

 * Right-click (or ctrl + left-click): place block
 * Left-click: Remove block
 * Middle-click: Pick block
 * Q: Sprint
 * Shift: Sneak
 * UP: Walk forward
 * DOWN: Walk backward
 * LEFT: Walk left
 * RIGHT: Walk right
 * E: Open inventory
 * B: Toggle super Breaker
 * Z: Zoom
 * L: Toggle Spectator mode
 * Enter: Toggle slab/stair mode
 * Arrow Keys: look around
 * P or Esc: pause/unpause
 * 1-9 navigate hotbar
 * Spacebar: jump
 * Double jump: toggle flight
 * Shift (flying): fly down
 * Space (flying): fly up
 * T: Reload textures
 * ; (semicolon): Release the pointer without pausing (for screenshots)

	Notes and accreditation:
 * This program (MineKhan) was made by Willard (me). The original is https://www.khanacademy.org/cs/mc/5647155001376768 (just adding this so that spin-offs have it)
 * Zushah helped me with some of the menus in the 0.6 update via GitHub. https://www.khanacademy.org/profile/zushah77
 * Element118 helped speed up the process of adding new textures significantly. https://www.khanacademy.org/profile/element118
 * Danielkshin made the current main menu background. https://www.khanacademy.org/profile/danielkshin

 * This program originated as a spin-off of ScusCraft by ScusX.
 * It's 99% different code at this point, but I still never would have made it this far without his code for reference.
 * ScusCraft can be found here: https://www.khanacademy.org/computer-programming/scuscraft-3d/5145400332058624
 * My original spin-off can be found here: https://www.khanacademy.org/computer-programming/high-performance-minecraft/5330738124357632
 * While porting the code from PJS to a webpage, I copied the PJS source code for a few of their helper functions from here: https://raw.githubusercontent.com/Khan/processing-js/master/processing.js
 * The textures are 100% copied from real Minecraft, and are the property of Mojang and Microsoft with whom I have no association.
 * The real Minecraft game can be bought and downloaded at https://www.minecraft.net/en-us/


 * Chunks are kept in memory until you restart. So don't explore too far or memory usage will grow until it crashes unrecoverably.


	To-Do:
 * A lot. Check out the GitHub repo if you'd like to collaborate on this.
 * https://github.com/Willard21/MineKhan


	How it works:

The graphics in this project are done using WebGL, which is a web implementation of OpenGL ES 2.
It allows us to write shader programs that run right on the GPU, which means it can run as fast as any C++ game.
The infamous P3D mode in Processing.js uses WebGL behind the scenes, but it does it so inefficiently that it might as well not even being using the GPU.

To properly utilize WebGL like this program does, you need to make efficient use of Vertext Buffer Objects (VBOs).
A VBO is an array that contains a whole bunch of vertices. Since WebGL can only render triangles and lines, these vertices are stored in multiples of 3.
A vertex doesn't only include its world coordinates, though. It also includes its texture coordinates, and any other data you want the shaders to manipulate.
In my case, every vertex has an X, Y, Z, textureX, textureY, and shadowIntensity. So 6 values for every block vertex in the world.

A program can only draw 1 VBO per draw call. Since the texture data is attached to the vertex data, you can't switch textures between vertices.
That means you either have to make seperate draw calls for each texture, or only use 1 texture. I do the latter.
I make a single 256x256 pixel texture, and store each of the 16x16 block textures in a section of that big texture, and store the coordinates to it. This is informally called a "texture atlas".
Then when I'm preparing my VBO, I send the texture coordinates along with the block coordinates so the shader knows how to map the 256x256 pixel texture onto the 16x16 pixel block face.

I do this once for each chunk in the world, and store those VBOs so I can draw them every frame. If a block is edited in a chunk, then that VBO is replaced.
Drawing a chunk after the VBO has been created is as simple as binding the buffer and calling "gl.drawArrays" once per chunk. The GPU takes care of the rest.

I also use what's called Vertex Array Objects (VAOs) to re-use shared vertices. Since the GPU expects triangles, and I want to draw squares, I need to draw 2 triangles (6 vertices) per square.
That means 2 of them are being re-used. The VAO lets me tell the GPU to use the cached vertex data instead of looking for a new one, which offers a small inprovement to GPU performance.
This isn't entirely necessary, but it's considered best practice. Some OpenGL ES implementations require it, but WebGL 1 does not. I think WebGL 2 does, but that's not as well supported.
-->

<html>
	<head>
		<meta charset="utf-8">
		<title>Minecraft</title>
		<link id="vtfont" href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
	</head>
	<style>
		body {
			overflow: hidden; /* Hide scrollbars */
		}
		.world-select {
			width: 99vw;
			min-width: 300px;
			height: calc(100vh - 220px);
			position: absolute;
			bottom: 120px;
			overflow-y: auto;
			background-color: RGBA(0, 0, 0, 0.6);
			justify-content: center;
			margin: 0 auto;
		}
		.world {
			width: 250px;
			height: auto;
			border: 1px solid black;
			font-size: 18px;
			font-family: 'Courier New', Courier, monospace;
			color: rgb(180, 180, 180);
			margin: 0 auto;
			margin-top: 15px;
			padding: 5px;
			cursor: pointer;
		}
		strong {
			color: white;
		}
		.selected {
			border: 3px solid white;
			padding: 3px;
		}
		input[type=text] {
			background-color: black;
			caret-color: white;
			border: 2px solid gray;
			color: white;
			font-size: 24px;
			padding-left: 12px;
		}
		input[type=text]:focus {
			border: 2px solid lightgray;
		}
		#boxcentertop {
			z-index: 1;
			width: 80vw;
			max-width: 400px;
			height: 50px;
			position: relative;
			top: 30px;
			display: block;
			margin: 0 auto;
		}
		.hidden {
			display: none !important;
		}
		#onhover {
			background-color: rgba(0, 0, 0, 0.9);
			color: rgb(200, 200, 200);
			font-family: 'Courier New', Courier, monospace;
			word-wrap: normal;
			width: auto;
			max-width: 400px;
			position: absolute;
			z-index: 1;
			padding: 10px;
			cursor: default;
		}
		#quota {
			display: block;
			position: absolute;
			width: 99vw;
			margin: 0 auto;
			bottom: 110px;
			z-index: 1;
			background-color: RGBA(0, 0, 0, 0.6);
			justify-content: center;
			text-align: center;
			color: white;
		}
	</style>
	<body>
	<canvas id="overlay" tabindex="0" width="600" height="600" style="position: absolute; top: 0px; left: 0px"></canvas>
	<input type="text" id="savebox" class="hidden" spellcheck="false" style="position: absolute; top: 10px; left: 10px; z-index: 1;">
	<input type="text" id="boxcentertop" class="hidden" spellcheck="false">
	<div id="quota" class="hidden"></div>
	<div id="onhover" class="hidden"></div>
	<p id="savedirections" class="hidden" style="position: absolute; top: 40px; left: 10px; z-index: 1; background-color: rgba(255, 255, 255, 0.3);">
		To save your world, copy/paste the saveString<br>
		from this box into the code on line 189.<br>
		var loadString = "Your Code Here";<br>
		Then save the program as a Spin-off.
	</p>
	<div class="world-select hidden" id="worlds"></div>
	<p id="message" class="hidden" style="position: absolute; top: 10px; right: 10px; z-index: 1; text-align: right; background-color: rgba(255, 255, 255, 0.3);"></p>
	<script>
		// Code edits will erase the world.
		// Place save code here to load your world. Make extra sure you got it copied so you don't paste in the wrong thing and delete your world on accident lol
		
		
		
	//load string	
		
		
		//{
		var loadString = "Example world;52umfj;1v,-38,-8s,44,0,o;Alpha 0.7.1;0,1,2,3,4,5,6,7,8,9,b,d,g,h,i,l,m,n,o,p,q,r,s,t,w,x,y,z,11,13,17,18,1b,1c,1g,1h,1j,1k,1m,1n,1o,1p,1q,1r,1s,1t,1v,1w,1x,1y,1z,20,22,25,28,29,2a,2c,2m,2n,2o,2p,2q,2r,2u,2v,2w,2y,2z,30,31,32,33,35,36,37,38,39,75,78,79,7c,7h,7r,7x,85,8j,8n,8o,8p,8q,8v,8w,8z,91,92,93,94,99,9c,9g,9o,9s,9z,aa,ac,ad,ed,eg,eh,f9,fv,fz,g0,g5,g6,gy,m5,n3,zn,zo,zp,zs,107,10c,10d,10g,10l,10n,113,114,115,117,11b,11c,11g,11i,11j,11k,12s,12t,16r,16t,16w,17p,188,18g,18k,1z8,1z9,1zc,1zh,1zp,1zw,1zx,205,20g,20o,20w,212,213,21u,225,229,22a,293,2ro,2rp,2rs,2sl,2t3,2t4,2tg,2um,3k4,3k5,3k8,3ks,3lk,3ll,3ls,3ly,3lz,3n1,3n6,3n7,3rr,3rx,3tz,3u6,4cl,4df,4dz,4e0,4ef,4fi,54z,554,55o,568,56b,56g,56h,56o,56r,56u,56v,5ct,5dr,5f6,5yb,5yd,5yw,5z3,5zb,60i;0,0,0,1fk,1mo,1ts,20w,280,2f4,2m8,2tc,30g;0,4,0,8ed,8ee,8ef,eqd,eqe,eqf,eqg,eqh,3nol,3nom,3non,3noo,3nop,3np1,ree,3np3,reg,3np5,3nph,3npi,3npj,3npk,3npl,3npx,3npy,3npz,3nq0,3nq1,3nqd,rfq,3nqf,rfs,3nqh,3nqt,3nqu,3nqv,3nqw,3nqx,8lh,8li,exh,exi,exj,exk,exl,3nvp,5y1y,4gbr,3nvt,rlh,5y2e,rll,3nwl,eyu,eyv,eyw,3nwp,3nx1,3nx5,rmt,rmx,3nxx,f06,f07,f08,3ny1,8sl,f4l,f4m,f4n,f4o,f4p,3o2t,4giu,4giv,3o2x,2i4,3o39,3o3d,3o3p,f5y,f5z,f60,3o3t,3o45,3o49,3o4l,3o4p,3o51,f7a,f7b,f7c,3o55,8zp,fbp,fbq,fbr,fbs,fbt,3xqy,3xqz,3xr0,3xr1,3xr2,3xr3,3o9x,2p2,2p7,2p9,rzp,3oat,fd3,3oaw,3ob9,s0o,s11,s14,3oc5,5s6u,fef,3oc8,96t,96u,fit,fiu,fiv,fiw,3xy1,3xy2,3xy3,3xy4,3xy5,3xy6,3xy7,3oh1,3oh2,3oh3,2wb,3ohh,s6u,3ohj,3ohx,3ohy,3ohz,3oid,3oie,3oif,3oit,s86,3oiv,3oj9,3oja,3ojb,3i9r,3ia7,3ian,3ib3,9eh,9ei,9ej,9ek,9el,9em,9en,85ux,85uy,85uz,85v0,85v1,85v2,85v3;0,5,0,3nk5,3nk6,3nk7,3nk8,3nk9,3nkl,4g0m,3nkn,4g0o,3nkp,en9,ena,enb,enc,end,3nr9,3e9y,4g7c,3nrd,4g7p,5us6,4g7s,4g7t,eud,4g88,euh,euu,euv,euw,3nyd,4geg,3nyh,3nyt,4gew,3nyx,f1h,4gfc,f1l,f1y,f20,f2f,3o5h,4glk,4glx,4gm0,f8l,4gmg,f92,f93,f94,3ocl,3ocm,3ocn,3od1,4gt2,3od3,ffp,ffq,ffr;0,4,1,c7,c8,co,jb,jc,jd,jr,js,jt,qg,qw,27v,27w,27x,27y,27z,28b,28c,28d,28e,28f,28r,28s,28t,28u,28v,2ey,2ez,2f0,2f1,2f2,2f3,2fe,2ff,2fg,2fh,2fi,2fj,2fu,2fv,2fw,2fx,2fy,2fz,2lp,2m1,2m2,2m3,2m4,2m5,2m6,2m7,2mh,2mi,2mj,2mk,2ml,2mm,2mn,2mx,2my,2mz,2n0,2n1,2n2,2n3,8zl,8zm,8zn,8zo,8zp,8zq,8zr,8zs,3xqo,3xqp,3xqq,3xqr,3xqs,3xqt,3xqu,3xqv,3xqw,909,90a,90b,90c,90d,90e,v55,v56,v57,v58,v59,v5a,4dkq,rzv,4dks,rzx,4dku,4dl6,s0b,4dl8,s0d,4dla,4dlm,s0r,4dlo,s0t,4dlq,4dm2,s17,4dm4,s19,4dm6,4dmi,s1n,4dmk,s1p,4dmm,3i28,3i29,3i2a,2t4,2t5,2t6,2t7,2t8,2t9,2ta,2tb,3i2o,3i2p,3i2q,2tk,2tl,2tm,2tn,2to,2tp,2tq,2tr,3i34,3i35,3i36,2u0,2u1,2u2,2u3,2u4,2u5,2u6,2u7,3i3k,3i3l,3i3m,96q,96r,96s,96t,96u,61b,3xxs,3xxt,3xxu,3xxv,3xxw,3xxx,3xxy,vbr,vbs,97d,97e,97f,97g,2vz,vc9,vca,vcb,vcc,vcd,vce,s6y,s72,s7e,s7i,s7u,vdn,vdo,vdp,s7y,s8a,p2j,ir1,s8e,s8q,p2z,s8u,3i9c,3i9d,3i9e,3i9f,308,309,30a,30b,30c,30d,30e,30f,3i9v,30o,30p,30q,30r,30s,30t,30u,30v,3iab,314,315,316,317,318,319,31a,31b,3iar,3ibk,3ibl,3ibm,9dv,9dw,68f,38uo,38up,38uq,38ur,38us,viu,viv,viw,9eh,9ei,9ej,333,44gw,sdd,44gy,sdf,44h0,9nl5,vje,vjf,vjg,vjh,vji,33j,44hc,sdt,44he,sdv,44hg,3c1o,4dz2,44hs,44ht,44hu,44hv,44hw,4dzi,44i8,sep,44ia,ser,44ic,sey,vkr,vks,vkt,4dzy,44io,sf5,44iq,sf7,44is,sfe,p9n,4e0e,44j4,44j5,44j6,44j7,44j8,sfu,pa3,4e0u;0,5,1,4dfu,ruz,4dfw,rv1,4dfy,4dga,rvf,4dgc,rvh,4dge,4dgq,rvv,4dgs,rvx,4dgu,4dh6,rwb,4dh8,rwd,4dha,4dhm,rwr,4dho,rwt,4dhq,4di2,rx7,4di4,rx9,4di6,4dii,rxn,4dik,rxp,4dim,4diy,ry3,4dj0,ry5,4dj2,4dje,ryj,4djg,ryl,4dji,4dju,ryz,4djw,rz1,4djy,ii2,ii3,ii4,ii5,ii6,s22,v7v,v7w,v7x,s26,s2i,s2m,s2y,s32,s3e,v97,v98,v99,s3i,s3u,s3y,s4a,s4e,s4q,vaj,vak,val,s4u,s56,ozf,fi4,3bst,s5a,s5m,ozv,lu5,s5q,s62,vbv,vbw,vbx,s66,ip6,ipa,44cg,s8x,44ci,s8z,44ck,s96,vez,vf0,vf1,4du6,44cw,s9d,44cy,s9f,44d0,s9m,3bx8,3bx9,4dum,44dc,44dd,44de,44df,44dg,sa2,4dv2,44ds,sa9,44du,sab,44dw,sai,vgb,vgc,vgd,4dvi,44e8,sap,44ea,sar,44ec,say,3byk,4dvy,44eo,44ep,44eq,44er,44es,sbe,4dwe,44f4,sbl,44f6,sbn,44f8,sbu,vhn,vho,vhp,4dwu,44fk,sc1,44fm,sc3,44fo,sca,p6j,4dxa,44g0,44g1,44g2,44g3,44g4,scq,p6z,4dxq,44gg,scx,44gi,scz,44gk,sd6,viz,vj0,vj1,4dy6,sdc,sdd,sde,sdf,sdg,iwa,sdo,iwe,3y5s,3y5t,3y5u,3y5v,3y5w,se4,sek,sf0,sfg,sfw;0,6,1,4du4,s9o;0,1,2,5cz7,5d6b,5ddf;0,2,2,5csj,5csz,5ctf,5ctv,5czn,5d03,5d0j,5d0z,5d1f,5d6r,5d77,5d7n,5d83,5d8j,5d8z,5ddv,5deb,5der,5df7,5dfn,5dg3,5dkz,5dlf,5dlv,5dmb,5dmr,5dn7,5dsj,5dsz,5dtf,5dtv,5dub,5e03,5e0j,5e0z,5e1f;0,3,2,34r,357,35l,35n;0,4,2,363,r,3rxf,3rxg,3rxh,38yu,3rxj,3rxk,3rxl,3rxm,3rxn,1f,1g,1h,1i,1j,1k,1l,1m,1n,1v,1w,1x,1y,1z,20,21,22,2b,2c,2d,2e,2f,4k,4l,4m,4n,4o,50,51,52,53,7v,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,3s4r,8j,8k,8l,8m,8n,8o,8p,8q,8r,pj0,8z,90,91,92,93,94,95,96,97,pjg,9f,9g,9h,9i,9j,9k,pjw,9v,9w,pkc,ab,pkm,pkn,pko,pkp,pkq,pkr,pks,pl2,pl3,pl4,pl5,pl6,pl7,pl8,pli,plj,plk,pll,plm,pln,plo,bo,bp,ply,plz,pm0,pm1,pm2,pm3,pm4,c4,c5,pme,pmf,pmg,pmh,pmi,pmj,pmk,pmu,pmv,pmw,pmx,pmy,pmz,pn0,pna,pnb,pnc,pnd,pne,pnf,png,pnq,pnr,pns,pnt,pnu,pnv,pnw,po6,po7,po8,po9,poa,pob,poc,ez,3sbo,3sbp,39d2,3sbr,3sbs,3sbt,3sbu,3sbv,fo,fp,fq,fr,fs,ft,fu,fv,pq4,g4,g5,g6,g7,g8,g9,ga,gb,pqk,gk,gl,gm,gn,go,gp,pr0,4ehy,prg,prq,prr,prs,prt,pru,prv,prw,ps6,psc,psm,pss,is,it,pt2,iv,iw,pt8,j8,j9,pti,6c3b,6c3c,6c3d,6c3e,6c3f,pto,jp,pty,jr,pu4,k5,pue,k7,puk,puu,6c4n,6c4o,6c4p,6c4q,6c4r,pv0,pva,pvg,m3,3sit,3siu,3siv,3siw,3six,3siy,3siz,mt,mu,mv,mw,mx,my,mz,px8,n9,na,nb,nc,nd,ne,nf,pxo,np,nq,nr,ns,nt,nu,py4,4ep2,o7,o8,pyk,pys,pyt,pyu,pyv,pyw,pyx,pyy,pyz,pz0,pz8,pz9,pza,pzg,pzo,pzp,pzq,pzw,q04,q05,q06,pz,q0,q0c,q0k,q0l,q0m,6caf,6cag,6cah,6cai,6caj,q0s,q10,q11,q12,q18,q1g,q1h,q1i,q1o,q1w,q1x,q1y,6cbr,6cbs,6cbt,6cbu,6cbv,q24,q2c,q2d,q2e,q2k,t7,39ra,3spz,3sq0,39rd,3sq2,3sq3,ty,tz,u0,u1,u2,u3,q4c,ue,uf,ug,uh,ui,uj,q4s,uu,uv,uw,ux,uy,uz,q58,4ew6,vb,vc,q5o,q5w,q5x,q5y,q5z,q60,q61,q62,q63,q64,q6b,q6k,q6r,q70,q77,x0,x1,6ch2,x3,q7g,q7n,6chh,6chi,6chj,6chk,6chl,6chm,6chn,q7w,q83,q8c,q8j,q8s,q8z,6cit,6ciu,6civ,6ciw,6cix,6ciy,6ciz,q98,q9f,q9o,10b,3sx3,3sx4,39yh,3sx6,3sx7,10s,4f1y,113,114,115,116,117,4f24,1irq,11j,11k,11l,11m,11n,1irw,4f2u,11z,120,121,122,123,4f30,4f3a,12f,12g,12h,qcs,qd2,qd3,qd4,qd5,qd6,qd7,qd8,qdg,qdh,qdi,qdo,qdw,qdx,qdy,qe4,qec,qed,qee,qek,qes,qet,qeu,6con,6coo,6cop,6coq,6cor,qf0,qf8,qf9,qfa,qfg,qfo,qfp,qfq,qfw,qg4,qg5,qg6,6cpz,6cq0,6cq1,6cq2,6cq3,qgc,qgk,qgl,qgm,qgs,17f,3t47,3t48,3a5l,3t4a,3t4b,17w,4f92,187,188,189,18a,18b,4f98,1iyu,18n,18o,18p,18q,18r,1iz0,4f9y,193,194,195,196,197,4fa4,4fae,19j,19k,19l,qjw,qk6,qk7,qk8,qk9,qka,qkb,qkc,qkm,qkn,qko,qkq,qkr,qks,ql2,ql3,ql4,ql6,ql7,ql8,qli,qlj,qlk,qll,qlm,qln,qlo,qly,qlz,qm0,qm1,qm2,qm3,qm4,1bx,qme,qmf,qmg,qmh,qmi,qmj,qmk,1cd,qmu,qmv,qmw,qmx,qmy,qmz,qn0,qna,qnb,qnc,qnd,qne,qnf,qng,qnq,qnr,qns,qnt,qnu,qnv,qnw,3tbb,3tbc,3acp,3tbe,3tbf,1f0,4fg6,1fb,1fc,1fd,1fe,1ff,4fgc,1j5y,1fr,1fs,1ft,1fu,1fv,1j64,4fh2,1g7,1g8,1g9,1ga,1gb,4fh8,4fhi,c2g7,c2g8,c2g9,c2ga,c2gb,qr0,4mv,4mw,3wjd,4my,4mz,4n0,1i9,1ix,1iy,1iz,1j0,1j1,1jd,1je,1jf,1jg,1jh,1ju,1jv,1kb,3tif,3tig,3ajt,3tii,3tij,1m4,4fna,1mf,1mg,1mh,1mi,1mj,4fng,1jd2,1mv,1mw,1mx,1my,1mz,1jd8,4fo6,1nb,1nc,1nd,1ne,1nf,4foc,4fom,c2nb,c2nc,aueh,c2ne,c2nf,4fos,4tz,4u0,3wqh,4u2,4u4,1or,1p7,1pn,1q1,1q2,1q3,1q4,1q5,1qh,1qi,1qj,1qk,1ql,1qy,1qz,1r0,1re,1rf,1rg,3tpj,3tpk,3tpl,3tpm,3tpn,1t8,4fue,1tj,1tk,1tl,1tm,1tn,4fuk,1jk6,1tz,1u0,1u1,1u2,1u3,1jkc,4fva,1uf,1ug,1uh,1ui,1uj,4fvg,4fvq,c2uf,c2ug,aull,c2ui,c2uj,4fvw,513,514,3wxl,516,517,518,1x5,1x6,1x7,1x8,1x9,1xl,1xm,1xn,1xo,1xp,1y2,1y3,1y4,1yj,3twn,3two,3twp,3twq,3twr,20c,4g1i,20n,20o,20p,20q,20r,4g1o,1jra,213,214,215,216,217,1jrg,4g2e,21j,21k,21l,21m,21n,4g2k,4g2u,c31j,c31k,ausp,c31m,c31n,4g30,587,588,3x4p,58a,58b,58c,24a,24b,24c,24d,24q,24r,24s,24t,3u3r,3u3s,3u3t,3u3u,3u3v,27g,4g8m,27r,27s,27t,27u,27v,4g8s,1jye,287,288,289,28a,28b,1jyk,4g9i,28n,28o,28p,28q,28r,4g9o,4g9y,c38n,c38o,auzt,c38q,c38r,4ga4,5fb,3xbs,3xbt,5fe,5ff,5fg,3uav,3uaw,3uax,3uay,3uaz,2ek,2eo,2ep,4gfq,2ev,2ew,2ex,2ey,2ez,4gfw,2f4,2f5,1k5i,2fb,2fc,2fd,2fe,2ff,1k5o,2fk,4ggm,2fr,2fs,2ft,2fu,2fv,4ggs,4gh2,c3fr,c3fs,av6x,c3fu,c3fv,4gh8,3xiv,3xiw,5mh,5mi,5mj,5mk,3uhz,3ui0,3ui1,3ui2,3ui3,2lo,2ls,2lt,4gmu,2lz,2m0,2m1,2m2,2m3,4gn0,2m8,2m9,1kcm,2mf,2mg,2mh,2mi,2mj,1kcs,2mo,2mp,4gnq,2mv,2mw,2mx,2my,2mz,4gnw,4go6,c3mv,c3mw,ave1,c3my,c3mz,4goc,3xpy,3xpz,5tk,5tl,5tm,5tn,5to,3up3,3up4,3bqh,3up6,3up7,2ss,2sw,2sx,2sy,4gty,2t3,2t4,2t5,2t6,2t7,4gu4,2tc,2td,2te,1kjq,2tj,2tk,2tl,2tm,2tn,1kjw,2ts,2tt,2tu,4guu,2tz,2u0,2u1,2u2,2u3,4gv0,4gva,c3tz,c3u0,avl5,c3u2,c3u3,4gvg,96d,3xx2,60o,60p,60q,60r,60s,3xxh,85mu,2yv,2yw,2yx,2yz,2z9,2za,2zb,2zc,2zd,2ze,2zf,3uw7,3uw8,3bxl,3uwa,3uwb,2zw,300,301,302,4h12,307,308,309,30a,30b,4h18,30g,30h,30i,1kqu,30n,30o,30p,30q,30r,1kr0,30w,30x,30y,4h1y,313,314,315,316,317,4h24,4h2e,c413,c414,avs9,c416,c417,4h2k,9dh,9di,67s,67t,67u,67v,3y4k,3y4l,3y4m,9e8,85uo;0,5,2,phi,phj,phk,phl,phm,phn,pho,phy,phz,pi0,pi1,pi2,pi3,pi4,pie,pif,pig,pih,pii,pij,pik,piu,piv,piw,pix,piy,piz,pj0,pja,pjb,pjc,pjd,pje,pjf,pjg,pjq,pjr,pjs,pjt,pju,pjv,pjw,pk6,pk7,pk8,pk9,pka,pkb,pkc,pkm,pkn,pko,pkp,pkq,pkr,pks,pl2,pl3,pl4,pl5,pl6,pl7,pl8,pli,plj,plk,pll,plm,pln,plo,ply,plz,pm0,pm1,pm2,pm3,pm4,pme,pmf,pmg,pmh,pmi,pmj,pmk,pmu,pmv,pmw,pmx,pmy,pmz,pn0,pna,pnb,pnc,pnd,pne,pnf,png,pnq,pnr,pns,pnt,pnu,pnv,pnw,po6,po7,po8,po9,poa,pob,poc,pom,pos,pp2,pp8,ppi,6bzb,6bzc,6bzd,6bze,6bzf,ppo,ppy,pq4,pqe,pqk,pqu,pr0,pra,6c13,6c14,6c15,6c16,6c17,prg,prq,prw,ps6,psc,psm,pss,pt2,6c2v,6c2w,6c2x,6c2y,6c2z,pt8,pti,pto,pty,pu4,pue,puk,puu,6c4n,6c4o,6c4p,6c4q,6c4r,pv0,pva,pvg,pvo,pvp,pvq,pvw,pw4,pw5,pw6,pwc,pwk,pwl,pwm,6c6f,6c6g,6c6h,6c6i,6c6j,pws,px0,px1,px2,px8,pxg,pxh,pxi,pxo,pxw,pxx,pxy,py4,pyc,pyd,pye,6c87,6c88,6c89,6c8a,6c8b,pyk,pys,pyt,pyu,pz0,pz8,pz9,pza,pzg,pzo,pzp,pzq,pzw,q04,q05,q06,6c9z,6ca0,6ca1,6ca2,6ca3,q0c,q0k,q0l,q0m,q0s,q10,q11,q12,q18,q1g,q1h,q1i,q1o,q1w,q1x,q1y,6cbr,6cbs,6cbt,6cbu,6cbv,q24,q2c,q2d,q2e,q2k,q2r,q30,q37,q3g,q3n,6cdh,6cdi,6cdj,6cdk,6cdl,6cdm,6cdn,q3w,q43,q4c,q4j,q4s,q4z,q58,q5f,6cf9,6cfa,6cfb,6cfc,6cfd,6cfe,6cff,q5o,q5v,q64,q6b,q6k,q6r,q70,q77,6ch1,6ch2,6ch3,6ch4,6ch5,6ch6,6ch7,q7g,q7n,q7w,q83,q8c,q8j,q8s,q8z,6cit,6ciu,6civ,6ciw,6cix,6ciy,6ciz,q98,q9f,q9o,q9w,q9x,q9y,qa4,qac,qad,qae,qak,qas,qat,qau,6ckn,6cko,6ckp,6ckq,6ckr,qb0,qb8,qb9,qba,qbg,qbo,qbp,qbq,qbw,qc4,qc5,qc6,qcc,qck,qcl,qcm,6cmf,6cmg,6cmh,6cmi,6cmj,qcs,qd0,qd1,qd2,qd8,qdg,qdh,qdi,qdo,qdw,qdx,qdy,qe4,qec,qed,qee,6co7,6co8,6co9,6coa,6cob,qek,qes,qet,qeu,qf0,qf8,qf9,qfa,qfg,qfo,qfp,qfq,qfw,qg4,qg5,qg6,6cpz,6cq0,6cq1,6cq2,6cq3,qgc,qgk,qgl,qgm,qgs,qh2,qh3,qh4,qh5,qh6,qh7,qh8,qhi,qhj,qhk,qhl,qhm,qhn,qho,qhy,qhz,qi0,qi1,qi2,qi3,qi4,qie,qif,qig,qih,qii,qij,qik,qiu,qiv,qiw,qix,qiy,qiz,qj0,qja,qjb,qjc,qjd,qje,qjf,qjg,qjq,qjr,qjs,qjt,qju,qjv,qjw,qk6,qk7,qk8,qk9,qka,qkb,qkc,qkm,qkn,qko,qkp,qkq,qkr,qks,ql2,ql3,ql4,ql5,ql6,ql7,ql8,qli,qlj,qlk,qll,qlm,qln,qlo,qly,qlz,qm0,qm1,qm2,qm3,qm4,qme,qmf,qmg,qmh,qmi,qmj,qmk,qmu,qmv,qmw,qmx,qmy,qmz,qn0,qna,qnb,qnc,qnd,qne,qnf,qng,qnq,qnr,qns,qnt,qnu,qnv,qnw;0,6,2,phi,phj,phk,phl,phm,phn,pho,phy,phz,pi0,pi1,pi2,pi3,pi4,pie,pif,pig,pih,pii,pij,pik,piu,piv,piw,pix,piy,piz,pj0,pja,pjb,pjc,pjd,pje,pjf,pjg,pjq,pjr,pjs,pjt,pju,pjv,pjw,pk6,pk7,pk8,pk9,pka,pkb,pkc,pkm,pkn,pko,pkp,pkq,pkr,pks,6buu,6buv,6buw,6bux,6buy,6buz,6bv0,pom,pos,pp2,pp8,ppi,6bzb,6bzc,6bzd,6bze,6bzf,ppo,ppy,pq4,pqe,pqk,pqu,6c0n,6c0o,6c0p,6c0q,6c0r,pr0,pra,prg,prq,prw,6c1y,6c1z,6c20,6c21,6c22,6c23,6c24,pvo,pvp,pvq,pvw,pw4,pw5,pw6,pwc,pwk,pwl,pwm,6c6f,6c6g,6c6h,6c6i,6c6j,pws,px0,px1,px2,6c6y,px8,pxg,pxh,pxi,pxo,pxw,pxx,pxy,6c7r,6c7s,6c7t,6c7u,6c7v,py4,pyc,pyd,pye,pyk,pys,pyt,pyu,pz0,pz8,pz9,6c92,6c93,6c94,6c95,6c96,6c97,6c98,pzo,pzp,q04,q05,q2r,q30,q37,q3g,q3n,6cdh,6cdi,6cdj,6cdk,6cdl,6cdm,6cdn,q3w,q43,q4c,q4j,q4s,q4z,6cev,6cew,6cex,6cey,6cez,q58,q5f,q5o,q5v,q64,q6b,6cg6,6cg7,6cg8,6cg9,6cga,6cgb,6cgc,q6r,q77,q7n,q7o,q7p,q7q,q9w,q9x,q9y,qa4,qac,qad,qae,qak,qas,qat,qau,6ckn,6cko,6ckp,6ckq,6ckr,qb0,qb8,qb9,qba,qbg,qbo,qbp,qbq,qbw,qc4,qc5,qc6,6clz,6cm0,6cm1,6cm2,6cm3,qcc,qck,qcl,qcm,qcs,qd0,qd1,qd2,qd8,qdg,qdh,6cna,6cnb,6cnc,6cnd,6cne,6cnf,6cng,qdw,qdx,qec,qed,qh2,qh3,qh4,qh5,qh6,qh7,qh8,qhi,qhj,qhk,qhl,qhm,qhn,qho,qhy,qhz,qi0,qi1,qi2,qi3,qi4,qie,qif,qig,qih,qii,qij,qik,qiu,qiv,qiw,qix,qiy,qiz,qj0,qja,qjb,qjc,qjd,qje,qjf,qjg,qjq,qjr,qjs,qjt,qju,qjv,qjw,qk6,qk7,qk8,qk9,qka,qkb,qkc,6cue,6cuf,6cug,6cuh,6cui,6cuj,6cuk;0,3,3,1we,1wf,1wv,4gsc,4gsd,4gse,fen,4gz0,4gz1,4gz2,flb,4gzf,2yk,2yl,2ym,2yn,fsr,fd30,4h6l,4h6m,fsv;0,4,3,4mf,1h3,4tj,1o7,50n,1vb,57r,22f,5ev,29j,29z,5lz,2gn,2h3,4glo,4glp,4glq,f7z,f8c,5t3,2nr,2o7,4gsr,2rw,2rx,2ry,2rz,fff,2sc,4gt9,4gta,ffj,ffw,607,2uv,2vb,fm3,2z0,4gzx,4gzy,fm7,fmj,2zg,fml,fmz,2zw,fn1,fng;0,3,4,1w0,1wg,234,23k,23l,23m,242,243,244,24k,24l,2b7,2b8,2bo,2bp,2bq,2br,2c6,2c7,2c8,2jb,2jc,2jd,2jt,2ju,2jv,2kb,2qz,4gs0,4gs1,4gs2,4gs3,4gs4,4gs5,4gs6,4gs7,4gs8,4gs9,4gsa,4gsb,4gsc,4gsd,4gse,4gsf,fkw,fkx,fky,fkz,fl0,fl1,fl2,fl3,fl4,fl5,fl6,fl7,fl8,fl9,fla,flb,2y8,2y9,2ya,2yb,2yc,2yd,2ye,2yf,2yg,2yh,2yi,2yj,2yk,2yl,2ym,2yn,4h68,4h69,4h6a,4h6b,4h6c,4h6d,4h6e,4h6f,4h6g,4h6h,4h6i,4h6j,4h6k,4h6l,4h6m,4h6n;0,4,4,5avz,5b3g,5bai,5bhq,5bhr,5bp7,2dl,5c3w,4glc,4gld,4gle,4glf,4glg,4glh,4gli,4glj,4glk,4gll,4glm,4gln,4glo,4glp,4glq,4glr,5tj,5tk,5tl,2o7,2o8,2o9,2rk,2rl,2rm,2rn,2ro,2rp,2rq,2rr,2rs,2rt,2ru,2rv,2rw,2rx,2ry,2rz,4gsw,4gsx,4gsy,4gsz,4gt0,4gt1,4gt2,4gt3,4gt4,4gt5,4gt6,4gt7,4gt8,4gt9,4gta,4gtb,60m,60n,60o,60p,60q,2va,2vb,2vc,2vd,2ve,4gzk,4gzl,4gzm,4gzn,4gzo,4gzp,4gzq,4gzr,4gzs,4gzt,4gzu,4gzv,4gzw,4gzx,4gzy,4gzz,67c,67q,67r,320,67t,67u,67v,32e,32f,32g,32h,32i,32j,5cp9;0,5,4,5cfz;0,0,5,g,h,m,x,y,12,1d,1e,1f,1u,1v,2b,2c,2s,7q,86,87,eu,fa,ly,me,t2,ti,106,10m,17a,17q,17r,1ee,1eu,1li,1ly,1sm,1t2,1zq,206,207,26u,27a,2dy,2ee,2l2,2li,5ces,2s6,5cf8,2sm,2sn,5cfo,5cg4,5cgk,5ch0,5chg,5chw,5cic,5cis,5cj8,5cjo,5ck4,5ckk,5cl0,2za,2zq;0,1,5,59,5a,5q,5r,67,5cec,5ces,5cf8,5cfo,5cg4,5cgk,5ch0,5chg,2v6,5chw,5cic,5cis,5cj8,5cjo,5ck4,5ckk,5cl0,47ky,31k,31l,31m,31n,31o,31p,31q,47le,320,321,322,323,324,325,326,47lu,32g;0,2,5,5cec,5ces,5cf8,5cfo,5cg4,5cgk,5ch0,5chg,5chw,5cic,5cis,5cj8,5cjo,5ck4,5ckk,5cl0;0,3,5,3ck,3cl,3cm,3jo,3jp,3jq,3qs,3qt,3qu,4gs0,4gs1,4gs2,4gs3,4gs4,4gs5,4gs6,4gs7,4gs8,4gs9,4gsa,4gsb,4gsc,4gsd,5cec,5ces,5cf8,5cfo,5cg4,5cgk,5ch0,5chg,5chw,5cic,5cis,5cj8,5cjo,5ck4,fkw,fkx,fky,fkz,fl0,fl1,fl2,fl3,fl4,fl5,fl6,fl7,fl8,fl9,2y8,2y9,2ya,2yb,2yc,2yd,2ye,2yf,2yg,2yh,2yi,2yj,2yk,2yl,4gzi,fsd,4h68,4h69,4h6a,4h6b,4h6c,4h6d,4h6e,4h6f,4h6g,4h6h,4h6i,4h6j,4h6k,35p,4h6m;0,4,5,4,5,6,k,l,m,6db,37z,78,79,7a,7o,7p,7q,59va,6kf,3f3,ec,ed,ee,es,et,eu,5a2d,lg,lh,li,lw,lx,ly,5a9x,nz,sk,sl,sm,t0,t1,t2,5ahi,5ahn,zo,zp,zq,104,105,106,5aom,16s,16t,16u,178,179,17a,5avl,5avm,1dw,1dx,1dy,1ec,1ed,1ee,5b35,5b37,1l0,1l1,1l2,1lg,1lh,1li,5ba9,5bae,5bak,5bam,1s4,1s5,1s6,1sk,1sl,1sm,5bhl,5bhm,1z8,1z9,1za,1zo,1zp,1zq,5boi,26c,26d,26e,26s,26t,26u,5bvt,2dg,2dh,2di,2dw,2dx,2dy,5c35,4glc,4gld,4gle,4glf,4glg,4glh,4gli,4glj,4glk,4gll,4glm,4gln,4glo,4glp,2l0,2l1,2l2,5ca5,5cdw,2rk,2rl,2rm,2rn,2ro,2rp,2rq,2rr,2rs,2rt,2ru,2rv,2rw,2rx,4gsu,4gsw,4gsx,4gsy,4gsz,4gt0,4gt1,4gt2,4gt3,4gt4,4gt5,4gt6,4gt7,4gt8,4gt9,2sk,5cfo,5cg4,5cgk,5ch0,5chg,5chw,5cic,5cis,5cj8,5cjo,5ck4,5ckk,5cl0,4gzk,4gzl,4gzm,4gzn,4gzo,4gzp,4gzq,4gzr,4gzs,4gzt,4gzu,4gzv,4gzw,2z1,4gzy,2z8,2z9,2za,4h0d,2zo,304,30k,5cob,5coh;0,5,5,5b84,5bf8,5bfo,5bg4,5bms,5bn8,5bno,5bus,5bv8,5c2c,5c84,5c8k,5c8l,5c90,5c91,5c9g,5c9h,5c9u,5c9w,5c9x,5cec,5ces,5cey,5cf4,5cf7,5cf8,5cf9,5cfd,5cfe,5cfk,5cfn,5cfo,5cfp,5cfq,5cfs,5cft,5cg0,5cg1,5cg3,5cg4,5cg7,5cg8,5cgh,5cgi,5cgj,5cgk,5cgl,5cgm,5cgn,5cgy,5cgz,5ch0,5ch1,5ch2,5cmc,5cms,5cn8,5cno,5co4;0,1,6,4j,4z,50,5c,5f,5g,5h,5s,5t,5w,5x,5y,68,69,6a,6b,6c,6d,6e,6f,6q,6r,6s,6t,6u,6v,6w;0,2,6,3,4,5,6,7,8,9,k,l,m,n,o,p,q,11,12,13,14,15,16,17,18,1i,1j,1k,1l,1m,1n,1o,1p,20,21,22,23,24,25,26,2i,2j,2k,2l,2m,2n,2z,30,31,32,33,3h,3i,3j,3y,3z,4f;0,4,6,380,38h,38y,39f,43,6fo,3ac,3at,3ba,3br,3s2g,3s2h,3s2i,3bv,3bw,3bx,3by,3bz,3f4,3fl,3g2,3gj,b7,6ms,3hg,3hx,3ie,3iv,3s9k,3s9l,3s9m,3iz,3j0,3j1,3j2,3j3,6rk,3m8,3mp,3n2,3n6,hq,3nn,ib,6tw,3ok,j8,3p1,3pi,jv,3pz,3sgo,3sgp,3sgq,3vmj,3vmk,3vml,3vmm,3vmn,bffv,4elo,bffx,bffy,4elr,7qpo,pvh,pvi,7qpr,6yo,3tc,3tt,3ua,3ur,pf,710,3vo,3w5,3wm,qz,r0,3x3,3sns,3snt,3snu,3vtn,3vto,3vtp,3vtq,3vtr,bfmz,bfn0,bfn1,bfn2,bfn3,9i4c,q2m,75s,40g,40x,41e,41v,784,42s,439,xo,xp,xq,43q,y4,447,3suw,3sux,3suy,3w0r,3w0s,3w0t,3w0u,3w0v,bfu3,4ezw,bfu5,bfu6,4ezz,7r3w,q9p,q9q,7r3z,7cw,47k,481,48i,48z,7f8,49w,4ad,14t,4au,4bb,3t20,3t21,3t22,3w7v,3w7w,3w7x,3w7y,3w7z,7kh,4f5,4fm,4g3,7mc,4h0,4hh,4hy,4if,3t94,3t95,3t96,3wez,3wf0,3wf1,3wf2,3wf3,7rl,4m9,4mq,4n7,7tg,4o4,4ol,4p2,4pj,3tg8,3tg9,3tga,4pn,4po,4pp,4pq,4pr,7yp,4td,4tu,4ub,80k,4v8,4vp,4w6,4wn,3tnc,3tnd,3tne,4wr,4ws,4wt,4wu,4wv,85t,50h,86a,50y,51f,87o,52c,52t,53a,53r,3tug,3tuh,3tui,53v,53w,53x,53y,53z,8de,582,58j,8es,59g,59x,5ae,5av,3u1k,3u1l,3u1m,5az,5b0,5b1,5b2,5b3,8ki,5f6,8kz,5fn,8lw,5gk,5h1,5hi,5hz,3u8o,3u8p,3u8q,5i3,5i4,5i5,5i6,5i7,2cr,2cs,2ct,2cu,8rm,5ma,8s3,5mr,8t0,5no,5o5,5om,5p3,3ufs,3uft,3ufu,5p7,5p8,5p9,5pa,5pb,2ju,2jv,2jw,2jx,2jy,2kb,2kc,2kd,8z7,5tv,8zo,904,5us,5v9,5vq,5w7,3umw,3umx,3umy,5wb,5wc,5wd,5we,5wf,2qy,2qz,2r0,2r1,2r2,2rf,2rg,2rh,96b,60z,96s,978,61w,62d,62u,63b,3uu0,3uu1,3uu2,63f,63g,63h,63i,63j,2y2,2y3,2y4,2y5,2y6,2yk,9dw,9ec,690,69h,69y,34c,9fz,6af,3v14,3v15,3v16,6aj,6ak,6al,6am,6an,357,358,359,35a,35r;0,5,6,7qq5,7qq6,2do,2kr,2ks,2kt,2rw;0,2,7,2o,34,35,3k,3l,3m,40,41,42,43,4h,4i,4j,4k,4y,4z,50,51,52,5g,5h,5i,5j,5x,5y,5z,60,61,6e,6f,6g,6h,6i,6v,6w,6x,6y,6z;0,3,7,8,9,a,b,c,p,q,r,s,t,17,18,19,1a,1n,1o,1p,1q,1r,25,26,27,2m,2n,32,33,3i,3j,3z,4f,67;0,4,7,3bk,3bl,3bm,6hf,6hg,6hh,6hi,6hj,6hk,6hl,6hm,6hn,6ho,6hp,6hq,6hr,4kir,4kis,4kit,4kiu,4kiv,4kiw,4kix,4kiy,4kiz,4kj0,4kj1,4kj2,4kj3,394j,394k,394l,394m,394n,394o,394p,394q,394r,394s,394t,394u,394v,3io,3ip,3iq,6oj,3vf8,3vf9,3vfa,3vfb,3vfc,3vfd,3vfe,6or,1xwc,1xwd,1xwe,1xwf,4kpv,39bf,39bn,39bv,6sw,6sx,6sy,6sz,6t0,6t1,6t2,6t3,6t4,39fk,39fl,39fm,39fn,39fo,39fp,39fq,39fr,39fs,6tl,6tm,6tn,6to,6tp,39g0,39g1,39g2,39g3,39g4,39g5,39g6,39g7,39g8,39g9,39ga,39gb,39gc,39gd,6u6,6u7,39gg,39gh,39gi,39gj,39gk,39gl,39gm,39gn,39go,39gp,39gq,39gr,39gs,39gt,39gu,39gv,39gw,39gx,39gy,39gz,39h0,39h1,39h2,39h3,39h4,39h5,39h6,39h7,39h8,39h9,39ha,39hb,39hc,39hd,39he,39hf,39hg,39hh,39hi,39hj,39hk,39hl,39hm,39hn,39ho,39hp,39hq,39hr,3vm8,3vm9,3vma,3vmb,3vmc,3vmd,3vme,3vmf,3vmg,3vmh,3vmi,1y3f,1y3g,1y3h,1y3i,1y3j,bffk,w6b,5q0b,4elp,c1ke,4elr,w6r,5muz,700,3uh,39mo,p5,39n4,39nk,39o0,qh,qi,39og,qx,qy,3vtc,3vtd,3vte,3vtf,3vtg,3vth,3vti,3vtj,3vtk,3vtl,3vtm,72z,1yak,1yal,1yam,1yan,bfmo,wdf,c1r8,4esl,c1ra,c1rb,4eso,39pn,c1rh,bvfy,c1rj,wdv,8g6s,4et1,4et2,4et3,7b3s,39q3,6iny,41l,41m,77k,w1,w9,wa,39u8,wk,wl,39uo,39v4,xl,39vk,y1,3w0g,3w0h,3w0i,3w0j,3w0k,3w0l,3w0m,3w0n,3w0o,3w0p,3w0q,7a3,1yho,1yhp,1yhq,1yhr,bfts,wkj,c1yc,c1yd,c1ye,c1yf,c1yg,39wr,4ezx,c1ym,4ezz,wkz,8gdw,q9h,4f07,e2ns,39x7,48q,7eo,13e,3a1c,3a1s,3a28,3a2o,3w7k,3w7l,3w7m,3w7n,3w7o,3w7p,3w7q,3w7r,3w7s,3w7t,3w7u,7h7,1yos,1yot,1you,1yov,wrn,c25g,4f6t,c25i,c25j,4f6w,162,3a3v,164,165,ws3,8gl0,4f79,4f7a,4f7b,7bi0,3a4b,7ls,3a8g,3a8w,3a9c,3a9s,3weo,3wep,3weq,3wer,3wes,3wet,3weu,3wev,3wew,3wex,3wey,7ob,1yvw,1yvx,1yvy,1yvz,wyr,1d6,3aaz,1d8,1d9,1da,wz7,3abf,1do,1dp,7sw,3afk,3ag0,3agg,3agw,3wls,3wlt,4pe,7v7,7v8,7v9,7va,7vb,7vc,7vd,7ve,7vf,1z30,1z31,1z32,1z33,4lwj,3ahw,3ahx,3ahy,3ahz,3ai0,3ai1,3ai2,3ai3,3ai4,1kd,1ke,3ai7,3aib,3aic,3aid,3aie,3aif,3aig,3aih,3aii,3aij,3aik,1kt,3ain,800,3amo,3an4,4vg,4vh,4vi,4vj,3ank,1q4,1q5,1q6,1q7,3ao0,1qk,3wsw,3wsx,4wi,82b,1z9w,1z9x,1z9y,1z9z,1za0,1za1,1za2,1za3,1za4,1za5,1za6,1za7,4m3n,dtyd,4fs6,4iy0,4iy1,4iy2,4iy3,3ap8,1rh,1ri,4cmn,3apf,4iyg,4iyh,4iyi,4iyj,3apo,87k,51z,3au8,1wn,52j,52k,52l,52m,52n,3auo,1x3,1x7,1x8,1x9,1xa,1xb,3av4,1xp,3x00,3x01,53m,89f,1zh0,1zh1,1zh2,1zh3,1zh4,1zh5,1zh6,1zh7,1zh8,1zh9,1zha,1zhb,4mar,4fza,1yi,1yj,5re4,1yl,1ym,e0hb,3awj,5o8s,8eo,3b1c,3b1s,245,246,247,249,3b28,24q,3x74,3x75,5aq,8gj,1zo4,1zo5,1zo6,1zo7,1zo8,1zo9,1zoa,1zob,1zoc,1zod,1zoe,1zof,4mhv,4jc4,3b3g,3b3n,4jck,7sah,7sai,3b3w,8m8,3b8w,3b9c,3xe8,3xe9,5hu,8nn,8no,8np,8nq,1zvb,1zvc,1zvd,1zve,1zvf,1zvg,1zvh,1zvi,1zvj,4moz,4mp0,4mp1,4mp2,5rs7,3bag,3bah,3bai,3baj,3bak,3bar,3bas,3bat,3bau,5omv,3baw,3bax,3bay,3baz,3bb0,8tc,3bg0,3bgg,3xlc,3xld,3xle,3xlf,3xlg,3xlh,8uu,202f,202g,202h,202i,202j,202k,202l,202m,202n,5rza,5oty,916,2096,91q,91r,3xsg,3xsh,3xsi,3xsj,3xsk,3xsl,91y,209j,209k,209l,209m,209n,209o,209p,209q,209r,5s6e,5p12,98b,20gb,98s,98t,98u,98v,634,635,636,98z,990,991,992,20gn,20go,20gp,20gq,20gr,20gs,999,99a,99b,4nab,4nac,4nad,4nae,3bvr,3bvu,3bvv,fl9,fla,flb,3bw3,3bw4,3bw5,3bw6,3bw7,3bwa,3bwb,23nh,330,33h,33i,33z,9fk,9fl,9fm,9fn,9fo,9fp,9fq,9fr,9fs,9ft,9fu,9fv,9fw,9fx,9fy,9fz,6a8,6a9,6aa,9g3,20no,20np,20nq,20nr,20ns,20nt,20nu,9gb,20nw,20nx,20ny,20nz,4nhf,7gmd,7gmf,4h63,35c,35d,35e,3c37,4h6j;0,5,7,38xv,38xw,38xx,38xy,38xz,38y0,38y1,38y2,38y3,38y4,38y5,38y6,38y7,38yb,38yc,38yd,38ye,38yf,38yg,38yh,38yi,38yj,38yk,38yl,38ym,38yn,38yr,38ys,38yt,38yu,38yv,38yw,38yx,38yy,38yz,38z0,38z1,38z2,38z3,38z7,38z8,38z9,38za,38zb,38zc,38zd,38ze,38zf,38zg,38zh,38zi,38zj,38zn,38zo,38zp,38zq,38zr,38zs,38zt,38zu,38zv,38zw,38zx,38zy,38zz,2a8j,3904,3905,3906,3907,3908,3909,390a,390b,390c,390d,390e,2a8v,2a90,390l,390m,390n,390o,390p,390q,390r,390s,390t,2a9a,2a9h,3912,3913,3914,3915,3916,3917,3918,2a9p,2a9y,391j,391k,391l,391m,391n,2aa4,2aaf,3920,3921,3922,2aaj,2aaw,392h,2aay,2abd,394z,3957,395f,395n,395v,3963,396b,4e9g,4e9h,4e9i,4e9j,4e9k,4e9l,4e9m,4e9n,4e9o,4e9p,4e9q,4e9r,396r,1xs4,1xs5,1xs6,1xs7,1xs8,1xs9,1xsa,1xsb,1xsc,1xsd,1xse,1xsf,2afn,2afz,2ag4,2age,4eb8,2agl,2agt,4ebi,8fpg,8fph,2ah2,2ah8,8fpp,8fpq,2ahj,2ahn,2ai0,2ai2,2aih,poj,39cb,w0j,39cr,w0z,39d7,39df,4egk,4egl,4egm,4egn,4ego,4egp,4egq,4egr,4egs,4egt,4egu,4egv,39dv,1xz8,1xz9,1xza,1xzb,1xzc,1xzd,1xze,1xzf,1xzg,1xzh,1xzi,1xzj,2amr,2an3,pr8,pri,pro,pry,8fwk,8fwl,2ao6,2aoc,8fwt,8fwu,2aon,2aor,2ap4,2ap6,2apl,pvn,4emd,pvq,4emf,39jf,w7n,8g0l,8g0m,8g0n,39jv,w83,39kb,39kj,4eno,4enp,4enq,4enr,4ens,4ent,4enu,4env,4enw,4enx,4eny,4enz,39kz,1y6c,1y6d,1y6e,1y6f,1y6g,1y6h,1y6i,1y6j,1y6k,1y6l,1y6m,1y6n,2atv,2au7,2auc,2aum,4epg,2aut,2av1,4epq,8g3o,8g3p,2ava,2avg,8g3x,8g3y,2avr,2avv,2aw8,2awa,2awp,q2r,q2t,q2v,39qj,wer,8g7p,8g7q,8g7r,39qz,wf7,39rf,39rn,4eus,4eut,4euu,4euv,4euw,4eux,4euy,4euz,4ev0,4ev1,4ev2,4ev3,39s3,1ydg,1ydh,1ydi,1ydj,1ydk,1ydl,1ydm,1ydn,1ydo,1ydp,1ydq,1ydr,2b0z,2b1b,2b1g,2b1q,2b1x,2b25,2b2e,2b2k,2b2v,2b2z,2b3c,2b3e,2b3t,q9v,4f0l,q9y,4f0n,39xn,wlv,8get,8geu,8gev,39y3,wmb,39yj,39yr,4f1w,4f1x,4f1y,4f1z,4f20,4f21,4f22,4f23,4f24,4f25,4f26,4f27,39z7,1ykk,1ykl,1ykm,1ykn,1yko,1ykp,1ykq,1ykr,1yks,1ykt,1yku,1ykv,2b83,39zo,39zp,39zq,39zr,39zs,5qhl,39zu,39zv,39zw,39zx,39zy,2b8f,2b8k,3a05,3a06,3a07,3a08,5nc9,3a0a,3a0b,3a0c,3a0d,2b8u,2b91,3a0m,3a0n,3a0o,3a0p,3a0q,3a0r,3a0s,2b99,2b9i,3a13,3a14,3a15,3a16,3a17,2b9o,2b9z,3a1k,3a1l,3a1m,2ba3,2bag,3a21,2bai,2bax,qgz,3a4r,170,wsz,3a57,wtf,3a5n,3a5v,4f90,4f91,4f92,4f93,4f94,4f95,4f96,4f97,4f98,4f99,4f9a,4f9b,3a6b,1yro,1yrp,1yrq,1yrr,1yrs,1yrt,1yru,1yrv,1yrw,1yrx,1yry,1yrz,2bf7,2bfj,2bfo,2bfy,2bg5,2bgd,2bgm,2bgs,2bh3,2bh7,2bhk,2bhm,2bi1,3abn,3abo,3abp,3abq,3abr,3abs,3abt,3abu,3abv,3abw,1e5,3abz,3ac3,3ac4,3ac5,3ac6,3ac7,3ac8,3ac9,3aca,3acb,3acc,3acd,3ace,3acf,3acj,3ack,3acl,3acm,3acn,3aco,3acp,3acq,3acr,3acs,3act,3acu,3acv,3acz,4fg4,4fg5,4fg6,4fg7,4fg8,4fg9,4fga,4fgb,4fgc,4fgd,4fge,4fgf,3adf,1yys,1yyt,1yyu,1yyv,1yyw,1yyx,1yyy,1yyz,1yz0,1yz1,1yz2,1yz3,2bmb,2bmn,2bms,2bn2,2bn9,2bnh,2bnq,2bnw,2bo7,2bob,2boo,2boq,2bp5,3air,7rpg,7rpi,4irs,4irt,4iru,4irv,3aj0,3aj7,bggk,bggl,bggm,8k60,8k61,8k62,8k63,3ajg,3ajn,3ajw,3ak3,4fn8,4fn9,4fna,4fnb,4fnc,4fnd,4fne,4fnf,4fng,4fnh,4fni,4fnj,3akj,1z5w,1z5x,1z5y,1z5z,1z60,1z61,1z62,1z63,1z64,1z65,1z66,1z67,2btf,2btr,2btw,2bu6,4fp0,2bud,2bul,8h38,8h39,2buu,2bv0,2bvb,2bvf,2bvs,2bvu,2bw9,r2b,3aq4,r2r,3aqk,3aqr,3ar0,3ar7,4fuc,4fud,4fue,4fuf,4fug,4fuh,4fui,4fuj,4fuk,4ful,4fum,4fun,3arn,1zd0,1zd1,1zd2,1zd3,1zd4,1zd5,1zd6,1zd7,1zd8,1zd9,1zda,1zdb,2c0j,2c0v,r50,2c1a,r5g,2c1p,8hac,8had,2c1y,2c24,2c2f,2c2j,2c2w,2c2y,2c3d,3awz,8kjo,7s3t,7s3u,3ax8,3axf,bgus,bgut,bguu,bguv,bguw,bgux,bguy,bguz,3axo,3axv,3ay4,3ayb,4g1g,4g1h,4g1i,4g1j,4g1k,4g1l,4g1m,4g1n,4g1o,4g1p,4g1q,4g1r,3ayr,1zk4,1zk5,1zk6,1zk7,1zk8,1zk9,1zka,1zkb,1zkc,1zkd,1zke,1zkf,2c7n,2c7z,2c84,2c8e,4g38,2c8l,2c8t,8hhg,8hhh,2c92,2c98,2c9j,2c9n,2ca0,2ca2,2cah,3b43,3b44,3b45,3b46,3b47,3b48,3b49,3b4a,3b4b,3b4c,3b4j,3b4k,3b4l,3b4m,3b4n,3b4o,3b4p,3b4q,3b4r,3b4s,3b4z,3b50,3b51,3b52,3b53,3b54,3b55,3b56,3b57,3b58,3b5f,4g8k,4g8l,4g8m,4g8n,4g8o,4g8p,4g8q,4g8r,4g8s,4g8t,4g8u,4g8v,3b5v,1zr8,1zr9,1zra,1zrb,1zrc,1zrd,1zre,1zrf,1zrg,1zrh,1zri,1zrj,2cer,2cf3,2cf8,2cfi,2cfp,2cfx,2cg6,2cgc,2cgn,2cgr,2ch4,2ch6,2chl,rnq,ro6,3bbw,3bc6,3bcc,3bcj,3bck,3bcl,4gfq,4gfr,4gfs,4gft,4gfu,4gfv,4gfw,4gfx,4gfy,4gfz,3bcz,1zyc,1zyd,1zye,1zyf,1zyg,1zyh,1zyi,1zyj,1zyk,1zyl,1zym,1zyn,2clv,2cm7,2cmc,2cmm,2cmt,2cn1,2cna,2cng,2cnr,2cnv,2co8,2coa,2cop,ruu,rva,3bj0,3bja,3bjg,3bjn,3bjo,3bjp,4gmu,4gmv,4gmw,4gmx,4gmy,4gmz,4gn0,4gn1,4gn2,4gn3,3bk3,205g,205h,205i,205j,205k,205l,205m,205n,205o,205p,205q,205r,2csz,2ctb,2ctg,2ctq,2ctx,2cu5,2cue,2cuk,2cuv,2cuz,2cvc,2cve,2cvt,3bpf,3bpg,3bph,3bpi,3bpj,3bpm,3bpn,23gt,3bpv,3bpw,3bpx,3bpy,3bpz,3bq0,3bq1,3bq2,3bq3,3bq4,23h9,b1um,b1un,3bqb,3bqc,3bqd,3bqe,3bqf,3bqg,3bqh,3bqi,3bqj,3bqk,23hp,23hq,23hr,3bqr,4gtw,4gtx,4gty,4gtz,4gu0,4gu1,4gu2,4gu3,4gu4,3br1,3br2,3br3,3br7,20ck,20cl,20cm,20cn,20co,20cp,20cq,20cr,20cs,3brh,3bri,3brj,2d03,2d0f,2d0k,2d0u,2d11,2d19,2d1i,2d1o,2d1z,2d23,2d2g,2d2i,2d2x,2yo,2yp,2yq,3bwj,4gzv,3bwz,4h0b,3bxf,4h0k,4h0l,4h0m,4h0n,4h0o,4h0p,4h0q,4h0r,3bxo,23ot,23ou,23ov,3bxv,20j8,20j9,20ja,20jb,20jc,20jd,20je,20jf,4h18,dlq5,3byb,20jo,20jp,20jq,20jr,20js,20jt,20ju,20jv,dlqk,2d77,2d7j,2d7o,2d7y,4h2s,2d85,2d8d,8ih0,8ih1,2d8m,2d8s,2d93,2d97,2d9k,2d9m,2da1;0,0,8,r,17,7v,8b,8r,ez,ff,m3,mj,t7,tn,10b,10r,117,17f,17v,1ej,1ez,1ln,1m3,1sr,1t7,1zv,20b,20r,26z,27f,2e3,2ej,2l7,2ln,2sb,2sr,2t7,2zf,2zv;0,3,8,1s,28,29,2o,2p,2q,34,35,36,37,3k,3l,3m,3n,3o,40,41,42,43,44,45,4h,4i,4j,4k,4l,4m,4y,4z,50,51,52,53,5c,5d,5e,5f,5g,5h,5i,5j,5k,5s,5t,5u,5v,5w,5x,5y,5z,60,61,6b,6c,6d,6e,6f,6g,6h,6i,4e7h,4e7i,4e7j,6u,6v,6w,6x,6y,6z,70,71,72,73,4eel,4een,2130,e5,2132,e7,39ik,39il,39im,21a3,l8,l9,la,21a7,39po,39pp,39pq,sc,sd,se,21hb,39ws,39wt,39wu,21ob,zg,zh,zi,21of,21vg,21vh,21vi;0,4,8,9,a,b,c,d,e,f,4e1r,4e26,4e27,4e2n,6fv,6fw,6fx,6fy,6fz,392j,392k,392l,392m,392n,392z,3930,3931,3932,3933,393f,393g,393h,393i,393j,6hc,6hd,6he,6hf,6hg,6hh,6hi,6hj,3bs,3bt,3bu,393v,393w,393x,393y,393z,4kio,4kip,4kiq,4kir,4kis,4kit,4kiu,4kiv,7qaz,7qb0,7qb1,7qb2,7qb3,394g,394h,394i,394j,394k,394l,394m,394n,20wc,7h,20we,7j,4e8v,88,4e9a,8f,8o,4e9q,8v,4ea7,6n0,6n1,6n2,6n3,399o,399p,399q,399r,39a3,59z0,39a5,39a6,39a7,39aj,59zg,59zh,39am,59zj,1xw0,d01,d02,d03,d04,d05,d06,d07,3iw,3ix,3iy,39az,59zw,59zx,59zy,59zz,pnr,7qi3,po7,213f,ek,el,em,213j,4efw,4efx,4efy,4efz,fc,4egd,4ege,fj,fs,4egt,4egu,fz,4ehb,6ts,6tt,6tu,6tv,6tw,6tx,6ty,6tz,6u0,6u1,6u2,6u3,6u4,6u5,6u6,6u7,39gg,39gh,39gi,39gj,39gk,39gl,39gm,39gn,39go,39gp,39gq,39gr,39gs,39gt,39gu,39gv,39gw,39gx,39gy,39gz,39h0,39h1,39h2,39h3,39h4,39h5,39h6,39h7,5a64,39h9,39ha,39hb,39hc,39hd,39he,39hf,39hg,39hh,39hi,39hj,39hk,39hl,39hm,39hn,5a6k,5a6l,5a6m,5a6n,1y34,6vl,d76,d77,d78,d79,d7a,d7b,3q0,3q1,3q2,39i3,5a70,5a71,5a72,5a73,39i9,puv,7qp7,39ip,pvb,lo,lp,lq,21an,4en0,4en1,4en2,4en3,md,me,mf,mg,4end,4ene,mj,4eng,ml,mm,mn,mt,mu,mv,mw,4ent,4enu,mz,4enw,n1,n2,n3,4eod,4eoe,4eof,718,39nh,39ni,39nj,39nw,5act,5acu,5acv,39ob,5ad8,5ad9,5ada,5adb,39oq,39or,5ado,5adp,5adq,5adr,1ya8,72p,dea,deb,dec,ded,dee,def,3x4,3x5,3x6,39p7,5ae4,5ae5,5ae6,5ae7,39pd,q1z,7qwb,q29,q2f,21hn,ss,st,su,21hr,4eu4,4eu5,ta,4eu7,th,tk,4euh,tm,tn,4euk,tp,tq,tr,tx,u0,4eux,u2,u3,4ev0,u5,u6,u7,4evh,5aha,4evj,5ahq,5ai6,5aim,5aj2,78c,39ul,5aji,39un,39v0,5ajx,5ajy,5ajz,39vf,5akc,5akd,5ake,5akf,39vv,5aks,5akt,5aku,5akv,1yhc,79t,dle,dlf,dlg,dlh,dli,dlj,448,449,44a,39wb,5al8,5al9,5ala,5alb,39wh,q93,7r3f,z0,z1,z2,39wx,q9j,21os,21ot,21ou,4f19,4f1a,10l,10m,4f1j,10o,10p,10q,10r,4f1o,10t,10u,4f1r,111,112,4f1z,114,115,116,117,4f24,119,11a,4f27,4f2l,4f2m,7fg,3a1p,3a1q,3a1r,3a24,5ar1,5ar2,5ar3,3a2j,5arg,5arh,5ari,5arj,3a2z,5arw,5arx,5ary,5arz,1yog,7gx,dsi,dsj,dsk,dsl,dsm,dsn,4bc,4bd,4be,3a3f,5asc,5asd,5ase,5asf,3a3l,qg7,162,7raj,164,165,166,3a41,qgn,16j,16k,16l,4f8a,4f8e,4f8p,17u,4f8r,4f8s,4f8t,17y,4f8v,4f95,18a,4f97,4f98,4f99,18e,4f9b,4f9m,4f9q,7mj,7ml,7mm,7mn,3a97,3a98,3a99,3a9a,3a9b,3a9n,5ayk,5ayl,5aym,5ayn,3aa3,5az0,5az1,5az2,5az3,1yvk,7o1,dzm,dzn,dzo,dzp,dzq,dzr,4ig,4ih,4ii,3aaj,5azg,5azh,5azi,5azj,3aap,1d6,7rhn,1d8,1d9,1da,qnl,1dn,1do,1dp,4ffe,4fff,4ffg,4ffh,4ffi,4fft,1ey,1ez,1f0,1f1,1f2,4ffz,4fg9,1fe,1ff,1fg,1fh,1fi,4fgf,4fgq,4fgr,4fgs,4fgt,4fgu,7tn,7to,7tp,7tq,7tr,3agb,3agc,3agd,3age,3agf,3agr,3ags,5b5p,5b5q,5b5r,3ah7,5b64,5b65,5b66,5b67,1z2o,7v5,7v6,7v7,7v8,7v9,7va,7vb,4pk,4pl,4pm,3ahn,5b6k,5b6l,5b6m,5b6n,3ahs,3aht,3ahu,3ahv,3ahw,3ahx,3ahy,4lwn,1ka,7ror,1kc,1kd,1ke,3ai8,3ai9,3aia,3aib,3aic,3aid,3aie,3aif,1kr,1ks,4fmy,4fmz,4fn0,4fn1,4fn2,4fne,4fnf,4fng,4fnh,4fni,80u,80v,4v4,4v5,4v6,4v7,817,818,819,3ani,3anj,1ps,1pt,1pu,1pv,3anv,3anw,3anx,5bcu,5bcv,3aob,3aoc,5bd9,5bda,5bdb,1z9s,1z9t,1z9u,1z9v,1z9w,1z9x,1z9y,82f,4wo,4wp,4wq,3aor,5bdo,5bdp,5bdq,5bdr,4cm8,6t46,4m3r,7rvv,1rg,1rh,1ri,3apj,87z,528,529,52a,52b,52c,52d,52e,88b,88c,88d,3aum,3aun,1ww,1wx,1wy,1wz,1x0,1x1,1x2,3auz,3av0,3av1,5bjy,5bjz,3avf,3avg,3avh,5bke,5bkf,1zgw,1zgx,1zgy,1zgz,1zh0,1zh1,1zh2,89j,53s,53t,53u,3avv,5bks,5bkt,5bku,5bkv,a5eo,4cte,i1ur,559i,4mav,7s2z,c2ye,3awn,59f,59g,59h,59i,59j,59k,8ff,8fg,8fh,8fi,8fj,243,244,245,246,247,248,3b23,3b24,3b25,3b26,3b27,24m,3b2j,3b2k,3b2l,5bri,5brj,1zo0,1zo1,1zo2,1zo3,1zo4,1zo5,1zo6,8gn,5aw,5ax,5ay,3b2z,5brw,5brx,5bry,5brz,4d0i,8eeb,55gm,4mhz,7sa3,c35i,3b3r,5gj,5gk,5gl,5gm,5gn,5go,5gp,5gq,8mj,8mk,8ml,8mm,8mn,2b7,2b8,2b9,2ba,2bb,2bc,2bd,2be,3b97,3b98,3b99,3b9a,3b9b,2bs,3b9n,3b9o,3b9p,3b9q,3b9r,1zv4,1zv5,1zv6,1zv7,1zv8,1zv9,1zva,8nr,5i0,5i1,5i2,3ba3,5bz0,5bz1,5bz2,5bz3,4d7m,8elf,55nq,4mp3,7sh7,c3cm,3bav,5nn,5no,5np,5nq,5nr,5ns,5nt,5nu,2ib,2ic,2id,2ie,2if,2ig,2ih,2ii,8u3,2iv,3bgr,3bgs,3bgu,3bgv,2028,2029,202a,202b,202c,202d,202e,8uv,5p4,5p5,5p6,3bh7,3bh8,3bh9,3bha,3bhb,4deq,fylf,55uu,4mw7,7sob,7soc,c3jq,3bhz,5ur,5ut,5uu,5uv,5uw,5ux,5uy,2pf,2ph,2pi,2pj,2pk,2pl,2pm,917,91c,91d,91e,2pv,91g,2q0,3bnv,3bny,209c,209d,209e,209f,209g,209h,209i,91z,5w8,5w9,5wa,5wb,5wc,5wd,5we,5wf,4n3b,3bp3,61v,61z,620,621,622,2wj,2wn,2wo,2wp,2wq,98b,98c,98e,98g,98h,98i,2wz,98k,98l,98m,2x4,2x5,2x6,3buz,3bv0,3bv2,98w,20gh,20gi,20gj,20gk,20gl,20gm,993,63c,63d,63e,63f,63g,63h,63i,63j,fkw,3bvl,3bvm,3bvn,3bvo,4naf,23n4,3bw1,3bw2,3bw3,3bw4,3bw7,68z,694,695,696,33n,33s,33t,33u,9ff,9fi,9fk,9fl,9fm,343,9fo,9fp,9fq,9fr,348,3c23,3c26,9g0,20nl,20nm,20nn,20no,20np,20nq,9g7,6ag,6ah,6ai,6aj,6ak,6al,6am,6an,fs0,5skk,4nhj,23u8,5pf8,3c3b;0,5,8,38xs,38xt,38xu,38xv,38xw,38xx,38xy,38xz,38y8,38y9,38ya,38yb,38yc,38yd,38ye,38yf,38yo,38yp,38yq,38yr,38ys,38yt,38yu,38yv,38z4,38z5,38z6,38z7,38z8,38z9,38za,38zb,38zk,38zl,38zm,38zn,38zo,38zp,38zq,38zr,phj,phz,395z,4e9c,4e9d,4e9e,4e9f,4e9g,4e9h,4e9i,396f,1xs0,1xs1,1xs2,1xs3,1xs4,1xs5,1xs6,396v,39c1,pon,39ch,pp3,39cx,39d3,4egg,4egh,4egi,4egj,4egk,4egl,4egm,39dj,1xz4,1xz5,1xz6,1xz7,1xz8,1xz9,1xza,39dz,pvl,pvr,39jl,pw7,39k1,39k7,4enk,4enl,4enm,4enn,4eno,4enp,4enq,39kn,1y68,1y69,1y6a,1y6b,1y6c,1y6d,1y6e,39l3,39q9,q2v,39qp,q3b,39r5,39rb,4euo,4eup,4euq,4eur,4eus,4eut,4euu,39rr,1ydc,1ydd,1yde,1ydf,1ydg,1ydh,1ydi,39s7,39xd,q9z,zw,39xt,qaf,39y9,39yf,4f1s,4f1t,4f1u,4f1v,4f1w,4f1x,4f1y,39yv,1ykg,1ykh,1yki,1ykj,1ykk,1ykl,1ykm,39zb,qgx,qh3,16z,170,171,3a4x,qhj,3a5d,3a5j,4f8w,4f8x,4f8y,4f8z,4f90,4f91,4f92,3a5z,1yrk,1yrl,1yrm,1yrn,1yro,1yrp,1yrq,3a6f,3abk,3abl,3abm,3abn,3abo,3abp,3abq,3abr,1e4,3ac0,3ac1,3ac2,3ac3,3ac4,3ac5,3ac6,3ac7,3acg,3ach,3aci,3acj,3ack,3acl,3acm,3acn,4fg0,4fg1,4fg2,4fg3,4fg4,4fg5,4fg6,3ad3,1yyo,1yyp,1yyq,1yyr,1yys,1yyt,1yyu,3adj,7rpc,7rpd,7rpe,7rpf,7rpg,3aiv,7rps,7rpt,7rpu,7rpv,7rpw,3ajb,3ajr,4fn4,4fn5,4fn6,4fn7,4fn8,4fn9,4fna,3ak7,1z5s,1z5t,1z5u,1z5v,1z5w,1z5x,1z5y,3akn,4ft2,r2f,8h7a,r2v,3aqv,4fu8,4fu9,4fua,4fub,4fuc,4fud,4fue,3arb,1zcw,1zcx,1zcy,1zcz,1zd0,1zd1,1zd2,3arr,4g06,3ax3,8hee,3axj,3axz,4g1c,4g1d,4g1e,4g1f,4g1g,4g1h,4g1i,3ayf,1zk0,1zk1,1zk2,1zk3,1zk4,1zk5,1zk6,3ayv,4g7a,3b47,8hli,3b4n,3b53,4g8g,4g8h,4g8i,4g8j,4g8k,4g8l,4g8m,3b5j,1zr4,1zr5,1zr6,1zr7,1zr8,1zr9,1zra,3b5z,4gee,rnr,8hsm,ro7,3bc7,4gfk,4gfl,4gfm,4gfn,4gfo,4gfp,4gfq,3bcn,1zy8,1zy9,1zya,1zyb,1zyc,1zyd,1zye,3bd3,7soy,7soz,3bif,7spe,7spf,3biv,3bjb,4gmo,4gmp,4gmq,4gmr,4gms,4gmt,4gmu,3bjr,205c,205d,205e,205f,205g,205h,205i,3bk7,23gg,3bpd,3bpe,3bpf,3bpg,3bpj,23gw,3bpt,3bpu,3bpv,3bpw,3bpz,23hc,3bq9,3bqa,3bqb,3bqc,3bqf,3bqo,3bqp,3bqq,3bqr,3bqs,3bqt,3bqu,3bqv,3br4,3br5,3br6,3br7,3br8,3br9,3bra,3brb,23nk,3bwh,3bwi,3bwj,3bwk,3bwn,23o0,7t3l,7t3m,7t3n,3bx0,3bx3,23og,7t41,7t42,7t43,3bxg,3bxj,20j6,ct9v,3bxw,3bxx,3bxy,3bxz,3byf;0,3,9,4e74,4e75,6o,6p,20vm,4ee8,4ee9,ds,dt,212q,219s,219t;0,4,9,0,1,20oy,4e1c,4e1d,4e1s,x,4e1u,4e28,1d,4e2a,4e2p,6fk,6fl,3928,3929,392o,392p,3934,3935,393k,393l,3bm,7qao,7qap,74,75,20w2,4e8g,4e8h,80,81,4e8y,8g,8h,4e9e,4e9s,4e9t,6mo,6mp,399c,399d,59yo,399t,59z4,39a9,59zk,39ap,3iq,7qht,2134,2135,2136,4efm,4eg0,4eg1,f6,4eg3,4eg4,4egg,4egh,fm,4egj,4egk,4egy,6ts,6tt,39gg,39gh,5a5s,39gx,5a68,39hd,5a6o,39ht,3pu,7qox,4emp,4emq,4ems,4en4,m9,ma,4en7,mc,4en9,4enk,mp,mq,4enn,ms,4enp,4eo1,4eo2,4eo4,70w,70x,39nk,39nl,5acw,39o1,5adc,39oh,5ads,39ox,3wy,7qw1,4ets,4ett,4etv,4etw,tc,td,4eua,tf,tg,4eud,ts,tt,4euq,tv,tw,4eut,4ev4,4ev5,4ev7,4ev8,780,781,39uo,39up,5ak0,39v5,5akg,39vl,5akw,39w1,442,7r35,4f0w,4f0x,4f0z,10g,10h,4f1e,10j,4f1g,10w,10x,4f1u,10z,4f1w,4f28,4f29,4f2b,7f4,7f5,3a1s,3a1t,5ar4,3a29,5ark,3a2p,5as0,3a35,4b6,7ra9,4f80,4f82,4f83,4f84,17k,4f8h,17m,17n,17o,4f8l,180,4f8x,182,183,184,4f91,4f9c,4f9e,4f9f,4f9g,7m8,7m9,3a8w,3a8x,5ay8,3a9d,5ayo,3a9t,5az4,3aa9,4ia,7rhd,4ff4,4ff5,4ff6,4ff8,1eo,1ep,1eq,4ffn,1es,4ffp,1f4,1f5,1f6,4fg3,1f8,4fg5,4fgg,4fgh,4fgi,4fgk,7tc,7td,3ag0,3ag1,5b5c,3agh,5b5s,3agx,5b68,3ahd,4pe,7roh,4fmo,4fmp,4fmq,4fms,4fn4,4fn5,4fn6,4fn8,806,80g,80h,3amu,3an4,3an5,5bcg,3anl,5bcw,3ao1,5bdc,3aoh,4wi,7rvl,87k,87l,3au8,3au9,5bjk,3aup,5bk0,3av5,5bkg,3avl,53m,7s2p,8eo,8ep,3b1c,3b1d,3b1s,3b1t,5br4,3b29,5brk,3b2p,5aq,7s9t,8lt,8m8,3b8h,3b8w,3b8x,3b9c,3b9d,5byo,3b9t,5hu,7sgx,3bgg,3bgh,3bgw,3bgx,5oy,7so0,7so1,5w0,5w1,5w2,634,635,636,6a8,6a9,6aa;0,0,-2,2e6,2e7,2em,2en,2f2,2f3,2fi,2fj,2fy,2fz,2ge,2gf,2gu,2gv,2ha,2hb,2hq,2hr,2i6,2i7,2im,2in,2l9,2la,2lb,2lp,2lq,2lr,2m5,2m6,2m7,2ml,2mm,2mn,2n1,2n2,2n3,2nh,2ni,2nj,2nx,2ny,2nz,2od,2oe,2of,2ot,2ou,2ov,2p9,2pa,2pb,2pp,2pq,2pr,2sb,2sc,2sd,2se,2sf,2ss,2st,2su,2sv,2t7,2t8,2t9,2ta,2tb,2tn,2to,2tp,2tq,2tr,2u3,2u4,2u5,2u6,2u7,2uj,2uk,2ul,2um,2un,2v0,2v1,2v2,2v3,2vf,2vg,2vh,2vi,2vj,2vv,2vw,2vx,2vy,2vz,2wc,2wd,2we,2wf,2wr,2ws,2wt,2wu,2wv,2ze,2zf,2zg,2zh,2zi,2zj,2zu,2zv,2zw,2zx,2zy,2zz,30b,30c,30d,30e,30f,30r,30s,30t,30u,30v,316,317,318,319,31a,31b,31m,31n,31o,31p,31q,31r,322,323,324,325,326,327,32i,32j,32k,32l,32m,32n,32y,32z,330,331,332,333,33e,33f,33g,33h,33i,33j,33u,33v,33w,33x,33y,33z;0,0,-1,1ej,1ek,1el,1em,1en,1ez,1f0,1f1,1f2,1f3,1fe,1ff,1fg,1fh,1fi,1fj,1fv,1fw,1fx,1fy,1fz,1gb,1gc,1gd,1ge,1gf,1gq,1gr,1gs,1gt,1gu,1gv,1h7,1h8,1h9,1ha,1hb,1hm,1hn,1ho,1hp,1hq,1i2,1i3,1i4,1i5,1i6,1i7,1ii,1ij,1ik,1il,1im,1in,1j0,1j1,1j2,1j3,1li,1lj,1lk,1ll,1lm,1ln,1lo,1lp,1lq,1lr,1ly,1lz,1m0,1m1,1m2,1m3,1m4,1m5,1m6,1m7,1me,1mf,1mg,1mh,1mi,1mj,1mk,1ml,1mm,1mn,1mu,1mv,1mw,1mx,1my,1mz,1n0,1n1,1n2,1n3,1na,1nb,1nc,1nd,1ne,1nf,1ng,1nh,1ni,1nj,1nq,1nr,1ns,1nt,1nu,1nv,1nw,1nx,1ny,1nz,1o6,1o7,1o8,1o9,1oa,1ob,1oc,1od,1oe,1of,1om,1on,1oo,1op,1oq,1or,1os,1ot,1ou,1p2,1p3,1p4,1p5,1p6,1p7,1p8,1p9,1pa,1pb,1pj,1pk,1pl,1pm,1pn,1po,1pp,1pq,1pr,1py,1pz,1q0,1q4,1q5,1q6,1q7,1sk,1sl,1sm,1sn,1so,1sp,1sq,1sr,1ss,1st,1su,1sv,1sz,1t0,1t1,1t2,1t3,1t4,1t5,1t6,1t7,1t8,1t9,1ta,1tb,1tf,1tg,1th,1ti,1tj,1tk,1tl,1tm,1tn,1to,1tp,1tq,1tr,1tv,1tw,1tx,1ty,1tz,1u0,1u1,1u2,1u3,1u4,1u5,1u6,1u7,1uc,1ud,1ue,1uf,1ug,1uh,1ui,1uj,1uk,1ul,1um,1un,1us,1ut,1uu,1uv,1uw,1ux,1uy,1uz,1v0,1v1,1v2,1v3,1v7,1v8,1v9,1va,1vb,1vc,1vd,1ve,1vf,1vg,1vh,1vi,1vj,1vn,1vo,1vp,1vq,1vr,1vs,1vt,1vu,1vv,1vw,1vx,1vy,1w3,1w4,1w5,1w6,1w7,1w8,1w9,1wa,1wb,1wc,1wd,1we,1wf,1wk,1wl,1wm,1wn,1wo,1wp,1wq,1wr,1ws,1wt,1wu,1wv,1x0,1x1,1x2,1x3,1x4,1x5,1x7,1x8,1x9,1xa,1xb,1zl,1zm,1zn,1zo,1zp,1zq,1zr,1zs,1zt,1zu,1zv,1zw,1zx,1zy,1zz,201,202,203,204,205,206,207,208,209,20a,20b,20c,20d,20e,20f,20h,20i,20j,20k,20l,20m,20n,20o,20p,20q,20r,20s,20t,20u,20v,20x,20y,20z,210,211,212,213,214,215,216,217,218,219,21a,21b,21d,21e,21f,21g,21h,21i,21j,21k,21l,21m,21n,21o,21p,21q,21r,21t,21u,21v,21w,21x,21y,21z,220,221,222,223,224,225,226,227,229,22a,22b,22c,22d,22e,22f,22g,22h,22i,22j,22k,22l,22m,22n,22p,22q,22r,22s,22t,22u,22v,22w,22x,22y,22z,230,231,232,233,235,236,237,238,239,23a,23b,23c,23d,23e,23f,23g,23h,23i,23j,23l,23m,23n,23o,23p,23q,23r,23s,23t,23u,23v,23w,23x,23y,23z,241,242,243,244,245,246,247,248,249,24a,24b,24c,24d,24e,24f,26o,26p,26q,26r,26s,26t,26u,26v,26w,26x,26y,26z,270,271,272,273,274,275,276,277,278,279,27a,27b,27c,27d,27e,27f,27g,27h,27i,27j,27k,27l,27m,27n,27o,27p,27q,27r,27s,27t,27u,27v,27w,27x,27y,27z,280,281,282,283,284,285,286,287,288,289,28a,28b,28c,28d,28e,28f,28g,28h,28i,28j,28k,28l,28m,28n,28o,28p,28q,28r,28s,28t,28u,28v,28w,28x,28y,28z,290,291,292,293,294,295,296,297,298,299,29a,29b,29c,29d,29e,29f,29g,29h,29i,29j,29k,29l,29m,29n,29o,29p,29q,29r,29s,29t,29u,29v,29w,29x,29y,29z,2a0,2a1,2a2,2a3,2a4,2a5,2a6,2a7,2a8,2a9,2aa,2ab,2ac,2ad,2ae,2af,2ag,2ah,2ai,2aj,2ak,2al,2am,2an,2ao,2ap,2aq,2ar,2as,2at,2au,2av,2aw,2ax,2ay,2az,2b0,2b1,2b2,2b3,2b4,2b5,2b6,2b7,2b8,2b9,2ba,2bb,2bc,2bd,2be,2bf,2bg,2bh,2bi,2bj,2ds,2dt,2du,2dv,2dw,2dx,2dy,2dz,2e0,2e1,2e2,2e3,2e4,2e5,2e6,2e7,2e8,2e9,2ea,2eb,2ec,2ed,2ee,2ef,2eg,2eh,2ei,2ej,2ek,2el,2em,2en,2eo,2ep,2eq,2er,2es,2et,2eu,2ev,2ew,2ex,2ey,2ez,2f0,2f1,2f2,2f3,2f4,2f5,2f6,2f7,2f8,2f9,2fa,2fb,2fc,2fd,2fe,2ff,2fg,2fh,2fi,2fj,2fk,2fl,2fm,2fn,2fo,2fp,2fq,2fr,2fs,2ft,2fu,2fv,2fw,2fx,2fy,2fz,2g0,2g1,2g2,2g3,2g4,2g5,2g6,2g7,2g8,2g9,2ga,2gb,2gc,2gd,2ge,2gf,2gg,2gh,2gi,2gj,2gk,2gl,2gm,2gn,2go,2gp,2gq,2gr,2gs,2gt,2gu,2gv,2gw,2gx,2gy,2gz,2h0,2h1,2h2,2h3,2h4,2h5,2h6,2h7,2h8,2h9,2ha,2hc,2hd,2he,2hf,2hg,2hh,2hi,2hj,2hk,2hl,2hm,2hn,2ho,2hp,2hq,2hr,2hs,2ht,2hu,2hv,2hw,2hx,2hy,2hz,2i0,2i1,2i2,2i3,2i4,2i5,2i6,2i7,2i8,2i9,2ia,2ib,2ic,2id,2ie,2if,2ig,2ih,2ii,2ij,2ik,2il,2im,2in,2kw,2kx,2ky,2kz,2l0,2l1,2l2,2l3,2l4,2l5,2l6,2l7,2l8,2l9,2la,2lb,2lc,2ld,2le,2lf,2lg,2lh,2li,2lj,2lk,2ll,2lm,2ln,2lo,2lp,2lq,2lr,2ls,2lt,2lu,2lv,2lw,2lx,2ly,2lz,2m0,2m1,2m2,2m3,2m4,2m5,2m6,2m7,2m8,2m9,2ma,2mb,2mc,2md,2me,2mf,2mg,2mh,2mi,2mj,2mk,2ml,2mm,2mn,2mo,2mp,2mq,2mr,2ms,2mt,2mu,2mv,2mw,2mx,2my,2mz,2n0,2n1,2n2,2n3,2n4,2n5,2n6,2n7,2n8,2n9,2na,2nb,2nc,2nd,2ne,2nf,2ng,2nh,2ni,2nj,2nk,2nl,2nm,2nn,2no,2np,2nq,2nr,2ns,2nt,2nu,2nv,2nw,2nx,2ny,2nz,2o0,2o1,2o2,2o3,2o4,2o5,2o6,2o7,2o8,2o9,2oa,2ob,2oc,2od,2oe,2og,2oh,2oi,2oj,2ok,2ol,2om,2on,2oo,2op,2oq,2or,2os,2ot,2ou,2ov,2ow,2ox,2oy,2oz,2p0,2p1,2p2,2p3,2p4,2p5,2p6,2p7,2p8,2p9,2pa,2pb,2pc,2pd,2pe,2pf,2pg,2ph,2pi,2pj,2pk,2pl,2pm,2pn,2po,2pp,2pq,2pr,2s0,2s1,2s2,2s3,2s4,2s5,2s6,2s7,2s8,2s9,2sa,2sb,2sc,2sd,2se,2sf,2sg,2sh,2si,2sj,2sk,2sl,2sm,2sn,2so,2sp,2sq,2sr,2ss,2st,2su,2sv,2sw,2sx,2sy,2sz,2t0,2t1,2t2,2t3,2t4,2t5,2t6,2t7,2t8,2t9,2ta,2tb,2tc,2td,2te,2tf,2tg,2th,2ti,2tj,2tk,2tl,2tm,2tn,2to,2tp,2tq,2tr,2ts,2tt,2tu,2tv,2tw,2tx,2ty,2tz,2u0,2u1,2u2,2u3,2u4,2u5,2u6,2u7,2u8,2u9,2ua,2ub,2uc,2ud,2ue,2uf,2ug,2uh,2ui,2uj,2uk,2ul,2um,2un,2uo,2up,2uq,2ur,2us,2ut,2uu,2uv,2uw,2ux,2uy,2uz,2v0,2v1,2v2,2v3,2v4,2v5,2v6,2v7,2v8,2v9,2va,2vb,2vc,2vd,2ve,2vf,2vg,2vh,2vi,2vj,2vk,2vl,2vm,2vn,2vo,2vp,2vq,2vr,2vs,2vt,2vu,2vv,2vw,2vx,2vy,2vz,2w0,2w1,2w2,2w3,2w4,2w5,2w6,2w7,2w8,2w9,2wa,2wb,2wc,2wd,2we,2wf,2wg,2wh,2wi,2wj,2wk,2wl,2wm,2wn,2wo,2wp,2wq,2wr,2ws,2wt,2wu,2wv,2z4,2z5,2z6,2z7,2z8,2z9,2za,2zb,2zc,2zd,2ze,2zf,2zg,2zh,2zi,2zj,2zk,2zl,2zm,2zn,2zo,2zp,2zq,2zr,2zs,2zt,2zu,2zv,2zw,2zx,2zy,2zz,300,301,302,303,304,305,306,307,308,309,30a,30b,30c,30d,30e,30f,30g,30h,30i,30j,30k,30l,30m,30n,30o,30p,30q,30r,30s,30t,30u,30v,30w,30x,30y,30z,310,311,312,313,314,315,316,317,318,319,31a,31b,31c,31d,31e,31f,31g,31h,31i,31j,31k,31l,31m,31n,31o,31p,31q,31r,31s,31t,31u,31v,31w,31x,31y,31z,320,321,322,323,324,325,326,327,328,329,32a,32b,32c,32d,32e,32f,32g,32h,32i,32j,32k,32l,32m,32n,32o,32p,32q,32r,32s,32t,32u,32v,32w,32x,32y,32z,330,331,332,333,334,335,336,337,338,339,33a,33b,33c,33d,33e,33f,33g,33h,33i,33j,33k,33l,33m,33n,33o,33p,33q,33r,33s,33t,33u,33v,33w,33x,33y,33z;0,4,-c,4ma,1gy,4te,1o2,50i,1v6,57m,22a,22q,5eq,29e,29u,5lu,2gi,2gy,5sy,2nm,2np,2nq,2nr,2ns,2o2,2o5,2o6,2o7,2o8,2o9,2oa,2ob,2om,2on,2oo,2op,2oq,2or,602,2uq,2us,2ut,2uu,2uv,2uw,2v6,2v8,2v9,2va,2vb,2vc,2vd,2ve,2vf,2vq,2vr,2vs,2vt,2vu,2vv,676,31u,31w,31x,31y,31z,320,32a,32c,32d,32e,32f,32g,32h,32i,32j,32u,32v,32w,32x,32y,32z;1,4,0,3fb3,3fbj,3fbz,3fcf,9x94,6ft,6fu,6fv,6fw,6fx,6fy,6fz,82w9,82wa,82wb,82wc,82wd,82we,82wf,3fi7,3fin,3fj3,3fjj,9xg8,6mx,6my,6mz,6n0,6n1,6n2,6n3,833d,833e,833f,833g,833h,833i,833j,9xnc,6u1,6u2,6u3,6u4,6u5,6u6,6u7,83ah,83ai,83aj,83ak,ftf1,ftf2,ftf3,9xug,715,716,717,718,719,71a,71b,83hl,83hm,83hn,9xv0,3vsd,3vse,3vsf,789,78a,78b,78c,78d,78e,78f,42x,42y,42z,430,3vzh,432,433,n3c,n3d,n3e,n3f,n3g,n3h,n3i,n3j,7fc,7fd,7fe,7ff,7fg,7fh,7fi,7fj,4a0,7ft,4a2,4a3,7fw,3w6l,4a6,7fz,21tl,21to,21tr,21u1,21u4,21u7,21uh,21uk,21un,nag,nah,nai,naj,nak,nal,nam,nan,nax,nb0,nb3,7mf,7mg,7mh,7mi,7mj,7mk,7mm,7mn,4h3,4h4,4h5,4h6,4h7,4h8,3wdp,4ha,4hb,1bx,nhk,nhl,nhm,nhn,nho,nhp,nhq,nhr,3wk4,7th,7ti,7tj,7tk,3wkk,3wkl,3wkm,3wkn,3wko,3wkp,3wkq,3wkr,3wkt,3wku,3wkv,3agk,3agl,3agm,3agn,3ago,3agp,3agq,3agr,1j1,1j2,3ah0,3ah1,qti,qtj,3ah4,qtl,qtm,3ah7,3ahg,3ahh,3ahi,3ahj,3ahk,3ahl,3ahm,3ahn,3ahw,3ahx,3ahy,3ahz,3ai0,3ai1,3ai2,3ai3,3aic,3aid,quu,quv,3aig,qux,quy,3aij,80k,80l,80m,3wro,3wrp,3wrq,3wrr,3wrs,ecp,ecq,3wrv,3wrx,3wry,3wrz,3ano,3ans,3anv,1q6,r0k,3aob,3aok,2bx1,2bx2,2bx3,3aoo,ee1,ee2,3aor,3ap0,3ap4,3ap7,r1w,3apk,3apn,87o,87p,3wys,3wyt,3wyu,3wyv,3wyw,ejt,eju,3wyz,3wz1,3aus,1x2,1x3,3auw,1x6,3auz,r7o,r7v,3avo,2c45,2c46,2c47,3avs,1jo9,el6,3avv,3aw4,3aw8,3awb,o32,o33,r90,3awo,r97,8es,3x5w,3x5x,3x5y,3x5z,3x60,eqx,eqy,3x63,3x65,22sv,3b1w,3b20,3b23,22tb,res,rez,22tr,3b2s,2cb9,2cba,2cbb,3b2w,es9,esa,3b2z,22u7,3b38,3b3c,3b3f,oa6,oa7,rg4,3b3s,rgb,oan,8lw,3xd0,3xd1,3xd2,3xd3,3xd4,ey1,ey2,3xd7,3xd9,3b90,3b94,3b97,rlw,3b9n,3b9w,2cid,2cie,2cif,3ba0,ezd,eze,3ba3,3bac,3bag,3baj,oha,ohb,rn8,3baw,3baz,8t0,3xk4,3xk5,3xk6,3xk7,3xk8,f55,f56,3xkb,3xkd,8tr,3bg4,3bg8,3bgb,237j,rt0,rt7,237z,3bh0,2cph,2cpi,2cpj,3bh4,1k9l,f6i,3bh7,238f,3bhg,3bhi,3bhj,3bhk,3bhn,ooe,oof,ruc,3bhy,3bhz,3bi0,ruj,oov,904,3xr8,3xr9,3xra,3xrb,3xrc,fc9,fca,3xrf,3xrh,3bn8,2pj,3bnc,2pm,3bnf,s04,3bns,s0b,3bo4,2cwl,2cwm,2cwn,2cwo,fdl,fdm,3bob,3bok,3bor,ovi,ovj,s1g,s1n,3xxk,3xxl,3xxm,3xxn,3xxo,3xxp,3xxq,3xxr,978,979,3xxz,3xy0,3xy1,3xy2,3xy3,3xy4,3xy5,3xy6,3xy7,3xyc,3xyd,3xye,3xyf,3xyg,3xyh,3xyi,3xyj,3xyl,97z,3buc,3buj,23lr,s78,3buz,23m7,3bv8,2d3p,3bva,3bvb,3bvc,3bvd,3bve,3bvf,23mn,3bvo,3bvq,3bvr,3bvs,3bvt,3bvv,p2m,p2n,s8k,3bw6,3bw7,3bw8,3bw9,3bwb,p33,3y48,3y49,3y4a,3y4b,3y4c,3y4d,3y4e,3y4f,3y4n,32g,32h,32i,32j,32k,32l,32m,32n,9ec,9ed,3y52,32v,32w,32x,32y,32z,330,331,332,333,3y5g,3y5h,3y5l,3y5m,3y5n,3y5o,3y5p,3c1g,3c1k,33w,sec,3c1z,3c2c,2dat,3c2e,3c2i,3c2j,3c2s,3c2x,3c2z,p9q,p9r,sfo,3c3c,sfv;1,5,0,e10,e11,e12,e13,e14,e15,e16,e17,e1h,3ac6,3ac7,3ac8,3ac9,e1m,e1y,3acn,3aco,e21,e2f,e2g,e84,3wn9,3wna,3wnb,3aiw,3wnd,3wne,e8b,e8l,e8q,e92,e95,e9j,e9k,ef8,3wud,3wue,3wuf,3aq0,3wuh,3wui,eff,efp,efu,eg6,eg9,egn,ego,emc,3x1h,3x1i,3x1j,3ax4,3x1l,3x1m,emj,emt,emy,ena,end,enr,ens,etg,3x8l,3x8m,3x8n,3b48,3x8p,3x8q,etn,etx,eu2,eue,euh,euv,euw,f0k,3xfp,3bba,3bbb,3bbc,3xft,3xfu,f0r,f11,f16,f1i,f1l,f1z,f20,f7o,3xmt,3xmu,3xmv,3xmw,3xmx,3xmy,f7v,f85,f8a,f8m,f8p,f93,f94,fes,3xtx,3bpi,3bpj,3bpk,3bpl,3xu2,fez,ff9,ffe,ffq,fft,fg7,fg8,flw,3y11,3bwm,3bwn,fm3,fmd,fmi,fmu,fmx,fnb,fnc;1,0,1,2l2,2l3,2l4,2l5,2l6,2li,2lj,2lk,2ll,2lm,2m0,2m1,2mf,2mg,2mh,2mu,2mv,2mw,2mx,2my,2na,2nb,2nc,2s5,2s6,2s7,2s8,2s9,2sa,2sb,2sl,2sm,2sn,2so,2sp,2sq,2sr,2t1,2t2,2t3,2t4,2t5,2t6,2t7,2th,2ti,2tj,2tk,2tl,2tm,2tn,2tx,2ty,2tz,2u0,2u1,2u2,2u3,2ud,2ue,2uf,2ug,2uh,2ui,2uj,2uu,2uw,2ux,2vc,2vd,2z8,2z9,2za,2zb,2zc,2zd,2ze,2zf,2zg,2zo,2zp,2zq,2zr,2zs,2zt,2zu,2zv,2zw,304,305,306,307,308,309,30a,30b,30c,30k,30l,30m,30n,30o,30p,30q,30r,30s,310,311,312,313,314,315,316,317,318,31g,31h,31i,31j,31k,31l,31m,31n,31o,31w,31x,31y,31z,320,321,322,323,324,32d,32e,32f,32g,32h,32i,32j,32w,32x,32y;1,4,1,4awd,3fao,3fap,3faq,3far,1k,1l,1m,1n,1o,1p,1q,1r,3fb7,20,21,22,23,24,25,26,27,bl8y,3fbn,2g,2h,2i,2j,2k,2l,2m,2n,bl9d,3fc3,31,3h,3fcw,3l,3m,3fcz,3x,39r,35w0,3fdd,35w2,35w3,35w4,sk7,sk8,6ft,6fu,4d,4f,peo,pes,skp,skq,skr,sks,4azx,sku,4v,pf4,4x,4y,4z,pf8,pfe,3930,pfi,41j4,5d,csi,csj,41j8,pfu,pfy,pg0,393m,4b0z,pg4,pga,sm3,sm4,pge,pgg,5vxf,pgk,pgq,maz,pgu,41kg,ctu,ctv,41kk,ph6,mbf,pha,3fhs,3fht,3fhu,3fhv,8o,8p,8q,8r,8s,8t,8u,8v,9r29,blfm,3fib,94,95,96,97,98,99,9a,9b,3fir,9k,9l,9m,9n,9o,9p,9q,9r,3fj7,3fk0,3fk1,3fk2,pl9,3634,3635,3636,3637,3638,src,6mx,plp,3hb,41pc,399d,399e,41pg,srt,sru,srv,srw,srx,sry,bz,41ps,c1,c2,c3,41pw,4b7e,pmj,4b7g,pml,4b7i,41q8,czl,czm,czn,41qc,4b7u,pmz,4b7w,pn1,4b7y,41qo,39aq,cz,41qs,4b8a,pnf,4b8c,pnh,4b8e,41r4,4hk2,41r8,4b8q,pnv,4b8s,pnx,4b8u,41rk,d0x,d0y,d0z,41ro,4b96,pob,4b98,pod,4b9a,3fow,3fox,3foy,fs,ft,fu,fv,fw,fx,fy,fz,3fpc,3fpd,3fpe,g8,g9,ga,gb,gc,gd,ge,gf,3fps,3fpt,3fpu,go,gp,gq,gr,gs,gt,gu,gv,3fq8,3fq9,3fqa,h5,h7,hb,369w,36a8,36a9,36aa,36ab,36ac,6u7,psw,3p9d,iq,pt0,6v1r,ptc,5t4h,j6,j7,ptg,41xc,d6p,d6q,d6r,41xg,pu8,k1,k2,k3,puc,puo,kh,ki,kj,pus,41yo,d81,d82,d83,41ys,mx,my,mz,n0,n1,n2,n3,nd,ne,nf,ng,nh,ni,nj,nt,nu,nv,nw,nx,ny,nz,ob,oe,of,3ux,36hc,36hd,36he,36hf,36hg,pl,71b,423k,q01,q03,423o,6v8v,4240,q0h,qa,q0j,4244,424g,424h,424i,424j,424k,424w,q1d,q1e,q1f,4250,425c,q1t,q1u,q1v,425g,425s,425t,425u,425v,425w,u2,u3,u4,u5,u6,u7,uh,ui,uj,uk,ul,um,un,uy,uz,v0,v1,v2,v3,1952,1953,1954,1955,1956,3vyq,195h,195i,195j,195k,195l,195m,78f,ww,3vz9,3vza,dk8,dk9,dka,dkb,dkc,6vfz,xc,xd,xe,xf,3vzp,2b3s,q7t,2b3u,q7v,2b3w,xs,xt,xu,xv,xw,2b48,q89,2b4a,q8b,2b4c,2b4o,2b4p,2b4q,2b4r,2b4s,n34,2b54,q95,2b56,q97,2b58,2b5k,q9l,2b5m,q9n,2b5o,117,118,119,11a,11b,11n,11o,11p,11q,11r,123,124,125,126,127,12k,19bq,19br,19bs,19bt,19bu,3w5h,13a,13b,13c,13d,13e,19cb,3w5u,3w5v,3w5w,13p,13q,13r,13s,13t,13u,dqz,7fi,7fj,142,19d3,drc,drd,dre,drf,drg,6vn2,6vn3,3w6u,qew,qf0,3w79,qfc,qfg,2bbs,1vix,1viz,2bbw,na8,qg8,qgc,qgo,qgs,19ix,19iy,19ja,19jb,19jc,19jd,1ai,19jf,7m8,7m9,3wcz,19jp,19jq,19jr,19js,19jt,1ay,19jv,7mm,7mn,4gw,4gx,3wdh,3wdi,dyg,dyh,dyi,dyj,dyk,6vu6,6vu7,3wdx,2bi0,dyx,dyz,2bi4,2big,2bik,2biw,374p,374q,374r,2bj0,nhc,2bjc,e09,e0b,2bjg,2bjs,2bjw,19q1,1h6,19qh,1hm,3wk3,19qx,1i2,7tq,7tr,3wkg,3wkh,e5k,e5l,e5m,e5n,e5o,6w1a,6w1b,qt4,qt8,qtk,qto,2bq0,1vx5,37bu,1vx7,2bq4,qug,quk,quw,qv0,19x5,1oa,19xl,1oq,3wr7,19y1,1p6,80u,80v,3wrk,3wrl,3wrm,1pf,eco,ecp,ecq,ecr,ecs,6w8e,6w8f,1pu,1pw,2bw8,r09,r0b,2bwc,2bwo,r0p,r0r,2bws,2bx4,2bx5,2bx6,2bx7,2bx8,2bxk,r1l,2bxm,r1n,2bxo,2by0,r21,2by2,r23,2by4,1a49,1ve,1a4p,1vu,3wyb,1a56,87y,87z,3wyq,1wj,3wyy,6wfi,6wfj,1wz,1x2,o2o,1abd,22i,1abt,22y,3x5f,1aca,8f1,8f2,8f3,3x5u,23n,9z8k,3x5x,3x5y,3x5z,3x60,3x61,3x62,dxgr,84vg,84vh,84vi,84vj,242,248,24a,o9s,1aih,29m,1aix,2a2,1aje,8m5,8m6,8m7,3xcy,3xcz,3xd0,3xd1,3xd5,6wtp,6wtq,6wtr,2bk,2bl,2bm,2bn,2c0,2c1,2c2,ogw,1apl,2gq,1aq1,2h6,1aqi,8t8,8t9,8ta,3xk3,3xk9,6x0s,6x0t,6x0u,2if,2io,2ip,2iq,2ir,2j4,2j5,2j6,2j7,2jl,2k1,1awa,1awp,2nu,1ax5,2oa,907,908,909,1axm,90b,90c,90d,lnl,lnm,lnn,lno,lnp,3bmv,fc8,fc9,fca,3bmz,6x7w,6x7x,3l4h,rzm,rzo,3l4l,rzr,rzs,rzu,rzv,3l4x,s02,2pv,s04,3l51,s07,s08,s0a,s0b,3l5d,s0i,3l5f,s0k,3l5h,s0n,s0o,s0p,s0q,s0r,3l5t,3l5u,3l5v,3l5w,3l5x,3l69,s1e,s1f,s1g,3l6d,1b3e,1b3t,2uy,1b49,2ve,3xxs,97b,97c,97d,1b4q,97f,97g,lup,luq,lur,lus,3lb9,3btz,fjc,fjd,fje,3bu3,6xf0,3lbl,3i5u,2wj,3lbp,3buf,s6z,s75,5via,2wz,s79,s7b,s7f,s7l,2xe,2xf,s7p,s7r,s7s,s7t,s7u,s7v,p28,3lcx,lwi,lwj,lwk,3ld1,s8h,1nua,3oj7,1nuc,s8l,1bai,31s,31t,31u,31v,31w,31x,1bax,322,328,329,32a,32b,32c,32d,1bbd,32i,32o,3y4x,9ef,9eg,9eh,1bbu,9ej,m1t,m1u,m1v,m1w,m1x,3c13,fqg,fqh,fqi,3c17,3lip,vjo,3lit,3c1j,se3,se9,342,343,sed,sef,sej,sep,34i,34j,set,sev,sex,sey,sez,p9c,3lk1,m3m,m3n,m3o,3lk5,sfb,sfc,sfd,sfe,sfl,3ies,sfp,sfr,sfs,sft,sfu;1,5,1,pa8,38xu,3f9f,pac,pai,sgb,sgc,pam,pao,5yxf,pas,pay,pb2,41eo,co2,co3,41es,pbe,pbi,pbk,3v3m,4awj,pbo,pbu,shn,sho,pby,pc0,624j,pc4,pca,pce,41g0,cpe,cpf,41g4,pcq,pcu,pcw,pd0,pd6,siz,sj0,pda,pdc,pdg,pdm,fwb,pdq,41hc,cqq,cqr,41hg,pe2,4ayz,pe6,pe8,pec,pei,skb,skc,pem,peo,pes,fxm,fxq,3v74,3v76,3v77,3v78,41kw,41l0,4b2i,phn,4b2k,php,4b2m,41lc,41lg,4b2y,pi3,4b30,pi5,4b32,41ls,cv5,cv6,cv7,41lw,4b3e,pij,4b3g,pil,4b3i,41m8,41mc,4b3u,piz,4b3w,pj1,4b3y,41mo,41ms,4b4a,pjf,4b4c,pjh,4b4e,41n4,cwh,cwi,cwj,41n8,4b4q,pjv,4b4s,pjx,4b4u,41nk,397l,397m,41no,4b56,pkb,4b58,pkd,4b5a,41o0,41o4,4b5m,pkr,4b5o,pkt,4b5q,41og,cxt,cxu,cxv,41ok,4b62,pl7,4b64,pl9,4b66,41ow,398x,398y,41p0,4b6i,pln,4b6k,plp,4b6m,pls,plw,g4q,g4r,g4s,g4t,g4u,3ve8,3ve9,3vea,3veb,3vec,39aa,39aq,39b6,39bm,pog,4hkz,pok,pow,4hlf,pp0,41sw,d29,d2a,d2b,41t0,pps,mk1,mk2,mk3,ppw,pq8,mkh,mki,mkj,pqc,41u8,d3l,d3m,d3n,41uc,pr4,3fq9,pr8,prk,5w8h,pro,41vk,d4x,d4y,d4z,41vo,psg,3frl,psk,psw,5t41,pt0,3vlc,3vld,3vle,3vlf,3vlg,41z4,pvl,pvm,pvn,41z8,41zk,pw1,pw2,pw3,41zo,4200,4201,4202,4203,4204,420g,pwx,pwy,pwz,420k,420w,pxd,pxe,pxf,4210,421c,421d,421e,421f,421g,421s,py9,pya,pyb,421w,4228,pyp,pyq,pyr,422c,422o,422p,422q,422r,422s,4234,pzl,pzm,pzn,4238,q00,q01,q02,q03,q04,3vsg,3vsh,3vsi,3vsj,3vsk,2ayw,2ayx,2ayy,2ayz,2az0,2azc,q3d,2aze,q3f,2azg,2azs,q3t,2azu,q3v,2azw,2b08,2b09,2b0a,2b0b,2b0c,2b0o,q4p,2b0q,q4r,2b0s,2b14,q55,q56,q57,2b18,2b1k,2b1l,2b1m,2b1n,2b1o,3vy0,3vy1,3vy2,3vy3,3vy4,2b60,36rt,36rv,2b64,qag,n4p,n4r,qak,qaw,n55,n57,qb0,2b7c,36t5,36t7,2b7g,qbs,qbw,qc8,qcc,2b8o,2b8s,3w54,3w55,3w57,3w58,2bd4,36yx,36yy,36yz,2bd8,2bdk,duj,2bdo,2be0,2be4,2beg,3709,370a,370b,2bek,2bew,dvt,dvu,2bf0,qjc,qjg,2bfs,c5ex,c5ey,c5ez,2bfw,3wc8,3wc9,3wca,3wcb,3wcc,3a8a,3a8q,3a96,3a9m,3aa2,3aai,1vqi,3abe,2bk8,3761,3762,3763,2bkc,qoo,4il5,qos,qp4,4ill,qp8,2blk,377d,377e,377f,2blo,qq0,qq4,qqg,qqk,2bmw,2bn0,3wjc,3wjd,3wje,3wjf,3wjg,2brc,2brd,2bre,2brf,2brg,2brs,qvt,2bru,qvv,2brw,2bs8,qw9,2bsa,qwb,2bsc,2bso,2bsp,2bsq,2bsr,2bss,2bt4,qx5,2bt6,qx7,2bt8,2btk,qxl,qxm,qxn,2bto,2bu0,2bu1,2bu2,2bu3,2bu4,3wqg,3wqh,3wqi,3wqj,3wqk,3kzl,ruq,rur,rus,3kzp,3l01,3l02,3l03,3l04,3l05,3xnl,3xnm,3xnn,3xno,3xnp,s1t,14oy,5vcz,17us,s1x,3l75,3l79,3xup,3xut,3xv6,3xv7,3xv8,oym,oyn,oz3,s8x,5ypw,s91,3bwn,3bwo,3bwp,3bwq,3le9,3led,s9j,s9k,s9l,s9m,3y1t,3y1x,s9z,sa0,sa1,sa2,3y2a,3y2c,3bxz,3by0,3by1,3by2,3y2r,sav,saw,sax,say,1nwz,sbb,sbc,sbd,sbe,p5q,p5r,1nxf,3bzb,3bzc,3bzd,3bze,p67,1nxv,sc7,sc8,sc9,sca,scn,sco,scp,scq,772v,fjbs,fjbt,772y;1,6,1,394y,395e,1ule,396a;1,4,2,8,o,3rxj,3rxk,38yx,3rxm,3rxn,18,1c,1d,1e,4e2e,1j,1k,1l,1m,1n,4e2k,1s,1t,1u,1hs6,1z,20,21,22,23,1hsc,28,29,2a,4e3a,2f,2g,2h,2i,2j,4e3g,4e3q,c12f,c12g,astl,c12i,c12j,4e3w,6et,6eu,395,396,397,398,39c,3v5v,3v5w,3v5x,39i,40,82w0,7c,7s,3s4n,3s4o,3961,3s4q,3s4r,8c,8g,8h,8i,4e9i,8n,8o,8p,8q,8r,4e9o,8w,8x,8y,1hza,93,94,95,96,97,1hzg,9c,9d,9e,4eae,9j,9k,9l,9m,9n,4eak,4eau,c19j,c19k,at0p,c19m,c19n,4eb0,6lx,6ly,6lz,3g9,3ga,3gb,3gc,3vcz,3vd0,3gl,3gm,3gn,6mo,8334,3ve4,ew,3sbr,3sbs,39d5,3sbu,3sbv,fg,fk,fl,fm,4egm,fr,fs,ft,fu,fv,4egs,g0,g1,g2,1i6e,g7,g8,g9,ga,gb,1i6k,gg,gh,gi,4ehi,gn,go,gp,gq,gr,4eho,3vj3,4ehy,c1gn,c1go,at7t,c1gq,c1gr,4ei4,hb,6t1,6t2,6t3,6t4,3ne,3nf,3ng,3vk2,3vk3,3np,3nq,3nr,3ns,6ts,83a8,m0,3siv,3siw,39k9,3siy,3siz,mk,mo,mp,4enq,mv,mw,mx,my,mz,4enw,n4,n5,1idi,nb,nc,nd,ne,nf,1ido,nk,nl,4eom,nr,ns,nt,nu,nv,4eos,3vq7,4ep2,c1nr,c1ns,atex,c1nu,c1nv,4ep8,of,705,706,707,708,709,3ui,3uj,3uk,3vr6,3ut,3uu,3uv,3uw,3ux,70w,pf,83hc,t4,3spz,3sq0,39rd,3sq2,3sq3,to,ts,4euu,tz,u0,u1,u2,u3,4ev0,u8,1ikm,uf,ug,uh,ui,uj,1iks,3vwu,3vwv,uo,4evq,uv,uw,ux,uy,uz,4evw,3vxa,3vxb,4ew6,c1uv,c1uw,atm1,c1uy,c1uz,4ewc,3vxq,vj,779,77a,77b,77c,77d,77e,41n,41o,3vya,41x,41y,41z,420,421,422,780,wk,83og,108,3sx3,3sx4,3sx5,3sx6,3sx7,10s,4f1y,113,114,115,116,117,4f24,3w3i,1flr,1irq,11j,11k,11l,11m,11n,1irw,3w3x,11q,11r,4f2u,11z,120,121,122,123,4f30,3w4d,126,127,4f3a,c21z,c220,att5,c222,c223,4f3g,3w4t,12m,1fn3,7ed,7ee,7ef,7eg,7eh,7ei,7ej,7ek,7el,3w5a,7en,3w5d,3w5e,491,492,493,494,495,496,497,498,499,49a,49b,7f4,83vk,17c,3t47,3t48,3t49,3t4a,3t4b,17w,4f92,187,188,189,18a,18b,4f98,1fsv,1iyu,18n,18o,18p,18q,18r,1iz0,3wb1,fu4u,18v,4f9y,193,194,195,196,197,4fa4,3wbh,19a,19b,4fae,c293,c294,au09,c296,c297,4fak,3wbx,19q,1fu7,7lh,7li,7lj,7lk,7ll,7lm,7ln,7lo,3wcd,1a6,3wcf,3wch,4g5,4g6,4g7,4g8,4g9,3wcq,4gb,4gc,4gd,qku,3wcv,7m8,842o,1eg,3tbb,3tbc,3tbd,3tbe,3tbf,1f0,4fg6,1fb,1fc,1fd,1fe,1ff,4fgc,1fzz,1j5y,1fr,1fs,1ft,1fu,1fv,1j64,3wi6,1fz,4fh2,1g7,1g8,1g9,1ga,1gb,4fh8,3wil,fbdq,1gf,4fhi,c2g7,c2g8,au7d,c2ga,c2gb,4fho,3wj1,1gu,1g1b,7sl,7sm,7sn,7so,7sp,7sq,7sr,7ss,3wjh,1ha,3wjj,3wjl,4n9,4na,4nb,4nc,4nd,3wju,7t7,5hfw,5hfx,3wjz,7tc,1g2j,qsc,qsd,qse,1g2n,849s,1g2z,qss,qst,qsu,1g33,1g3f,qt8,qt9,qta,1g3j,3gsr,3gss,3gst,3gsu,3gsv,5hi4,5hi6,5hik,5hil,5him,5hj0,5hj2,1lk,3tif,3tig,3tih,3tii,3tij,1m4,4fna,1mf,1mg,1mh,1mi,1mj,4fng,1g73,1jd2,1mv,1mw,1mx,1my,1mz,1jd8,1g7j,4fo6,1nb,1nc,1nd,1ne,1nf,4foc,1g7z,4fom,c2nb,c2nc,aueh,c2ne,c2nf,4fos,3wq5,fbla,1g8f,7zs,7zt,7zu,7zv,7zw,3wql,1oe,3wqn,3wqp,3wqq,3wqr,3wqs,3wqt,3wqu,3wqv,3wqw,3wqx,3wqy,5hmz,5hn0,5hn1,5hn3,80g,1p3,qzf,1swt,qzj,84gw,qzv,qzz,r0b,r0f,3gzv,3gzz,5hp7,3h0c,3h0d,3h0e,5hpb,5hpn,5hpr,5hq3,5hq7,1so,3tpj,3tpk,3tpl,3tpm,3tpn,1t8,4fue,1tj,1tk,1tl,1tm,1tn,4fuk,1ge7,1jk6,1tz,1u0,1u1,1u2,1u3,1jkc,1gem,1gen,4fva,1uf,1ug,1uh,1ui,1uj,4fvg,1gf1,1gf2,1gf3,4fvq,c2uf,c2ug,aull,c2ui,c2uj,4fvw,1gfh,1gfi,1gfj,86y,86z,1gfw,1gfx,fbsu,3wxr,3wxt,25qa,25qb,25qc,25qd,25qe,25qf,25qg,25qh,3wy2,5hu3,5hu4,5hu5,5hu7,87k,ej6,r6b,r6c,r6d,eja,r6f,ejc,ejd,5eot,r6n,84o0,ejm,r6r,r6s,r6t,ejq,r6v,ejs,ejt,r73,ek2,r77,r78,r79,ek6,r7b,ek8,ek9,r7f,r7j,eki,r7n,r7o,r7p,ekm,hqf,hqg,hqh,3h6z,3h73,eky,r83,r84,r85,el2,hqv,hqw,3h7g,3h7i,ele,elf,elg,elh,eli,hrb,5hwr,3h7x,5hwv,hrm,hrn,hro,hrp,hrq,1zs,3twn,3two,3ay1,3twq,3twr,20c,4g1i,20n,20o,20p,20q,20r,4g1o,enz,1jra,213,214,215,216,217,1jrg,d1se,21b,4g2e,21j,21k,21l,21m,21n,4g2k,e6vx,21q,21r,4g2u,c31j,c31k,ausp,c31m,c31n,e6wc,225,226,227,1gmz,22k,22l,22m,1gn3,3x4x,25xe,25xf,25xg,25xh,25xi,25xj,25xk,25xl,3x56,5i17,230,231,5i1a,5i1b,8eo,rde,239,rdl,rdn,5evw,1tb1,4g4e,rdr,84v4,rdu,re1,re3,610u,re7,er6,reh,rej,ren,req,hxl,3he3,3he7,rf6,hy0,5i3f,3hek,3hem,5i3j,esi,esm,hyf,5i3v,3hf1,5i3z,hyq,hyu,5i4b,5i4f,26w,3u3r,3u3s,3b55,3u3u,3u3v,27g,4g8m,27r,27s,27t,27u,27v,4g8s,1gsf,1jye,287,288,289,28a,28b,1jyk,1gsu,1gsv,4g9i,28n,28o,28p,28q,28r,4g9o,1gta,1gtb,4g9y,c38n,c38o,auzt,c38q,c38r,4ga4,1gtq,1gtr,1gu3,29o,a8vx,1gu6,1gu7,8lc,3xc1,264i,264j,264k,264l,264m,264n,264o,264p,3xca,5i8b,2a4,2a5,a8we,5i8f,3xcg,exe,2ac,exl,rkr,rkv,exu,2at,2au,2av,2aw,ey1,rl7,rlb,eya,2ba,2bb,2bc,eyh,rln,rlr,eyq,i4p,3hl7,3hlb,ez6,i54,3hlo,3hlp,3hlq,ezm,ezq,i5j,i5u,i5y,2e0,3uav,3uaw,3bc9,3uay,3uaz,2ek,4gfq,2ev,2ew,2ex,2ey,2ez,4gfw,1gzj,1k5i,2fb,2fc,2fd,2fe,2ff,1k5o,1gzz,4ggm,2fr,2fs,2ft,2fu,2fv,4ggs,1h0f,4gh2,c3fr,c3fs,av6x,c3fu,c3fv,4gh8,1h0v,8s4,8s5,1h18,1h19,8sg,3xj5,26bm,26bn,26bo,26bp,26bq,26br,26bs,26bt,3xje,8sr,5ifg,5ifh,5ifi,8sv,3xjk,rrm,2hj,rrt,1h23,rrw,rrx,rry,1h27,rs2,2hx,2hy,2hz,2i0,rs9,1h2j,rsc,rsd,rse,1h2n,f5e,2id,2ie,2if,2ig,rsp,1h2z,rss,rst,rsu,1h33,rsy,2iu,2iv,ibt,3hsb,3hsc,3hsd,3hse,3hsf,rte,2jb,ic8,5iho,5ihq,f6q,f6u,icn,5ii4,5ii5,5ii6,icy,id2,5iik,5iim,2l4,3uhz,3ui0,3bjd,3ui2,3ui3,2lo,4gmu,2lz,2m0,2m1,2m2,2m3,4gn0,1h6n,1kcm,2mf,2mg,2mh,2mi,2mj,1kcs,1h73,4gnq,2mv,2mw,2mx,2my,2mz,4gnw,1h7j,4go6,c3mv,c3mw,ave1,c3my,c3mz,4goc,1h7z,8z7,8z8,8z9,8za,3xq8,3xq9,26iq,26ir,26is,26it,26iu,26iv,26iw,26ix,3xqi,3xqj,3xqk,3xql,3xqm,3xqn,hw9c,2oh,fbm,ryr,ryt,fbq,ryv,fbs,fbt,2or,2ou,2ov,fc2,rz7,rz9,fc6,rzb,fc8,fc9,fci,fcj,fck,fcl,fcm,rzr,fco,fcp,fcy,s03,iis,s05,fd2,iiv,iiw,iix,fde,s0j,ij8,s0l,fdi,ijb,ijc,fdu,fdv,fdw,fdx,fdy,ijr,ik2,ik3,ik4,ik5,ik6,2s8,3up3,3up4,3bqh,3up6,3up7,2ss,4gty,2t3,2t4,2t5,2t6,2t7,4gu4,1hdr,1kjq,2tj,2tk,2tl,2tm,2tn,1kjw,1he7,4guu,2tz,2u0,2u1,2u2,2u3,4gv0,1hen,4gva,c3tz,c3u0,avl5,c3u2,c3u3,4gvg,1hf3,96a,96b,96c,96d,96e,96f,2v3,3xxc,3xxd,3xxe,3xxf,3xxg,3xxh,3xxi,3xxj,3xxk,3xxl,3xxm,2w5,2w6,2w7,2w8,2w9,2wl,2wm,2wn,2wo,2wp,2x3,2x4,2zc,2zh,4h0m,3uw7,3uw8,3uw9,3uwa,3uwb,2zw,4h12,307,308,309,30a,30b,4h18,1hkv,1kqu,30n,30o,30p,30q,30r,1kr0,1hlb,4h1y,313,314,315,316,317,4h24,1hlr,4h2e,c413,c414,avs9,c416,c417,4h2k,1hm7,9dd,9de,9df,9dg,9dh,9di,3y4g,3y4h,3y4i,3y4j,3y4k,685,686,5cp3,5cp4,5cp5,33a,33b,33c,33d,33p,33q,33r,33s;1,5,2,5hcc,5hcd,5hce,5hjf,5hjj,5hqj,5hqn,hs3,hs4,hs5,5hxn,5hxr,hz7,hz9,hzo,i6b,i6c,i6d,5ibw,5ibx,5iby,oy8,oy9,oyd,oye,oyo,oyp,oyq,oyr,oys,oyt,p5c,p5d,p5i,p5s,p5t,p5u,p5v,p5w,p5x,p68,p69,p6a,p6b,p6c;1,3,3,cu3;1,4,3,cnf,f9xo,cnh,cnv,s,cnx,cob,18,cod,cor,1o,cot,cp8,cuz,fa58,cv1,cvf,8c,cvh,cvv,8s,cvx,cwb,98,cwd,cws,d2j,facs,d2l,d2z,fw,d31,d3d,d3e,d3f,gc,d3h,d3t,d3u,d3v,gs,d3x,da0,da1,da2,da3,fakc,da5,dag,nd,ne,nf,ng,dal,daw,nt,nu,nv,nw,db1,dbd,dbe,dbf,dbg,dh5,dhk,uh,dhm,dhn,dho,di0,ux,di2,di3,di4,dih,1flc,1fld,1fle,1flf,1flg,1flh,1fli,1flj,do8,do9,1fls,1flt,1flu,1flv,1flw,1flx,1fly,1flz,doo,11l,doq,1fm8,1fm9,1fma,1fmb,1fmc,1fmd,1fme,1fmf,dp4,121,dp6,1fmo,1fmp,1fmq,1fmr,1fms,1fmt,1fmu,1fmv,dpl,7e8,7e9,7ea,48w,48x,48y,dv4,dv5,dv6,dv7,dv8,dv9,dva,1fsn,dvc,dvd,h1c,h1d,h1e,h1f,h1g,h1h,h1i,18n,18o,18p,dvu,3a6m,4f9r,8zm8,8zm9,8zma,8zmb,8zmc,8zmd,8zme,193,194,195,dwa,3a71,3a72,4fa7,19c,19d,19e,19f,19g,19h,19i,1ftz,dwp,5h80,5h81,5h82,5h83,5h84,5h85,5h86,4g0,4g1,4h6,1bu,e28,e29,e2a,e2b,e2c,e2d,e2e,1fzr,e2m,e2n,1fk,1fl,1fm,1fn,1fo,anut,1fq,1fr,e2w,e2x,3adp,4fgu,1fz,1g0,1g1,1g2,1g3,1g4,8zth,1g6,1g7,e3c,e3d,3ae4,66ot,qqm,1gf,1gg,1gh,1gi,1gj,1gk,1gl,1gm,1g13,3ael,4fhq,4fhr,5hf4,5hf5,5hf6,5hf7,5hf8,5hf9,5hfa,4n4,4o8,4o9,4oa,4ob,4oc,1iw,1ix,1iy,1iz,1j0,e9c,e9d,e9e,e9f,e9g,e9h,e9i,1g6v,e9q,e9r,1mo,1mp,1mq,1mr,1ms,ao1x,1mu,1g7b,3akt,3aku,1n3,1n4,1n5,1n6,1n7,1n8,900l,1na,1g7r,3al8,6a1p,qxq,1nj,1nk,1nl,1nm,1nn,1no,1np,1nq,1g87,3alp,4fou,4fov,5hm8,5hm9,5hma,5hmb,5hmc,5hmd,5hme,4vb,4vc,4yp5,4yp6,4yp7,4yp8,4yp9,1pz,1q0,3tmh,2uuy,3tmj,2uv0,3tml,3tmx,r0q,3tmz,r0s,3tn1,3tnd,4yqi,3tnf,4yqk,3tnh,2uw9,r1m,2uwb,r1o,2uwd,2uwp,r22,2uwr,r24,2uwt,egg,egh,egi,egj,egk,egl,egm,1gdz,egu,egv,epmo,ao8x,ao8y,1tv,1tw,ao91,1ty,1gef,3arx,4fv2,1u7,907k,907l,907m,1ub,1uc,907p,1ue,1gev,3asc,6a8t,r4u,1un,1uo,1up,1uq,1ur,1us,1ut,1uu,1gfb,3ast,4fvy,4fvz,5htc,5htd,5hte,5htf,5htg,5hth,5hti,52f,52g,4yw9,4ywa,4ywb,4ywc,4ywd,1x3,1x4,2v21,1x6,1x7,1x8,2v25,r7t,1xo,r7x,4yxl,4yxm,4yxn,4yxo,4yxp,r8p,r8t,r95,r99,enk,enl,enm,enn,eno,enp,enq,1gl3,eny,enz,20w,20x,aog2,20z,210,htx,212,1glj,1glk,3az1,3az2,21b,21c,21d,90eq,21f,21g,90et,21i,1glz,1gm0,3aze,3azg,6jx9,rby,21r,21s,21t,21u,21v,21w,21x,21y,1gmf,3azx,4g32,4g33,5i0g,5i0h,5i0i,5i0j,5i0k,5i0l,5i0m,59i,59j,59k,4z3d,4z3e,4z3f,4z3g,4z3h,246,247,248,3u0p,24a,24b,24c,3u0t,3u15,24r,3u19,3u1l,4z4q,4z4r,3u1p,2vah,2val,2vax,2vb1,euo,eup,euq,eur,eus,eut,euu,1gs7,ev2,ev3,280,281,aon6,283,284,285,286,1gsn,4g94,6n9m,3b65,4g9a,28f,28g,28h,90lu,28j,28k,28l,28m,1gt3,6na0,3b6h,6na2,3b6j,3b6k,6k4d,rj2,28v,28w,28x,28y,28z,290,291,292,1gtj,1gtk,3b71,4ga6,4ga7,5i7k,5i7l,5i7m,5i7n,5i7o,5i7p,5i7q,2a8,5gm,5gn,5go,4zah,4zai,4zaj,4zak,4zal,2ba,2bb,2bc,2vg9,2be,2bf,2bg,2vgd,rm1,rm5,4zbt,4zbu,4zbv,4zbw,4zbx,rmx,rn1,rnd,rnh,f1s,f1t,f1u,f1v,f1w,f1x,f1y,1gzb,f26,f27,2f4,2f5,aoua,aoub,aouc,aoud,cj7q,1gzr,4gg8,4gg9,4gga,4ggb,3bd9,3bda,2fj,2fk,2fl,90sy,90sz,90t0,90t1,90t2,4ggn,rq0,3bdl,rq2,3bdn,3bdo,67od,rq6,2fz,2g0,2g1,2g2,2g3,2g4,2g5,2g6,1h0n,1h0o,4gh6,4gh7,3be5,4gha,4ghb,5ieo,5iep,5ieq,5ier,5ies,5iet,5ieu,5nq,5nr,5ns,4zhl,4zhm,4zhn,4zho,4zhp,2ie,2if,2ig,3uex,rsq,2ij,rss,3uf1,3ufd,rt6,rt8,3ufh,3uft,4ziy,4ziz,4zj0,3ufx,2vop,ru2,ru3,ru4,2vot,2vp5,rui,ruj,ruk,2vp9,f8w,f8x,f8y,f8z,f90,f91,f92,f93,f94,f95,f96,f97,f9a,f9b,2m8,2m9,2ma,2mb,2mc,2md,2me,2mf,2mg,2mh,2mi,2mj,4gng,4gnh,2mm,2mn,2mo,2mp,2mq,2mr,2ms,2mt,2mu,2mv,2mw,2mx,2my,2mz,3bks,4gnx,2n2,2n3,2n4,2n5,2n6,2n7,2n8,2n9,2na,1h7r,4go8,4go9,4goa,4gob,4goe,4gof,5ils,5ilt,5ilu,5ilv,5ilw,5ilx,5ily,3xq8,2og,9ztd,902,9ztu,3xr7,3xr8,3xr9,3xra,3xrb,3xrc,3xrd,3xre,3xrf,3xrg,3xrh,3xri,3xrj,2ph,2pi,2pj,2pk,2pl,2pm,2pn,2po,2pq,2q2,fg0,fg1,fg2,fg3,fg4,fg5,fg6,fg7,fg8,fg9,fga,fgb,fge,fgf,2tc,2td,2te,2tf,2tg,2th,2ti,2tj,2tk,2tl,2tm,2tn,4guk,4gul,2tq,2tr,2ts,2tt,2tu,2tv,2tw,2tx,2ty,2tz,2u0,2u1,2u2,2u3,etss,cmsd,2u6,2u7,2u8,2u9,2ua,2ub,2uc,2ud,2ue,1hev,4gvc,4gvd,4gve,4gvf,3bsc,3bsd,4gvi,4gvj,5isw,5isx,5isy,5isz,5it0,5it1,5it2,1hkg,1hkh,1hki,1hkj,1hkk,1hkl,1hkm,1hkn,fne,fnf,fni,fnj,1hkw,1hkx,1hky,1hkz,1hl0,1hl1,1hl2,1hl3,4h1k,4h1l,30q,30r,4h1o,4h1p,30u,30v,1hlc,1hld,1hle,1hlf,1hlg,1hlh,1hli,4h1z,sbc,4h21,316,317,4h24,4h25,31a,31b,1hls,1hlt,1hlu,1hlv,1hlw,1hlx,1hly,1hlz,4h2g,4h2i,4h2j,4h2m,4h2n,5j05,5j06;1,5,3,2uq1,4ykq,2uq3,4yks,2uq5,2uqh,qvu,2uqj,qvw,2uql,2uqx,qwa,2uqz,qwc,2ur1,2urd,4ym2,2urf,4ym4,2urh,2urt,qx6,2urv,qx8,2urx,2us9,qxm,2usb,qxo,2usd,2usp,4yne,2usr,4yng,2ust,4ynt,4ynv,4ynx,4yrt,4yru,4yrv,4yrw,4yrx,r2x,r31,r3d,r3h,4yt5,4yt6,4yt7,4yt8,4yt9,r49,r4d,r4p,r4t,4yuh,4yui,4yuj,4yuk,4yul,2v49,4yyy,4yyz,2v4d,2v4p,2v4t,2v55,2v59,2v5l,4z0a,4z0b,2v5p,2v61,2v65,2v6h,2v6l,2v6x,4z1m,4z1n,2v71,4z21,4z25,4z61,4z62,4z63,4z64,4z65,rh5,rh9,rhl,rhp,4z7d,4z7e,4z7f,4z7g,4z7h,rih,ril,rix,rj1,4z8p,4z8q,4z8r,4z8s,4z8t,2vih,4zd6,4zd7,4zd8,2vil,2vix,roa,rob,roc,2vj1,2vjd,roq,ror,ros,2vjh,2vjt,4zei,4zej,4zek,2vjx,2vk9,rpm,rpn,rpo,2vkd,2vkp,rq2,rq3,rq4,2vkt,2vl5,4zfu,4zfv,4zfw,2vl9,4zg9,4zgb,4zgd;1,0,4,f0,f1,f2,f3,fg,fh,fi,fj,m3,m4,m7,mj,mk,mn,1f8d,od,ot,t7,1fdp,ta,q3j,tn,tp,tq,q3z,u5,u6,q4f,ul,1ff2,q4v,1ffh,v2,q5b,vh,vi,q5r,vx,vy,q67,wd,1fgu,q6n,1fh9,wu,q73,x9,xa,q7j,xp,xq,q7z,y5,1fim,q8f,1fj1,ym,q8v,z1,z2,q9b,zh,zi,q9r,10b,1fkt,10e,10f,10r,1fl9,10u,qb3,119,1flq,qbj,11p,11q,qbz,125,126,qcf,1fn1,12m,qcv,131,1fni,qdb,13h,13i,qdr,13x,13y,qe7,1fot,14e,qen,14t,1fpa,qf3,159,15a,qfj,15p,15q,qfz,1fql,166,qgf,16l,1fr2,qgv,17f,17g,4f8d,17i,4f8f,17v,17w,4f8t,17y,4f8v,18e,1bh,1bx,1ek,4ffh,1em,1en,1f0,4ffx,1f2,1f3,1lo,4fml,1lq,1lr,1m4,4fn1,1m6,1m7,1ss,4ftp,1su,1sv,1t8,4fu5,1ta,1tb,1zw,4g0t,1zy,1zz,20c,4g19,20e,20f,270,4g7x,272,273,27g,4g8d,27i,27j,2e4,4gf1,2e6,2e7,2ek,4gfh,2em,2en,2l8,4gm5,2la,2lb,2lo,4gml,2lq,2lr,2sc,4gt9,2se,2sf,2ss,4gtp,2su,2sv,2zg,4h0d,2zi,2zj,2zw,4h0t,2zy,2zz;1,1,4,33,3j,a7,an,hb,hr,of,ov,q1r,q27,st,1fda,q33,1fdp,ta,q3j,tp,tq,q3z,u5,u6,q4f,ul,1ff2,q4v,1ffh,v2,q5b,vh,vi,vj,vx,vy,vz,wd,1fgu,wf,1fh9,wu,q73,x9,xa,q7j,xp,xq,q7z,y5,1fim,q8f,1fj1,ym,q8v,z1,z2,q9b,zh,zi,q9r,zx,zy,qa7,10d,10e,qan,1fl9,10u,qb3,119,1flq,qbj,11p,11q,qbz,125,126,qcf,1fn1,12m,12n,131,1fni,133,13h,13i,qdr,13x,13y,qe7,1fot,14e,qen,14t,1fpa,qf3,159,15a,qfj,15p,15q,qfz,1fql,166,qgf,16l,1fr2,qgv,19r,1a7,1gv,1hb;1,2,4,st,1fda,q33,1fdp,ta,q3j,tp,tq,q3z,u5,u6,q4f,ul,1ff2,q4v,1ffh,v2,q5b,vh,vi,q5r,vx,vy,q67,wd,1fgu,q6n,1fh9,wu,q73,x9,xa,q7j,xp,xq,q7z,y5,1fim,q8f,1fj1,ym,q8v,z1,z2,q9b,zh,zi,q9r,zx,zy,qa7,10d,10e,qan,1fl9,10u,qb3,119,1flq,qbj,11p,11q,11r,125,126,qcf,1fn1,12m,qcv,131,1fni,qdb,13h,13i,qdr,13x,13y,qe7,1fot,14e,qen,14t,1fpa,qf3,159,15a,qfj,15p,15q,qfz,1fql,166,qgf,16l,1fr2,qgv;1,3,4,39bv,39bw,39bx,39by,39bz,d7v,d7w,d7x,d7y,d7z,39ix,39iy,l7,l8,l9,la,lb,dez,df0,39q1,39q2,sb,sc,q2l,q2m,q2n,st,1fda,q33,1fdp,ta,q3j,tp,tq,q3z,u5,u6,q4f,ul,1ff2,q4v,1ffh,v2,q5b,vh,vi,q5r,vx,vy,q67,wd,1fgu,q6n,1fh9,wu,q73,x9,xa,q7j,xp,xq,q7z,y5,1fim,q8f,1fj1,ym,q8v,dm3,z1,z2,q9b,39x5,39x6,zf,q9o,zh,zi,q9r,zx,zy,qa7,10d,10e,qan,1fl9,10u,qb3,119,1flq,qbj,11p,11q,qbz,125,126,qcf,1fn1,12m,qcv,131,1fni,qdb,13h,13i,qdr,13x,13y,qe7,1fot,14e,qen,14t,1fpa,qf3,159,15a,qfj,15p,15q,qfz,dt7,1fql,166,qgf,3a45,3a46,3a47,3a48,3a49,3a4a,16j,qgs,16l,1fr2,qgv,e06,e07,e08,e09,e0a,e0b,e0c,d14l,1di,1dj,1dk,1dl,1dm,1dn,1do,qnx,qny,qnz,e7a,e7b,e7c,e7d,e7e,e7f,e7g,e7h,e7i,e7j,d1bp,1km,1kn,1ko,1kp,1kq,1kr,1ks,1kt,1ku,1kv,3aph,3api,3apj,3apk,3apl,3apm,3apn,3apo,3app,3apq,3apr;1,4,4,38m,38n,38o,38p,38q,391,3a,3b,3c,3d,3e,397,39g,3p,3q,3r,3s,3t,3u,3v,59qn,44,45,46,3955,3956,3957,3958,3959,395a,395b,3fq,3fr,3fs,3ft,3g5,ae,af,ag,ah,3ga,6m5,6m6,6m7,3gk,at,au,av,aw,ax,ay,3gt,3gu,3gv,b8,b9,ba,bb,39c8,6ia1,poq,ej,ek,el,em,en,4efv,4efw,4efx,4efy,4efz,3mu,3mv,3mw,3mx,3n9,hi,hj,hk,hl,6t8,6t9,6ta,6tb,3no,hx,hy,hz,i0,i1,6tn,6to,6tp,6tq,6tr,ic,id,ie,if,3ob,3oc,3od,3oe,3of,39jc,6ih5,pvu,ln,lo,pvx,pvy,pvz,4emz,4en0,d9r,da7,dal,dan,db2,db3,3ty,3tz,3u0,3u1,dbh,dbi,dbj,3ud,om,on,oo,op,dbw,dbx,dby,dbz,3us,p1,p2,p3,p4,p5,70r,dcc,dcd,dce,dcf,pg,ph,pi,pj,3vf,dcs,dct,dcu,dcv,3vw,3vx,3vy,3vz,39qg,6io9,q2y,sr,q30,st,1fda,q33,4eu3,1fdp,ta,q3j,tp,tq,q3z,dh8,u5,u6,q4f,dho,ul,1ff2,q4v,1ffh,v2,di7,412,413,414,415,dik,vh,vi,din,41h,vq,vr,vs,vt,dj0,vx,vy,dj3,41w,w5,w6,w7,w8,w9,77v,djg,djj,wk,wl,wm,wn,42j,djw,djx,djy,djz,430,431,432,433,39xg,39xh,39xi,39xj,39xk,39xl,39xm,zv,qa4,zx,zy,qa7,39xv,39xw,39xx,39xy,39xz,39y0,4f17,10d,10e,qan,39ya,39yb,39yc,39yd,39ye,39yf,1fl9,10u,qb3,39yq,39yr,39ys,39yt,doc,119,1flq,qbj,4f29,39z6,39z7,39z8,39z9,dos,11p,11q,dov,4f2p,39zm,39zn,39zo,39zp,dp8,125,126,dpb,486,487,488,489,1fn1,12m,dpr,48l,12u,12v,12w,12x,48q,7ej,dq4,131,dq7,490,139,13a,13b,13c,13d,13e,7ez,dqk,dqn,13o,13p,13q,13r,49n,dr0,dr1,dr2,dr3,4a4,4a5,4a6,4a7,d0xw,16t,16u,16v,16w,16x,16y,16z,170,qh9,qha,qhb,d0yb,178,179,17a,17b,4f88,4f89,4f8a,4f8b,4f8c,17i,d0yq,17n,17o,17p,17q,17r,4f8o,dv0,17y,d0z5,182,183,184,185,4f92,4f93,dvg,dvh,dvj,4f9c,18h,18i,18j,18k,18l,4f9i,dvw,dvx,dvy,dvz,4f9s,18x,18y,18z,190,191,4f9y,4f9z,dwc,dwd,dwe,dwf,4fa9,4faa,4fab,4fac,4fad,4fa,4fb,4fc,4fd,dws,dwt,dwu,dwv,4fp,19y,19z,1a0,1a1,4fu,7ln,dx8,dxa,dxb,4g4,1ad,1ae,1af,1ag,1ah,1ai,7m3,dxo,dxq,dxr,1as,1at,1au,4gr,dy4,dy5,dy6,dy7,4h8,4h9,4ha,4hb,d150,1dx,1dy,1dz,1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,d15f,1ec,1ed,1ee,1ef,4ffc,4ffd,4ffe,4fff,4ffg,4ffh,4ffi,4ffj,d15u,1er,1es,1et,1eu,1ev,4ffs,e28,d169,1f6,1f7,1f8,1f9,4fg6,4fg7,1fk,1fl,1fm,1fn,1fo,1fp,4fgm,1g0,1g1,1g2,1g3,1g4,1g5,4fh2,4fhc,4fhd,4fhe,4fhf,4fhg,4fhh,4mf,4mg,4mh,4mi,4mj,h9p,h9q,h9r,4mt,4mu,1h3,1h4,1h5,1h6,1h7,460s,1hh,1hi,1hj,1hk,1hl,4618,1hx,1hy,4fj0,4fj1,4fj2,4fj3,4oc,4od,4oe,4of,3ais,3ait,3aiu,3aiv,3aiw,3aix,3aiy,3aiz,3aj0,3aj1,3aj2,3aj3,3aj7,3aj8,3aj9,3aja,3ajb,3ajm,3ajn,3ajo,3ajp,3ajq,3ajr,e9c,e9d,3ak2,3ak3,3ak4,3ak5,1mo,1mp,3aki,3akj,3akk,3akl,1n4,1n5,qxe,3akz,3al0,3al1,4fog,4foh,3ale,3alf,4tk,4tl,4tm,4tn,7zg,hgt,hgu,hgv,4ty,4tz,1o8,1o9,1oa,1ob,314s,1om,1on,1oo,1op,3158,1p2,4fq4,4fq5,4fq6,4fq7,4vg,4vh,4vi,4vj,egg,egh,1ts,1tt,4fuq,3arn,1u8,1u9,r4i,672r,3as4,4fvk,4fvl,3asi,3asj,86k,hnx,hny,hnz,513,514,515,46f0,1vh,4fwe,4fwf,51i,1vr,1vs,1vt,46fg,1w6,4fx8,4fx9,4fxa,4fxb,52k,52l,52m,52n,enk,enl,20w,20x,3ayq,3ayr,21c,21d,rbm,679v,3az8,4g2o,4g2p,3azm,3azn,8do,hv1,hv2,hv3,31j0,4g3i,31jg,233,4g4c,4g4d,4g4e,4g4f,59o,59p,59q,59r,euo,eup,280,281,4g8y,3b5v,28g,28h,riq,6n9v,3b6c,4g9s,4g9t,3b6q,3b6r,8ks,i25,i26,i27,46t8,46to,2a7,4gbg,4gbh,4gbi,4gbj,5gs,5gt,5gu,5gv,f1s,f1t,2f4,2f5,3bcy,3bcz,2fk,2fl,rpu,6atv,3bdg,8rj,4ggw,4ggx,3bdu,3bdv,8rw,f3h,8ry,8rz,470c,470e,31xb,470s,470u,31xr,4gik,4gil,4gim,4gin,5nw,5nx,5ny,5nz,f8w,f8x,2m8,2m9,4gn6,3bk3,2mo,2mp,rwy,6kib,3bkk,4go0,4go1,3bky,3bkz,3xpo,3xpp,8z2,3xq2,3xq3,dy0s,4zni,3xqa,3xqe,3xqf,3xqg,3xqh,dy16,2ob,4zny,3xqp,3xqq,3xqr,3xqs,3xqt,dy1i,2oo,2op,3xr4,dy1t,2p1,fg0,fg1,2tc,2td,4gua,2ts,2tt,4guq,3brn,4gv4,4gv5,habr,s60,s6e,s6v,fn4,fn5,30g,30h,4h1e,30j,30w,30x,4h1u,3byr,4h28,4h29,4h2a,haie,cgon,32e,32f,sd4,sdi,sdz;1,0,5,m,12,7q,86,eu,fa,ls,ly,m8,me,mf,sw,sx,sy,sz,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc,td,te,tf,tg,th,ti,tj,tk,tl,tm,tn,to,tp,tq,tr,ts,u8,uo,v4,vk,w0,wg,ww,xc,xs,y8,yo,z4,100,104,106,10g,10m,10w,11c,11s,128,12o,134,13k,140,14g,14w,15c,15s,168,4f80,4f81,4f82,4f83,4f84,1frp,17a,4f8g,4f8h,4f8i,4f8j,4f8k,1fs5,17q,17r,1e8,1e9,1ea,1eb,1ec,qol,1ee,1eo,1ep,1eq,1er,1es,qp1,1eu,1ev,1lc,1ld,1le,1lf,1lg,1g5x,1li,1ls,1lt,1lu,1lv,1lw,1g6d,1ly,1sg,1sh,1si,1sj,1sk,r2t,1sm,1sw,1sx,1sy,1sz,1t0,r39,1t2,1zk,1zl,1zm,1zn,1zo,1gk5,1zq,200,201,202,203,204,1gkl,206,26o,26p,26q,26r,26s,rh1,26u,274,275,276,277,278,rhh,27a,27b,2ds,2dt,2du,2dv,2dw,1gyd,2dy,2e8,2e9,2ea,2eb,2ec,1gyt,2ee,2kw,2kx,2ky,2kz,2l0,rv9,2l2,2lc,2ld,2le,2lf,2lg,rvp,2li,2s0,2s1,2s2,2s3,2s4,1hcl,2s6,2sg,2sh,2si,2sj,2sk,1hd1,2sm,2z4,2z5,2z6,2z7,2z8,2z9,2za,2zk,2zl,2zm,2zn,2zo,2zp,2zq;1,1,5,2o,2p,2q,2zj7,44mc,2zj9,44me,2zjb,2w,44mh,2zje,44mj,2zjg,44ml,34,35,36,2zjn,44ms,2zjp,44mu,2zjr,3c,44mx,2zju,44mz,2zjw,44n1,44n5,3m,2zk3,44n8,2zk5,44na,2zk7,3s,44nd,2zka,44nf,2zkc,44nh,42,43,44,4j,4k,4eaa,4eab,4eac,4ead,4eae,4eaf,4eag,4eah,4eai,4eaj,4eak,44td,9u,9v,9w,9x,9y,9z,a0,a1,a2,a3,a4,2zql,44tt,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,2zr1,44u9,aq,ar,as,at,au,av,aw,ax,ay,az,b0,2zrh,398y,398z,3990,3991,3992,3993,3994,3995,3996,3997,3998,399f,399g,399h,399i,399j,399k,399l,399m,399n,4ehe,4ehf,4ehg,4ehh,4ehi,4ehj,4ehk,4ehl,4ehm,4ehn,4eho,2zxd,gy,gz,h0,h1,h2,h3,h4,h5,h6,h7,h8,450t,2zxt,he,hf,hg,hh,hi,hj,hk,hl,hm,hn,ho,4519,2zy9,hu,hv,hw,hx,hy,hz,i0,i1,i2,i3,i4,451p,39g2,ib,ic,id,ie,if,ig,ih,ii,ij,39gc,39gj,39gk,39gl,39gm,39gn,39go,39gp,39gq,39gr,39gs,4eoi,4eoj,4eok,4eol,4eom,4eon,4eoo,4eop,4eoq,4eor,4eos,457l,o2,o3,o4,o5,o6,o7,o8,o9,oa,ob,oc,304t,4581,oi,oj,ok,ol,om,on,oo,op,oq,or,os,3059,458h,oy,oz,p0,p1,p2,p3,p4,p5,p6,p7,p8,305p,39n6,pf,pg,ph,pi,pj,pk,pl,pm,pn,39ng,39nn,pw,px,py,pz,q0,q1,q2,39nv,39o4,39o5,39o6,39o7,39o8,39o9,39oa,sg,sw,tc,ts,u8,uo,4evm,4evn,4evo,4evp,4evq,4evr,4evs,4evt,4evu,4evv,4evw,v4,q5d,v6,v7,v8,v9,va,vb,vc,vd,ve,vf,vg,45f1,vk,q5t,vm,vn,vo,vp,vq,vr,vs,vt,vu,vv,vw,45fh,w0,q69,w2,w3,w4,w5,w6,w7,w8,w9,wa,wb,wc,45fx,wg,39ua,wj,wk,wl,wm,wn,wo,wp,wq,wr,39uk,ww,39ur,x0,x1,x2,x3,x4,x5,x6,39uz,39v0,xc,39v8,39v9,39va,39vb,39vc,39vd,39ve,xs,y8,yo,z4,zk,100,10g,10w,11c,11s,4f2q,4f2r,4f2s,4f2t,4f2u,4f2v,4f2w,4f2x,4f2y,4f2z,4f30,128,qch,12a,12b,12c,12d,12e,12f,12g,12h,12i,12j,12k,30j1,12o,qcx,12q,12r,12s,12t,12u,12v,12w,12x,12y,12z,130,30jh,134,qdd,136,137,138,139,13a,13b,13c,13d,13e,13f,13g,30jx,13k,3a1e,13n,13o,13p,13q,13r,13s,13t,13u,13v,3a1o,140,3a1v,3a1w,3a1x,3a1y,3a1z,3a20,3a21,3a22,3a23,14g,14w,15c,15s,168,4f9u,4f9v,4f9w,4f9x,4f9y,4f9z,4fa0,4fa1,4fa2,4fa3,4fa4,45sx,19e,19f,19g,19h,19i,19j,19k,19l,19m,19n,19o,45t9,45td,19u,19v,19w,19x,19y,19z,1a0,1a1,1a2,1a3,1a4,45tp,45tt,1aa,1ab,1ac,1ad,1ae,1af,1ag,1ah,1ai,1aj,1ak,45u5,3a8i,3a8j,3a8k,3a8l,3a8m,3a8n,3a8o,3a8p,3a8q,3a8r,3a8s,3a92,4fgy,1gg,1gh,1gi,30wz,4604,30x1,4606,30x3,4608,30x5,460a,30x7,460c,1gt,1gw,1gx,1gy,30xf,460k,30xh,460m,30xj,460o,30xl,460q,30xn,460s,1h9,460x,1he,30xv,4610,30xx,4612,30xz,4614,30y1,4616,30y3,4618,1hp,3142,314i,314y;1,2,5,sg,sw,tc,ts,u8,uo,v4,vk,w0,wg,ww,xc,xs,y8,yo,z4,zk,100,10g,10w,11c,11s,128,12o,134,13k,140,14g,14w,15c,15s,168;1,3,5,ctp,4e7w,71,4e7y,d0t,39bk,39bl,39bm,4ef0,e5,4ef2,gck,gcl,gcm,gcn,gco,gcp,gcq,gcr,gd0,gd1,gd2,gd3,gd4,gd5,gd6,gd7,d7k,d7l,d7m,gdg,5a79,5a7a,5a7b,5a7c,5a7d,5a7e,gdn,d7x,kw,kx,ky,39ir,gdw,5a7p,5a7q,gdz,5a7s,5a7t,5a7u,ge3,4em4,l9,3vni,lb,gjo,gjp,gjq,gjr,gjs,gjt,gju,gjv,de9,gk4,95g5,ra,idav,rc,rd,re,5ae3,dep,deq,5aec,rp,rq,rr,rs,rt,iwa2,5aej,df1,q28,s1,s2,39pv,5aes,s5,s6,s7,s8,s9,sa,5aez,4et8,sd,4eta,sg,sw,tc,ts,u8,uo,v4,vk,w0,wg,ww,xc,xs,gqs,gqt,gqu,gqv,gqw,gqx,gqy,gqz,y8,gr8,yd,ye,yf,yg,yh,yi,5al7,yo,dlu,5alg,yt,yu,yv,yw,yx,yy,5aln,dm5,z4,q9d,z6,39wz,5alw,iwhh,za,zb,zc,zd,ze,5am3,4f0c,zh,4f0e,zk,100,10g,10w,11c,11s,128,12o,134,13k,140,14g,14w,gxw,gxx,gxy,gxz,gy0,gy1,gy2,gy3,15c,gyc,6m6t,6m6u,6m6v,15k,15l,15m,5asb,15s,dsy,5ask,15x,15y,15z,160,161,162,5asr,gz0,dt9,168,qgh,16a,3a43,5at0,qgl,qgm,qgn,qgo,qgp,16i,5at7,4f7g,16l,4f7i,h50,h51,h52,h53,h54,h55,h56,h57,h5g,1cl,69qu,1cn,1co,1cp,1cq,h5n,1cs,qn4,e01,e02,e03,e04,qn9,qna,qnb,qnc,qnd,qne,h63,e0c,e0d,qnk,1dd,1de,1df,1dg,1dh,1di,1dj,1dk,1dl,1dm,1dn,1do,1dp,4fem,1dr,hc4,hc5,hc6,hc7,hc8,hc9,hca,hcb,hck,1jp,69xy,1jr,66s8,1jt,1ju,hcr,e74,e75,e76,e77,e78,qud,que,quf,qug,quh,qui,hd7,e7g,e7h,1kg,1kh,1ki,1kj,1kk,1kl,1km,1kn,1ko,1kp,1kq,1kr,1ks,1kt,4flq,1kv,hj8,hj9,hja,hjb,hjc,hjd,hje,hjf,5bdg,1qt,eg2e,1qv,1qw,eg2h,1qy,5bdn,5bdw,1r9,1ra,1rb,1rc,1rd,1re,5be3,3apc,3apd,3ape,3apf,5bec,r1x,r1y,r1z,r20,r21,r22,5bej,4fss,4fst,hqc,hqd,hqe,hqf,hqg,hqh,hqi,hqj,3avn,5bkk,1xx,1xy,eg9j,1y0,1y1,1y2,5bkr,5bl0,1yd,1ye,1yf,1yg,1yh,1yi,5bl7,5blg,1yt,1yu,1yv,1yw,1yx,1yy,5bln,3b20,3b23,hxg,hxh,hxi,hxj,hxk,hxl,hxm,hxn,5bro,6n6d,252,253,g7o8,255,3x7e,5brv,5bs4,25h,25i,25j,25k,25l,25m,5bsb,5bsk,25x,25y,25z,260,261,262,5bsr,i4k,i4l,i4m,i4n,i4o,i4p,i4q,i4r,5bys,6ndh,6ndi,2c7,2c8,3xeh,2ca,5byz,5bz8,ego5,2cm,2cn,2co,2cp,2cq,5bzf,5bzo,2d1,2d2,9zhz,3xfc,dxq1,2d6,5bzv,3bg7,3bg9,ibo,ibp,ibq,ibr,ibs,ibt,ibu,ibv,ic4,5c5x,5c5y,5c5z,5c60,5c61,5c62,5c63,ick,5c6d,5c6e,5c6f,5c6g,5c6h,5c6i,5c6j,id0,5c6t,5c6u,5c6v,5c6w,5c6x,5c6y,5c6z,5cdy;1,4,5,4,ft1,ft2,4e18,d,4e1a,k,l,m,4e1p,10,1g,1w,6e8,6e9,6ea,38w,38x,38y,59q9,394w,394x,394y,78,g05,g06,4e8c,7h,4e8e,g0k,g0l,g0m,4e8t,g10,g1g,g1w,g2c,6lc,6ld,6le,6lf,3fo,59ws,6ls,6lt,6lu,3g3,3gg,3gh,3gi,e8,e9,ea,39c3,g78,5a11,5a12,5a13,5a14,eh,g7e,g7f,4efg,el,3vgu,en,4efk,4efl,4efm,g7o,5a1h,5a1i,5a1j,5a1k,g7t,g7u,g7v,4efx,g84,5a1x,5a1y,5a1z,5a20,5a21,5a22,g8b,g8k,5a2d,5a2e,5a2f,5a2g,5a2h,5a2i,g8r,g90,g91,g92,g93,g94,g95,g96,g97,g9g,6s5,6sg,6sh,6si,6sj,3ms,3mt,5a3w,6sw,6sx,6sy,6sz,6tc,6td,6te,3nn,3o0,3o1,3o2,5a62,5a6j,pvk,ld,le,39j7,5a84,lh,li,lj,lk,cu15,lm,5a8b,4emk,lp,4emm,4emp,4emq,5a8k,lx,ly,lz,m0,m1,m2,5a8r,4en1,5a90,md,me,mf,mg,mh,mi,5a97,d9s,d9t,5a9g,mt,mu,mv,mw,mx,my,5a9n,da8,gg4,5a9x,5a9y,5a9z,5aa0,5aa1,5aa2,ggb,dao,no,6z9,db4,6zl,6zm,6zn,3tx,5aax,dbk,dbl,702,703,3uc,dc0,dc1,70i,3ur,dcg,dch,3v6,3vk,3vl,sg,q2p,si,39qb,5af8,sl,9xxi,3vuv,3vuw,3vux,sq,5aff,4eto,st,4etq,sw,4etu,5afo,t1,t2,9xxz,t4,9xy1,t6,5afv,4eu5,tc,5ag4,th,ti,tj,tk,tl,tm,5agb,ts,dgx,5agk,tx,ty,tz,u0,u1,u2,5agr,u8,dhd,gn8,5ah1,5ah2,5ah3,5ah4,5ah5,5ah6,gnf,uo,dht,76b,us,76d,5ahl,v4,di9,76q,76r,v8,411,dip,776,777,41g,w0,dj5,77m,41v,djk,djl,42a,42o,42p,5akp,5al8,zk,q9t,zm,39xf,5amc,q9x,q9y,q9z,qa0,qa1,zu,5amj,4f0s,zx,4f0u,100,4f0y,5ams,105,106,107,108,109,10a,5amz,4f19,10g,5an8,10l,10m,10n,10o,10p,10q,5anf,10w,do1,do2,5ano,111,112,113,114,115,116,5anv,11c,doh,guc,5ao5,5ao6,5ao7,5ao8,5ao9,gui,guj,11s,dox,7df,11w,7dh,128,dpd,7du,7dv,485,dpt,7ea,7eb,48k,134,dq9,7eq,48z,dqo,dqp,49e,49s,49t,qgw,16p,16q,16r,16s,16t,16u,16v,16w,16x,16y,16z,170,171,4f7y,173,qhc,4f82,4f83,qhg,qhh,qhi,qhj,qhk,qhl,qhm,qhn,4f8c,4f8d,qhs,5auc,17p,17q,17r,17s,17t,17u,5auj,dv4,5aus,185,186,187,188,189,18a,5auz,dvk,h1g,5av9,5ava,5avb,5avc,5avd,5ave,h1n,dw0,7kj,190,h1x,h1y,194,197,dwg,7kx,7ky,7kz,4f9,5aw7,5aw8,5aw9,dwx,7le,7lf,5awn,1a8,dxd,7lu,4g3,dxs,dxt,4gi,4gw,4gx,5ayg,5azc,5azd,1ds,1dt,1du,1dv,1dw,1dx,1dy,1dz,1e0,1e1,1e2,1e3,1e4,1e5,4ff2,1e7,4ff4,4ff5,4ff6,4ff7,qok,qol,qom,qon,qoo,qop,qoq,qor,4ffg,4ffh,4ffi,4ffj,5b1g,1et,1eu,1ev,1ew,1ex,1ey,5b1n,5b1w,f86t,f86u,1fb,1fc,1fd,1fe,5b23,5b2d,5b2e,5b2f,5b2g,5b2h,5b2i,7rm,7rn,7ro,7rp,h9c,4601,7s2,7s3,7s4,4md,5b3b,5b3d,460h,7si,7sj,4ms,460x,7sy,4n7,4fio,4fip,4nm,4o0,4o1,5b61,3aio,3aip,3aiq,3air,5b7o,qv9,qva,qvb,qvc,qvd,qve,5b7v,4fm4,4fm5,5b84,1lh,1li,1lj,1lk,1ll,1lm,5b8b,5b8k,1lx,1ly,1lz,1m0,1m1,1m2,5b8r,5b90,1md,1me,1mf,1mg,h5x5,1mi,5b97,5b9h,5b9i,5b9j,5b9k,5b9l,5b9m,7yp,7yq,7yr,7ys,7yt,hgg,3141,7z6,7z7,7z8,4th,5bae,5bag,314h,7zm,7zn,4tw,314x,802,4ub,4fps,4fpt,4uq,4v4,4v5,5bd6,5bd7,1s3,5bes,e9s5,1s6,1s7,1s8,1s9,1sa,5bez,5bf8,1sl,1sm,1sn,g460,1sp,1sq,5bff,5bfo,1t1,1t2,1t3,1t4,1t5,1t6,5bfv,5bg4,1th,1ti,f8l3,1tk,1tl,1tm,5bgb,5bgl,5bgm,5bgn,5bgo,5bgp,5bgq,85s,46dt,85u,85v,85w,85x,hnk,46e9,86a,86b,86c,50l,5bhj,5bhl,4fw0,46ep,86q,86r,510,5bi1,46f5,876,51f,4fww,4fwx,51u,528,529,1z7,5blw,1z9,1za,1zb,1zc,1zd,1ze,5bm3,5bm4,5bmc,1zp,1zq,1zr,fuvs,1zt,1zu,5bmj,5bms,205,206,207,208,209,20a,5bmz,5bn8,20l,20m,20n,20o,20p,20q,5bnf,5bnp,5bnq,5bnr,5bns,5bnt,5bnu,8cw,8cx,8cy,8cz,8d0,8d1,huo,31i9,8de,8df,8dg,57p,5bou,31ip,8du,8dv,584,5bpa,5bpb,22o,31j5,8ea,58j,4g40,4g41,58y,59c,59d,26b,5bt0,26d,96va,26f,3x8o,96vd,26i,5bt7,5btg,26t,gavq,9zbr,3x94,dxjt,26y,5btn,5btw,279,27a,27b,3x9k,gaw9,27e,5bu3,5buc,27p,27q,27r,27s,27t,27u,5buj,5but,5buu,5buv,5buw,5bux,5buy,8k0,8k1,8k3,8k4,8k5,i1s,46sh,8ki,8kj,8kk,5et,5bvr,5bvs,5bvu,5bvx,46sx,8ky,8kz,5f8,5bwa,29s,46td,8le,5fn,4gb4,4gb5,8lu,5gg,5gh,2df,i6c,5c05,5c06,5c07,5c08,5c09,5c0a,5c0b,5c0k,5c0l,5c0m,5c0n,5c0o,5c0p,5c0q,5c10,5c11,5c12,5c13,5c14,5c15,5c16,5c1g,5c1h,5c1i,5c1j,5c1k,5c1l,5c1m,8r4,8r6,8r7,8r8,8r9,8rk,8rl,8rm,8rn,8ro,5lx,5c2w,5c2y,5c2z,5c30,31ww,4701,8s2,8s3,5mc,5c3e,31xc,470h,8si,5mr,4gi8,4gi9,5n6,5nk,5nl,2kj,2kk,2kl,2km,8y9,8ya,8yb,8yc,8yd,8yp,8yq,8yr,5t0,5t1,5c9z,5ca1,5ca4,8z5,8z6,5tf,8zl,5tu,5u9,5cch,5ccx,2rn,2ro,2rp,2rq,95d,95e,95f,95g,95t,95u,603,604,5ch6,5ch8,969,60i,5chm,96p,61d,2yr,2ys,2yt,2yu,2za,9ch,9ci,9cj,9cx,676,677,5co6,5co9,5cob,9dd,5cop,681;1,5,5,59n8,59no,59ok,59uc,59us,59v9,59vo,59vp,5a1g,5a1w,5a2d,5a8k,5afo,5ams,5an8;1,0,6,sw,sx,sy,sz,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc,td,te,tf,tg,th,ti,tj,tk,tl,tm,tn,to,tp,tq,tr;1,1,6,5d9s,5da8,5dao,5db4,5dbk,5dc0,5dcg,kg,kw;1,2,6,5d6o,5d74,5d7k,5d80,5d8g,5d8w,5d9c,5d9s,5da8,5dao,5db4,5dbk,5dc0,5dcg,5dcw,5ddc;1,3,6,5d6o,5d74,5d7k,fk,g0,gg,gw,hc,hs,i8,io,j4,jk,k0,kg,kw;1,4,6,6f8,6fo,3ac,3al,3at,59,3ba,6h8,6h9,6ha,6hb,3br,3s2g,3s2h,3s2i,3bv,3bw,3bx,3by,3bz,73,6mc,6ms,3hg,3ho,3hp,3hx,3i3,cc,cd,3ie,cr,cs,6od,6oe,6of,3iv,3s9k,3s9l,3s9m,3iz,3j0,3j1,3j2,3j3,e7,e8,6tw,3ok,3os,3ot,j3,3p1,3p7,jg,jh,3pi,jt,jv,jw,6vh,6vi,3pz,3sgo,3sgp,3sgq,3q3,3q4,3q5,3q6,lb,710,3vo,3vw,3vx,3vy,q7,3w5,3wb,qk,ql,qm,qn,3wm,qx,qz,r0,r1,3x3,3sns,3snt,3snu,3x7,3x8,3x9,784,42s,430,431,xa,xb,439,43f,xo,xp,xq,xr,43q,y2,y3,y4,79p,447,3suw,3sux,3suy,44b,44c,44d,6p5z,z3,7f8,49p,49w,14d,4a6,4ad,4aj,4ak,14t,14u,4au,157,158,7gt,7gu,4bb,3t20,3t21,3t22,4bf,4bg,4bh,4bi,6pd3,1a4,1a5,1ak,7mc,1b0,4gt,4h0,1bg,1bh,4hh,4hn,1bw,1bx,4hy,1cb,1cc,7nx,7ny,7nz,4if,3t94,3t95,3t96,3t97,3t98,3t99,3t9a,3t9b,6pk7,1hn,1ho,7tg,1i3,1i4,4o4,1ij,1ik,4od,4ol,1iz,1j0,1j1,4p2,1je,1jg,7v1,7v2,7v3,4pj,3tg8,3tg9,3tga,3tgb,3tgc,3tgd,3tge,3tgf,6prb,1or,1p7,4v8,1pn,4vg,4vp,1q3,1q4,4w6,1qi,825,826,827,4wn,3tnc,3tnd,3tne,3tnf,3tng,3tnh,3tni,3tnj,6pyf,51m,51n,1wa,1wb,527,52c,1wq,1wr,52k,52m,1wv,52t,1x6,1x7,1x8,1xa,1xb,53a,1xr,53r,3tug,3tuh,3tui,3tuj,3tuk,3tul,3tum,3tun,6q5j,58q,595,23e,59a,59b,59g,23t,23u,59p,23y,23z,59x,24a,24d,24e,24f,5ae,24q,5av,3u1k,3u1l,3u1m,5az,5b0,5b1,5b2,5b3,6qcn,6n6z,6n70,6n71,6n72,6n73,5g9,5gd,5ge,5gf,5gk,2ax,5gs,2b1,2b2,2b3,5h1,2bd,2bg,2bh,2bi,2bj,5hi,5hz,3u8o,3u8p,3u8q,5i3,5i4,5i5,5i6,5i7,2cm,6qjr,2co,2cp,6ne3,5ng,5nh,5no,2i4,2i5,5ny,5nz,5o5,2il,2im,2in,5om,2ja,5p3,3ufs,3uft,3ufu,5p7,5p8,5p9,5pa,5pb,2jq,6qqv,2js,2jt,2ju,6nl7,2k8,2k9,5us,5uw,5v9,2pk,2pp,5vq,2q0,2qe,5w7,3umw,3umx,3umy,5wb,5wc,5wd,5we,5wf,2qu,6qxz,2qw,2qx,2qy,6nsb,2rb,2rc,2rd,2v1,2vh,2vi,2vx,2vy,2vz,61w,2we,2wf,62d,62m,62n,62u,2xi,63b,3uu0,3uu1,3uu2,63f,63g,63h,63i,63j,2xy,6r53,2y0,2y1,2y2,6nzf,6nzg,6nzh,6nzi,6nzj,2yf,2yg,2yh,325,32l,690,69h,69y,6af,3v14,3v15,3v16,3y6z,3y70,3y71,3y72,3y73,6rc7,354,355,356,35r;1,5,6,f,7j,en,2dk,2kn,2ko,2kp,2rs,2z3;1,0,7,sw,sx,sy,sz,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc,td,te,tf,tg,th,ti,tj,tk,tl,tm,tn,to,tp,tq,tr,ts,tt,tu,tv,tw,u7,u9,ua,ub,uc,un,uq,ur,us,v3,v7,v8,vj,vo,vz,w4,wf,wk,wv,x0,xb,xg,xr,xw,y7,yc,yn,ys,z3,z8,zj;1,1,7,sk,sv,t0,tb,tg,tr,tw,u7,uc,un,us,v3,v8,vj,vo,vz,w4,wf,wk,wv,x0,xb,xg,xr,xw,y7,yc,yn,ys,z3,z8,zj;1,2,7,sk,sv,t0,tb,tg,tr,tw,u7,uc,un,us,v3,v8,vj,vo,vz,w4,wf,wk,wv,x0,xb,xg,xr,xw,y7,yc,yn,ys,z3,z8,zj,5fl4,5flk,5fm0,5fmg,5fmw,5fnc,5fns,5fo8,5foo,5fp4,5fpk,5fq0,5fqg,5fqw;1,3,7,sk,sv,t0,tb,tg,tr,tw,u7,uc,un,us,v3,v8,vj,vo,vz,w4,wf,wk,wv,x0,xb,xg,xr,xw,y7,yc,yn,ys,z3,z8,zj,2rc,2rd,5fk8,5fko,5fl4,5flk,5fm0,5fmg,5fmw,5fnc,5fns,5fo8,5foo,5fp4,5fpk,5fq0,5fqg,2yg,2yh;1,4,7,3v,4b,4c,4h,4s,4t,58,59,5a,5b,6gw,6gx,6gy,6gz,6h0,6h1,6h2,6h3,6h4,6h5,6h6,6h7,6h8,6h9,6ha,6hb,3bk,3bl,3bm,6hf,1xp0,1xp1,1xp2,1xp3,1xp4,1xp5,1xp6,6hn,1xp8,1xp9,1xpa,1xpb,4kir,7dno,20v9,20vd,7dnu,4e7f,ctr,6o,6p,6q,394j,7do5,7do6,7do7,7do8,7do9,4e7v,bd,be,bf,bk,bl,1xv0,cb,1xvg,cd,ce,6o6,6o7,6o8,6o9,6oa,cr,1xvw,6od,3ip,6oj,1xw4,1xw5,1xw6,1xw7,1xw8,1xw9,1xwa,1xwb,1xwc,1xwd,1xwe,1xwf,dd,4kpv,dg,7dut,7duv,7dux,d0v,ds,dt,du,39bn,hg,hw,ig,ih,ii,io,39gz,39h0,39h1,39h2,39h3,39h4,jd,je,jf,jg,ptv,ptw,ptx,pty,ptz,js,jt,ju,jv,6vn,6vo,6vp,6vq,6vr,6vs,6vt,6vu,6vv,6vw,6vx,6vy,6vz,kg,4kwz,4kx0,4kx1,4kx2,4kx3,4kx4,4kx5,4kx6,4kx7,4kx8,4kx9,4kxa,4kxb,kw,kx,ky,39ir,39is,39it,39iu,39iv,39iw,39ix,39iy,39iz,39j0,39j1,39j2,39j3,ok,p0,pj,pk,pl,39nn,39no,39np,39nq,pz,q0,39o3,39o4,39o5,39o6,39o7,qg,qh,qi,qj,q0x,39oi,qr,qs,qt,qu,qv,qw,qx,qy,3x5,rt,ru,rz,s0,s1,s2,s9,sk,sl,sv,t0,tb,tg,tr,tw,u7,uc,un,us,v3,v8,ve,vf,vj,vo,vs,vt,vu,vz,w4,wf,39ub,4exg,39ud,4exi,39uf,4exk,wv,39uq,f1cz,bfs4,x1,x2,x3,x4,39ux,xb,435,39v6,xf,dkk,xh,xi,xj,xk,xl,xr,q81,q82,xv,xw,xx,xy,xz,y0,y1,y2,y7,44f,ys,yx,z1,z3,12s,12v,12w,12x,12y,138,139,13a,13b,13c,4f4j,3a1g,4f4l,3a1i,13r,13s,3a1u,143,144,145,146,147,7r8o,3a21,3a2a,14j,14k,14l,14m,14n,7r94,3a2h,qf5,qf6,14z,150,151,152,153,154,3a2x,4bh,4bi,4bj,160,165,166,167,19w,19z,1a0,1ac,1ad,1ae,1af,1ag,1ar,1as,3a8l,1au,1av,4fbs,3a8y,1b7,1b8,1b9,1ba,1bb,7rfs,3a95,4hd,3a9e,1bn,1bo,1bp,1bq,1br,7rg8,3a9l,qm9,qma,1c3,1c4,1c5,1c6,1c7,7rgo,3aa1,3t8w,3t8x,3t8y,3t8z,3t90,3t91,3t92,3t93,3t94,3t95,3t96,3t97,3t98,3t99,3t9a,3t9b,1cy,1d2,1d3,1d7,1d8,1d9,1da,1db,1dq,1dr,1h0,1h1,1h2,3aev,1hg,1hh,1hi,1hj,3afc,1ht,1hu,1hv,1hw,1hx,1hy,4fiv,3afs,1i9,1ia,1ib,1ic,1id,1ie,1if,7rmw,3ag9,3aga,1ip,1iq,1ir,1is,1it,1iu,1iv,7rnc,3agp,7uo,qtd,1j6,1j7,1j8,1j9,1ja,1jb,7rns,3ah5,3tg0,3tg1,3tg2,3tg3,3tg4,3tg5,3tg6,3tg7,3tg8,3tg9,3tga,3tgb,3tgc,3tgd,3tge,3tgf,1k3,1k6,1k8,1kb,1kc,1kd,1ke,1kf,1ku,1kv,1o6,1ok,1ol,1om,1op,4uo,1ox,1oy,1oz,1p0,1p1,1p2,1p3,1p4,1p5,1pc,1pd,1pe,1pf,1pg,4ckl,3ana,3anb,3anc,3and,1ps,1pt,1pu,1pv,3ano,3anp,3anq,3anr,3ans,3ant,81s,1q9,1qa,1qb,1qc,1qd,1qe,1qf,1qg,3ao9,3tn4,3tn5,3tn6,3tn7,3tn8,3tn9,3tna,3tnb,3tnc,3tnd,3tne,3tnf,3tng,3tnh,3tni,3tnj,1r9,1rf,1rg,1rh,1ri,1rj,1rx,1ry,1rz,1vq,51s,1w1,1w2,1w3,1w5,1w6,1w7,1wg,1wh,1wi,1wj,1wm,1ww,1wx,1wy,3aur,3aus,3aut,3auu,3auv,3auw,1xc,1xd,1xe,1xf,1xg,1xh,1xi,1xj,1xk,3avd,3tu8,3tu9,3tua,3tub,3tuc,3tud,3tue,3tuf,3tug,3tuh,3tui,3tuj,3tuk,3tul,3tum,3tun,1ye,1yf,1yg,1yj,1yk,1yl,1ym,1yn,1z1,1z2,1z3,58w,58x,236,58z,238,239,23a,23k,23l,23m,23n,23o,23p,23q,240,241,24g,8g1,8g2,3b2b,3b2c,3b2d,3b2e,3b2f,3b2g,5ao,5ap,5aq,5ar,5as,5at,5az,5b0,5b1,5b2,5b3,6n6o,6n6p,6n6q,6n6r,6n6s,6n6t,6n6u,6n6v,6n6w,6n6x,6n6y,6n6z,6n70,6n71,6n72,6n73,263,264,266,267,5g0,5g1,5g2,5g3,2ae,2ao,2ap,2aq,2ar,2au,2b4,2b5,8n5,8n6,8n7,8n8,8n9,8na,5hs,5ht,5hu,5hv,5hw,5hx,5hy,5i3,5i4,5i5,5i6,5i7,2cr,2cs,2ct,2cu,2cv,2d8,2db,2hi,5nk,2hy,2i8,8ub,8uc,8ud,8ue,8uf,5ow,5ox,5oy,5oz,5p0,5p1,5p2,5p3,5p7,5p8,2jv,2jw,5pp,5pr,2k6,2k7,2k8,2k9,2ka,2kd,2kf,2ko,2kp,2kq,2l5,2l6,2om,2p2,91g,91h,91i,91j,5w0,5w1,5w2,5w3,4q8k,4q8l,4q8m,4q8n,920,921,922,923,4q90,4q91,4q92,4q93,4q94,4q95,4q96,92j,92k,92l,92m,92n,4q9g,4q9h,4q9i,4q9j,2rc,2rd,4q9m,4q9n,4q9o,4q9p,4q9q,4q9r,2rs,2rt,2ru,2s9,2sa,2sb,2sc,2sd,2sq,2sr,2ss,2st,2su,2t8,2t9,2ta,2tb,2tq,2tr,2u7,2vk,2vl,2vm,2vn,2vo,2vp,2vq,2w0,2w1,2w2,2w3,2w4,2w5,2w6,2wm,98k,98l,98m,98n,634,635,636,637,4qfo,3bv9,4qfq,4qfr,995,996,997,6nz4,6nz5,6nz6,6nz7,4qg4,3bvp,3bvq,3bvr,2y0,3bvt,4qga,3uuj,99o,99p,3bvy,99r,4qgk,3bw5,3bw6,3bw7,2yg,3bw9,3bwa,3bwb,3bwc,3bwd,3bwe,3bwf,9fo,3y6o,3y6p,3y6q,3y6r,3v10,34l,9g9,9ga,9gb,yqs,3y79,3y7a,3y7b,3y7c,3y7d,3y7e,3y7f,3y7g,3y7h,3y7i,20of,35c,35d,35e,yr8,23ue,23uf,4kc9,3y7u,3c3g,4h6l,4h6m,3c3j;1,5,7,0,1,2,pab,4e17,h,i,par,asr9,asrb,asrd,4e1n,x,38yr,4e1w,4e1x,4e1y,4e1z,4e20,4e21,4e22,4e23,38z0,20q5,20q6,20q7,38z7,1xkk,1xkl,1xkm,1xkn,1xko,1xkp,1xkq,1xkr,4e2k,dirh,38zn,1xl0,1xl1,1xl2,1xl3,1xl4,1xl5,1xl6,1xl7,dirw,2a8j,2a8v,pd0,2a9a,pdg,2a9p,8fic,8fid,2a9y,2aa4,2aaf,2aaj,2aaw,2aay,2abd,74,75,76,394z,7b,7c,7d,7e,c16z,bf2l,bf2m,7k,7l,7m,395f,7s,7t,7u,4e8r,80,81,82,395v,4e90,4e91,4e92,4e93,4e94,4e95,4e96,4e97,3964,20x9,20xa,20xb,396b,1xro,1xrp,1xrq,1xrr,1xrs,1xrt,1xru,1xrv,4e9o,diyl,396r,1xs4,1xs5,1xs6,1xs7,1xs8,1xs9,1xsa,1xsb,diz0,2afn,2afz,2ag4,2age,4eb8,2agl,2agt,8fpg,8fph,2ah2,2ah8,2ahj,2ahn,2ai0,2ai2,2aih,e8,e9,ea,39c3,39c4,39c5,39c6,39c7,39c8,39c9,39ca,39cb,39cc,39cd,39ce,39cf,eo,ep,39cj,39ck,39cl,39cm,39cn,39co,39cp,39cq,39cr,39cs,39ct,39cu,39cv,f5,39cz,39d0,39d1,39d2,39d3,39d4,39d5,39d6,39d7,39d8,39d9,39da,39db,39df,39dg,39dh,39di,39dj,39dk,39dl,39dm,39dn,39do,39dp,39dq,39dr,39dv,39dw,39dx,39dy,39dz,39e0,39e1,39e2,39e3,39e4,39e5,39e6,39e7,2amr,39ec,39ed,39ee,39ef,39eg,39eh,39ei,39ej,39ek,39el,39em,2an3,2an8,39et,39eu,39ev,39ew,39ex,39ey,39ez,39f0,39f1,2ani,2anp,39fa,39fb,39fc,39fd,39fe,39ff,39fg,2anx,2ao6,39fr,39fs,39ft,39fu,39fv,2aoc,2aon,39g8,39g9,39ga,2aor,2ap4,39gp,2ap6,2apl,lc,ld,le,lf,lj,lk,ll,lm,ln,lz,m0,m1,m2,m3,mg,mh,mi,mw,mx,my,sn,so,sp,sq,sr,t3,t4,t5,t6,t7,tl,tm,u1,zs,zt,zu,108,109,10a,10b,20c,20d,20e,20r,20s,20t,20u,26n,27f,27g,27h,27i,27j,27v,27w,27x,27y,27z,28d,28e,28t,2dj,2dk,2dl,2dp,2e5,2ej,2ek,2el,2em,2en,2ez,2f0,2f1,2f2,2f3,2fg,2fh,2fi,2fw,2fx,2fy,4q2s,4q2t,4q2u,4q2v,4q2w,4q2x,4q2y,4q2z,4q30,4q31,4q32,4q33,4q38,4q39,4q3a,4q3b,4q3c,4q3d,4q3e,4q3f,4q3g,4q3h,4q3i,4q3j,4q3o,4q3p,4q3q,4q3r,4q3s,4q3t,4q3u,4q3v,4q3w,4q3x,4q3y,4q3z,4q44,4q45,4q46,4q47,4q48,4q49,4q4a,4q4b,4q4c,4q4d,4q4e,4q4f,4wg4,4wg5,4wg6,4wg7,4wg8,4wg9,4wga,4wgb,4wgc,4wgd,4wge,4wgf,2n1,4q9w,3bph,3bpi,3bpj,3bpk,3bpl,3bpm,3bpn,3bpo,3bpp,3bpq,3bpr,4qac,3bpx,3bpy,3bpz,3bq0,3bq1,3bq2,3bq3,3bq4,3bq5,3bq6,3bq7,4qas,3bqd,3bqe,3bqf,3bqg,3bqh,3bqi,3bqj,3bqk,3bql,3bqm,3bqn,4qb8,im3,im4,im5,im6,im7,4wn8,4wn9,4wna,4wnb,4wnc,4wnd,4wne,4wnf,4wng,4wnh,4wni,4wnj,2yo,2yp,2yq,s90,23nq,23nr,4k5l,3y16,3bws,3bwv,yl0,23o6,23o7,4k61,3bx8,bhul,bhum,3bxb,ylg,3bxo,3bxr,4qic,it8,it9,ita,itb,4wuc,4wud,4wue,4wuf,4wug,4wuh,4wui,4wuj,4wuk,4wul,4wum,4wun;1,0,8,r,17,7v,8b,ez,ff,m3,mj,mz,t7,tn,10b,10r,17f,17v,1ej,1ez,1ln,1m3,1sr,1t7,1zv,20b,26z,27f,2e3,2ej,2l7,2ln,2sb,2sr,2zf,2zv;1,4,8,3ab,3ai,5cxe,4z,56,6gr,6gu,6gw,6gx,5cxu,5f,6h0,6h1,6h2,6h3,6h4,6h5,393f,393i,6hc,6hd,6he,6hg,6hh,1xp2,6hj,3bs,3bt,3bu,3bv,3bw,3bx,3by,3bz,ctc,5plt,5plu,5plv,1xpg,dfqd,4kiv,20vk,5pm9,5pma,5pmb,dfqs,394n,1xur,1xv6,1xv7,1xvl,1xvm,cj,6o4,6o5,6o6,6o7,6o8,6o9,6oa,6ob,6oc,6od,6oe,6of,6og,1xw1,cy,cz,6ok,6ol,1xw6,6on,3iw,3ix,3iy,3iz,3j0,3j1,3j2,3j3,d0g,df,1xwk,dfxh,4kpz,212o,1xwz,dfxw,39br,6va,6vb,6vc,6vd,6ve,6vf,6vg,6vh,6vi,6vj,6vk,6vl,6vm,6vn,6vo,6vp,6vq,6vr,3q0,3q1,3q2,3q3,3q4,3q5,3q6,3q7,4kww,4kwx,4kwy,4kwz,4kx0,4kx1,4kx2,4kx3,39io,39ip,39iq,39ir,39is,39it,39iu,39iv,72g,72h,72i,72j,72k,72l,3x4,3x5,3x6,3x7,3x8,3x9,rk,rq,rz,440,441,442,yo,yp,yq,ys,yv,z0,4b4,4b5,4b6,4b7,4b8,4b9,4bi,4bj,15s,15t,15u,15v,15w,15x,166,167,16n,3t8w,3t8x,3t8y,3t8z,3t90,3t91,3t92,3t93,3t94,3t95,3t96,3t97,3t98,3t99,3t9a,3t9b,1cw,1cx,1cy,1cz,1d0,1d1,1d2,1d3,1d4,1d5,1d6,1d7,1d8,1d9,1da,1db,1dc,1dm,1dq,3tg0,3tg1,3tg2,3tg3,3tg4,3tg5,3tg6,3tg7,3tg8,3tg9,3tga,3tgb,3tgc,3tgd,3tge,3tgf,1k0,1k1,1k2,1k3,1k4,1k5,1k6,1k7,1k8,1k9,1ka,1kb,1kc,1kd,1ke,1kf,1kg,1kh,1kp,3tn4,3tn5,3tn6,3tn7,3tn8,3tn9,3tna,3tnb,3tnc,3tnd,3tne,3tnf,3tng,3tnh,3tni,3tnj,1r4,1r5,1r6,1r7,1r8,1r9,1ra,1rb,1rc,1rd,1re,1rf,1rg,1rh,1ri,1rj,1rk,1rl,1rm,1rn,1rx,1ry,1rz,3tu8,3tu9,3tua,3tub,3tuc,3tud,3tue,3tuf,3tug,3tuh,3tui,3tuj,3tuk,3tul,3tum,3tun,1y8,1y9,1ya,1yb,1yc,1yd,1ye,1yf,1yg,1yh,1yi,1yj,1yk,1yl,1ym,1yn,1yo,1yp,1yq,1yr,1ys,1yz,1z0,1z1,1z2,1z3,5ao,5ap,6n6o,6n6p,5b6,5b7,5b8,5bf,5bg,5bh,5bi,5bj,25s,25t,25u,25v,25w,263,264,265,266,267,5hs,2cg,5i9,5ia,5ib,5ij,5ik,5il,5im,5in,2cw,2cx,2cy,2cz,2d7,2d8,2d9,2da,2db,5pc,5pd,5pe,5pf,5pm,5pn,5po,5pp,5pq,5pr,2k0,2k1,2k2,2k3,2ka,2kb,2kc,2kd,2ke,2kf,92b,92c,92d,92e,92f,92g,92h,5wu,5wv,4q9c,4q9d,4q9e,4q9f,4q9g,4q9h,4q9i,4q9j,4q9k,4q9l,4q9m,4q9n,4q9o,4q9p,2ri,2rj,2tc,2ts,2tt,2u8,2u9,2ua,2ub,2uc,2up,2uq,2ur,2us,2ut,2v8,2v9,2va,2vp,2vq,2vr,2w6,2w7,2w8,2wn,2wo,2wp,2wq,2x4,2x5,2x6,2x7,630,631,2xm,2xn,2xo,2xp,63i,99c,99d,99e,99f,99g,99h,99i,99j,99k,99l,2y3,2y4,2y5,2y6,63z,3bw0,3bw1,3bw2,3bw3,3bw4,3bw5,3bw6,3bw7,3bw8,3bw9,3bwa,3bwb,3bwc,2yl,2ym,2yn,32y,32z,330,33e,33f,33g,20o0,20o1,20o2,20o3,20o4,20o5,20o6,20o7,20o8,20o9,20oa,20ob,6b2,6b3,iiuo,3c36,isc3,4kc5,4kc6,35j,35l,35m,35n,3c3g,4qnx,35q,35r;1,5,8,1xj5,1xj6,dfk3,paf,1xjl,dfki,pav,1xk0,dfkx,38yv,cqb8,38z9,38za,38zb,38zr,1xq9,1xqa,dfr7,3953,1xqp,dfrm,395j,1xr4,dfs1,395z,cqic,396d,396e,396f,396v,39c0,39c1,39c2,39c3,39c4,39c5,39c6,39c7,39cg,39ch,39ci,39cj,39ck,39cl,39cm,39cn,39cw,39cx,39cy,39cz,39d0,39d1,39d2,39d3,39dc,39dd,39de,39df,39dg,39dh,39di,39dj,39ds,39dt,39du,39dv,39dw,39dx,39dy,39dz,1kx,1s0,1sc,1zh,1zj,2dd,4q2o,4q2p,4q2q,4q2t,4q2u,4q2v,4q2y,4q2z,4q30,4q31,2kv,4q34,4q35,4q36,4q39,4q3a,4q3b,4q3e,4q3f,4q3g,4q3h,4q3k,4q3l,4q3m,4q3n,4q3o,4q3p,4q3q,4q3r,4q3s,4q3t,4q3u,4q3v,4q3w,4q3x,4q40,4q41,4q42,4q43,4q44,4q45,4q46,4q47,4q48,4q49,4q4a,4q4b,4q4c,4q4d,4wg0,4wg1,4wg2,4wg3,4wg4,4wg5,4wg6,4wg7,4wg8,4wg9,4wga,4wgb,4wgc,4wgd,3bpc,3bpd,3bpe,s1v,s1w,3bph,3bpi,3bpj,s20,s21,3bpm,3bpn,3bpo,4qa5,3bps,3bpt,3bpu,s2b,s2c,3bpx,3bpy,3bpz,s2g,s2h,3bq2,3bq3,3bq4,4qal,3bq8,3bq9,3bqa,3bqb,3bqc,3bqd,3bqe,3bqf,3bqg,3bqh,3bqi,3bqj,3bqk,4qb1,ilt,ilu,ily,ilz,im1,im2,im3,4qbh,4wn4,4wn5,4wn6,4wn7,4wn8,4wn9,4wna,4wnb,4wnc,4wnd,4wne,4wnf,4wng,4wnh,3bwi,4k5h,4k5i,3bws,4qh9,4k5x,4k5y,1kpn,3bx8,4qhp,3bxo,4qi5,isw,isx,isy,isz,it0,it1,it2,it3,it4,it5,it6,it7,it8,4qil,4wu8,4wu9,4wua,4wub,4wuc,4wud,4wue,4wuf,4wug,4wuh,4wui,4wuj,4wuk,4wul;1,4,9,3bk,3bl,3bm,6o0,6o1,3io,3ip,3iq,6v4,6v5,6v6,6v7,6v8,6v9,3ps,3pt,3pu,3sgj,3sgk,3sgl,729,72a,72b,72c,72d,72e,3wx,3wy,3snn,3sno,3snp,3snq,3snr,79g,79h,79i,79j,3sur,3sus,3sut,3suu,3suv,4ag,7gl,7gm,7gn,154,3t1v,3t1w,3t1x,3t1y,3t1z,1bm,4hk,1c2,7nq,7nr,1c8,3t8w,3t8x,3t8y,3t8z,3t90,3t91,3t92,3t93,1cw,1cx,1cy,4oo,3tfm,7uu,7uv,1jc,3tg0,3tg1,3tg2,3tg3,3tg4,3tg5,3tg6,3tg7,1k0,1k1,1k2,3tma,4vs,3tmq,81z,1qg,821,3tn4,3tn5,3tn6,3tn7,3tn8,3tn9,3tna,3tnb,3tnc,3tnd,1r4,1r5,1r6,1r7,1rk,3tsy,3tte,52w,3ttu,893,1xk,895,3tu8,3tu9,3tua,3tub,3tuc,3tud,3tue,3tuf,3tug,3tuh,1y8,1y9,1ya,1yb,1yo,1yp,5a0,24o,8g9,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,5b4,5b5,25f,25g,25s,25t,5h4,2bs,8nd,3u8j,3u8k,3u8l,3u8m,3u8n,3u8o,3u8p,5i8,5i9,2cj,2ck,2cw,2cx,5o8,2iw,8uh,3ufn,3ufo,3ufp,3ufq,3ufr,3ufs,3uft,5pc,5pd,5pe,2jn,2jo,2jr,2k0,2k1,2k2,5vc,2q0,91l,3umr,3ums,3umt,3umu,3umv,3umw,3umx,5wg,5wh,2qr,2qs,2qv,2r4,2r5,2v3,2vj,62g,2x4,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,63k,63l,2xv,2xw,2xz,2y8,2y9,323,324,325,326,327,32j,32k,32l,32m,32n,69k,348,3v0z,3v10,3v11,3v12,3v13,3v14,3v15,6ao,6ap,34z,350,353,35c,35d;1,5,9,2dc,2yo;1,4,a,57w,57x,57y,57z,22a,22b,22c,22d,22e,22f,22g,22h,22i,22j,22k,22l,22m,22n,22q,22r,22s,22t,22u,22v,22w,22x,22y,22z,230,231,232,233,237,23n,243,29d,29e,29f,29g,29t,29u,29v,29w,2gg,2gh,2gi,2gj,2gk,2gl,2gw,2gx,2gy,2gz,2h0,2h1,2ng,2nk,2nl,2nm,2nn,2no,2np,2nw,2o0,2o1,2o2,2o3,2o4,2o5,2oc,2os,2uo,2up,2uq,2ur,2us,2ut,2v4,2v5,2v6,2v7,2v8,2v9,31s,31t,31u,31v,31w,328,329,32a,32b,32c;1,4,b,86s,86t,86u,86v,86w,86x,86y,86z,51g,51h,51i,51j,51k,51l,51m,51n,57k,57l,57m,57n,57o,57p,57q,57r,57s,57t,57u,57v,57w,57x,57y,57z,228,229,22a,22b,22c,22d,22e,22f,22g,22h,22i,22j,22k,22l,22m,22n,22o,22p,22q,22r,22x,22y,22z,230,231,232,233,58w,58x,58y,58z,590,591,592,593,594,595,596,597,598,599,59a,59b,8l0,8l1,8l2,8l3,5fo,5fp,5fq,5fr,5u7,2ov;1,4,c,57k,57l,57m,57n,228,229,22a,22b,22c,22d,22e,22f,22g,22h,22i,22j,22k,22l,22m,22n,22o,22p,22q,22r,22s,22t,22u,22v,22w,22x,22y,22z,230,231,232,233,29n,29o,29p,29q,29r,2a3,2a4,2a5,2a6,2a7,2gs,2gt,2gu,2gv,2h8,2h9,2ha,2hb,2nx,2ny,2nz,5ts,2od,2oe,2of,2og,2v2,2v3,60w,2vi,2vj,2vk,327,32n;1,4,d,228,229,22a,22b,22c,22d,22o,22p,22q,22r,22s,22t,29c,29d,29e,29f,29g,29h,29s,29t,29u,29v,29w,29x,2gg,2gh,2gi,2gj,2gk,2gl,2gw,2gx,2gy,2gz,2h0,2h1,2nk,2nl,2nm,2nn,2no,2np,2o0,2o1,2o2,2o3,2o4,2o5,2uo,2up,2uq,2ur,2us,2ut,2v4,2v5,2v6,2v7,2v8,2v9,31s,31t,31u,31v,31w,31x,328,329,32a,32b,32c,32d;1,0,-2,p,q,r,s,t,u,v,15,16,17,18,19,1a,1b,1l,1m,1n,1o,1p,1q,1r,22,23,24,25,26,27,2h,2i,2j,2k,2l,2m,2n,2x,2y,2z,30,31,32,33,3d,3e,3f,3g,3h,3i,3j,3t,3u,3v,3w,3x,3y,3z,49,4a,4b,4c,4d,4e,4f,4p,4q,4r,4s,4t,4u,4v,55,56,57,58,59,5a,5b,7s,7t,7u,7v,7w,7x,7y,7z,88,89,8a,8b,8c,8d,8e,8f,8o,8p,8q,8r,8s,8t,8u,8v,94,95,96,97,98,99,9a,9b,9k,9l,9m,9n,9o,9p,9q,9r,a0,a1,a2,a3,a4,a5,a6,a7,ag,ah,ai,aj,ak,al,am,an,aw,ax,ay,az,b0,b1,b2,b3,bc,bd,be,bf,bg,bh,bi,bj,bs,bt,bu,bv,bw,bx,by,bz,c8,c9,ca,cb,cc,cd,ce,cf,ew,ex,ey,ez,f0,f1,f2,f3,fc,fd,fe,ff,fg,fh,fi,fj,fs,ft,fu,fv,fw,fx,fy,fz,g8,g9,ga,gb,gc,gd,ge,gf,go,gp,gq,gr,gs,gt,gu,gv,h4,h5,h6,h7,h8,h9,ha,hb,hk,hl,hm,hn,ho,hp,hq,hr,i0,i1,i2,i3,i4,i5,i6,i7,ig,ih,ii,ij,ik,il,im,in,iw,ix,iy,iz,j0,j1,j2,j3,jc,jd,je,jf,jg,jh,ji,jj,lz,m0,m1,m2,m3,m4,m5,m6,m7,mf,mg,mh,mi,mj,mk,ml,mm,mn,mv,mw,mx,my,mz,n0,n1,n2,n3,nb,nc,nd,ne,nf,ng,nh,ni,nj,nr,ns,nt,nu,nv,nw,nx,ny,nz,o7,o8,o9,oa,ob,oc,od,oe,of,on,oo,op,oq,or,os,ot,ou,ov,p3,p4,p5,p6,p7,p8,p9,pa,pb,pj,pk,pl,pm,pn,po,pp,pq,pr,pz,q0,q1,q2,q3,q4,q5,q6,q7,qf,qg,qh,qi,qj,qk,ql,qm,qn,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,ti,tj,tk,tl,tm,tn,to,tp,tq,tr,ty,tz,u0,u1,u2,u3,u4,u5,u6,u7,ue,uf,ug,uh,ui,uj,uk,ul,um,un,uu,uv,uw,ux,uy,uz,v0,v1,v2,v3,va,vb,vc,vd,ve,vf,vg,vh,vi,vj,vq,vr,vs,vt,vu,vv,vw,vx,vy,vz,w6,w7,w8,w9,wa,wb,wc,wd,we,wf,wm,wn,wo,wp,wq,wr,ws,wt,wu,wv,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xi,xj,xk,xl,xm,xn,xo,xp,xq,xr,106,107,108,109,10a,10b,10c,10d,10e,10f,10m,10n,10o,10p,10q,10r,10s,10t,10u,10v,112,113,114,115,116,117,118,119,11a,11b,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11y,11z,120,121,122,123,124,125,126,127,12e,12f,12g,12h,12i,12j,12k,12l,12m,12n,12u,12v,12w,12x,12y,12z,130,131,132,133,13a,13b,13c,13d,13e,13f,13g,13h,13i,13j,13q,13r,13s,13t,13u,13v,13w,13x,13y,13z,146,147,148,149,14a,14b,14c,14d,14e,14f,14m,14n,14o,14p,14q,14r,14s,14t,14u,14v,153,154,155,156,179,17a,17b,17c,17d,17e,17f,17g,17h,17i,17j,17p,17q,17r,17s,17t,17u,17v,17w,17x,17y,17z,185,186,187,188,189,18a,18b,18c,18d,18e,18f,18l,18m,18n,18o,18p,18q,18r,18s,18t,18u,18v,191,192,193,194,195,196,197,198,199,19a,19b,19i,19j,19k,19l,19m,19n,19o,19p,19q,19r,19x,19y,19z,1a0,1a1,1a2,1a3,1a4,1a5,1a6,1a7,1ad,1ae,1af,1ag,1ah,1ai,1aj,1ak,1al,1am,1an,1at,1au,1av,1aw,1ax,1ay,1az,1b0,1b1,1b2,1b3,1b9,1ba,1bb,1bc,1bd,1be,1bf,1bg,1bh,1bi,1bj,1bp,1bq,1br,1bs,1bt,1bu,1bv,1bw,1bx,1by,1bz,1c8,1c9,1ca,1cb,1ec,1ed,1ee,1ef,1eg,1eh,1ei,1ej,1ek,1el,1em,1en,1es,1et,1eu,1ev,1ew,1ex,1ey,1ez,1f0,1f1,1f2,1f3,1f8,1fa,1fb,1fc,1fd,1fe,1ff,1fg,1fh,1fi,1fj,1fo,1fp,1fq,1fr,1fs,1ft,1fu,1fv,1fw,1fx,1fy,1fz,1g4,1g5,1g6,1g7,1g8,1g9,1ga,1gb,1gc,1gd,1ge,1gf,1gk,1gl,1gm,1gn,1go,1gp,1gq,1gr,1gs,1gt,1gu,1gv,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,1hw,1hx,1hy,1hz,1i0,1i1,1i2,1i3,1i4,1i5,1i6,1i7,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3,1jd,1je,1lg,1lh,1li,1lj,1lk,1ll,1lm,1ln,1lo,1lp,1lq,1lr,1lw,1lx,1ly,1lz,1m0,1m1,1m2,1m3,1m4,1m5,1m6,1m7,1mc,1md,1me,1mf,1mg,1mh,1mi,1mj,1mk,1ml,1mm,1mn,1ms,1mt,1mu,1mv,1mw,1mx,1my,1mz,1n0,1n1,1n2,1n3,1n8,1n9,1na,1nb,1nc,1nd,1ne,1nf,1ng,1nh,1ni,1nj,1no,1np,1nq,1nr,1ns,1nt,1nu,1nv,1nw,1nx,1ny,1nz,1o4,1o5,1o6,1o7,1o8,1o9,1oa,1ob,1oc,1od,1oe,1of,1ok,1ol,1om,1on,1oo,1op,1oq,1or,1os,1ot,1ou,1ov,1p0,1p1,1p2,1p3,1p4,1p5,1p6,1p7,1p8,1p9,1pa,1pb,1pg,1ph,1pi,1pj,1pk,1pl,1pm,1pn,1po,1pp,1pq,1pr,1pw,1px,1py,1pz,1q0,1q1,1q2,1q3,1q4,1q5,1q6,1q7,1sk,1sl,1sm,1sn,1so,1sp,1sq,1sr,1ss,1st,1su,1sv,1sz,1t0,1t1,1t2,1t3,1t4,1t5,1t6,1t7,1t8,1t9,1ta,1tb,1tf,1tg,1th,1ti,1tj,1tk,1tl,1tm,1tn,1to,1tp,1tq,1tr,1tv,1tw,1tx,1ty,1tz,1u0,1u1,1u2,1u3,1u4,1u5,1u6,1u7,1ub,1uc,1ud,1ue,1uf,1ug,1uh,1ui,1uj,1uk,1ul,1um,1un,1ur,1us,1ut,1uu,1uv,1uw,1ux,1uy,1uz,1v0,1v1,1v2,1v3,1v7,1v8,1v9,1va,1vb,1vc,1vd,1ve,1vf,1vg,1vh,1vi,1vj,1vo,1vp,1vq,1vr,1vs,1vt,1vu,1vv,1vw,1vx,1vy,1vz,1w3,1w4,1w5,1w6,1w7,1w8,1w9,1wa,1wb,1wc,1wd,1we,1wf,1wj,1wk,1wl,1wm,1wn,1wo,1wp,1wq,1wr,1ws,1wt,1wu,1wv,1x0,1x1,1x2,1x3,1x4,1x5,1x6,1x7,1x8,1x9,1xa,1xb,1zn,1zo,1zp,1zq,1zr,1zs,1zt,1zu,1zv,1zw,1zx,1zy,1zz,203,204,205,206,207,208,209,20a,20b,20c,20d,20e,20f,20j,20k,20l,20m,20n,20o,20p,20q,20r,20s,20t,20u,20v,20z,210,211,212,213,214,215,216,217,218,219,21a,21b,21f,21g,21h,21i,21j,21k,21l,21m,21n,21o,21p,21q,21r,21v,21w,21x,21y,21z,220,221,222,223,224,225,226,227,22b,22c,22d,22e,22f,22g,22h,22i,22j,22k,22l,22m,22n,22r,22s,22t,22u,22v,22w,22x,22y,22z,230,231,232,233,237,238,239,23a,23b,23c,23d,23e,23f,23g,23h,23i,23j,23n,23o,23p,23q,23r,23s,23t,23u,23v,23w,23x,23y,23z,243,244,245,246,247,248,249,24a,24b,24c,24d,24e,24f,26r,26s,26t,26u,26v,26w,26x,26y,26z,270,271,272,273,277,278,279,27a,27b,27c,27d,27e,27f,27g,27h,27i,27j,27n,27o,27p,27q,27r,27s,27t,27u,27v,27w,27x,27y,27z,283,284,285,286,287,288,289,28a,28b,28c,28d,28e,28f,28j,28k,28l,28m,28n,28o,28p,28q,28r,28s,28t,28u,28v,28z,290,291,292,293,294,295,296,297,298,299,29a,29b,29f,29g,29h,29i,29j,29k,29l,29m,29n,29o,29p,29q,29r,29v,29w,29x,29y,29z,2a0,2a1,2a2,2a3,2a4,2a5,2a6,2a7,2ab,2ac,2ad,2ae,2af,2ag,2ah,2ai,2aj,2ak,2al,2am,2an,2ar,2as,2at,2au,2av,2aw,2ax,2ay,2az,2b0,2b1,2b2,2b3,2b7,2b8,2b9,2ba,2bb,2bc,2bd,2be,2bf,2bg,2bh,2bi,2bj,2du,2dv,2dw,2dx,2dy,2dz,2e0,2e1,2e2,2e3,2e4,2e5,2e6,2e7,2ea,2eb,2ec,2ed,2ee,2ef,2eg,2eh,2ei,2ej,2ek,2el,2em,2en,2eq,2er,2es,2et,2eu,2ev,2ew,2ex,2ey,2ez,2f0,2f1,2f2,2f3,2f6,2f7,2f8,2f9,2fa,2fb,2fc,2fd,2fe,2ff,2fg,2fh,2fi,2fj,2fm,2fn,2fo,2fp,2fq,2fr,2fs,2ft,2fu,2fv,2fw,2fx,2fy,2fz,2g2,2g3,2g4,2g5,2g6,2g7,2g8,2g9,2ga,2gb,2gc,2gd,2ge,2gf,2gi,2gj,2gk,2gl,2gm,2gn,2go,2gp,2gq,2gr,2gs,2gt,2gu,2gv,2gy,2gz,2h0,2h1,2h2,2h3,2h4,2h5,2h6,2h7,2h8,2h9,2ha,2hb,2he,2hf,2hg,2hh,2hi,2hj,2hk,2hl,2hm,2hn,2ho,2hp,2hq,2hr,2hu,2hv,2hw,2hx,2hy,2hz,2i0,2i1,2i2,2i3,2i4,2i5,2i6,2i7,2ia,2ib,2ic,2id,2ie,2if,2ig,2ih,2ii,2ij,2ik,2il,2im,2in,2ky,2kz,2l0,2l1,2l2,2l3,2l4,2l5,2l6,2l7,2l8,2l9,2la,2lb,2le,2lf,2lg,2lh,2li,2lj,2lk,2ll,2lm,2ln,2lo,2lp,2lq,2lr,2lu,2lv,2lw,2lx,2ly,2lz,2m0,2m1,2m2,2m3,2m4,2m5,2m6,2m7,2ma,2mb,2mc,2md,2me,2mf,2mg,2mh,2mi,2mj,2mk,2ml,2mm,2mn,2mq,2mr,2ms,2mt,2mu,2mv,2mw,2mx,2my,2mz,2n0,2n1,2n2,2n3,2n6,2n7,2n8,2n9,2na,2nb,2nc,2nd,2ne,2nf,2ng,2nh,2ni,2nj,2nm,2nn,2no,2np,2nq,2nr,2ns,2nt,2nu,2nv,2nw,2nx,2ny,2nz,2o2,2o3,2o4,2o5,2o6,2o7,2o8,2o9,2oa,2ob,2oc,2od,2oe,2of,2oi,2oj,2ok,2ol,2om,2on,2oo,2op,2oq,2or,2os,2ot,2ou,2ov,2oy,2oz,2p0,2p1,2p2,2p3,2p4,2p5,2p6,2p7,2p8,2p9,2pa,2pb,2pe,2pf,2pg,2ph,2pi,2pj,2pk,2pl,2pm,2pn,2po,2pp,2pq,2pr,2s2,2s3,2s4,2s5,2s6,2s7,2s8,2s9,2sa,2sb,2sc,2sd,2se,2sf,2si,2sj,2sk,2sl,2sm,2sn,2so,2sp,2sq,2sr,2ss,2st,2su,2sv,2sy,2sz,2t0,2t1,2t2,2t3,2t4,2t5,2t6,2t7,2t8,2t9,2ta,2tb,2te,2tf,2tg,2th,2ti,2tj,2tk,2tl,2tm,2tn,2to,2tp,2tq,2tr,2tu,2tv,2tw,2tx,2ty,2tz,2u0,2u1,2u2,2u3,2u4,2u5,2u6,2u7,2ua,2ub,2uc,2ud,2ue,2uf,2ug,2uh,2ui,2uj,2uk,2ul,2um,2un,2uq,2ur,2us,2ut,2uu,2uv,2uw,2ux,2uy,2uz,2v0,2v1,2v2,2v3,2v6,2v7,2v8,2v9,2va,2vb,2vc,2vd,2ve,2vf,2vg,2vh,2vi,2vj,2vm,2vn,2vo,2vp,2vq,2vr,2vs,2vt,2vu,2vv,2vw,2vx,2vy,2vz,2w2,2w3,2w4,2w5,2w6,2w7,2w8,2w9,2wa,2wb,2wc,2wd,2we,2wf,2wi,2wj,2wk,2wl,2wm,2wn,2wo,2wp,2wq,2wr,2ws,2wt,2wu,2wv,2z6,2z7,2z8,2z9,2za,2zb,2zc,2zd,2ze,2zf,2zg,2zh,2zi,2zj,2zm,2zn,2zo,2zp,2zq,2zr,2zs,2zt,2zu,2zv,2zw,2zx,2zy,2zz,302,303,304,305,306,307,308,309,30a,30b,30c,30d,30e,30f,30i,30j,30k,30l,30m,30n,30o,30p,30q,30r,30s,30t,30u,30v,30y,30z,310,311,312,313,314,315,316,317,318,319,31a,31b,31e,31f,31g,31h,31i,31j,31k,31l,31m,31n,31o,31p,31q,31r,31u,31v,31w,31x,31y,31z,320,321,322,323,324,325,326,327,32a,32b,32c,32d,32e,32f,32g,32h,32i,32j,32k,32l,32m,32n,32q,32r,32s,32t,32u,32v,32w,32x,32y,32z,330,331,332,333,336,337,338,339,33a,33b,33c,33d,33e,33f,33g,33h,33i,33j,33m,33n,33o,33p,33q,33r,33s,33t,33u,33v,33w,33x,33y,33z;1,0,-1,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,10,11,12,13,14,15,16,17,18,19,1a,1b,1c,1d,1e,1f,1g,1h,1i,1j,1k,1l,1m,1n,1o,1p,1q,1r,1s,1t,1u,1v,1w,1x,1y,1z,20,21,22,23,24,25,26,27,28,29,2a,2b,2c,2d,2e,2f,2g,2h,2i,2j,2k,2l,2m,2n,2o,2p,2q,2r,2s,2t,2u,2v,2w,2x,2y,2z,30,31,32,33,34,35,36,37,38,39,3a,3b,3c,3d,3e,3f,3g,3h,3i,3j,3k,3l,3m,3n,3o,3p,3q,3r,3s,3t,3u,3v,3w,3x,3y,3z,40,41,42,43,44,45,46,47,48,49,4a,4b,4c,4d,4e,4f,4g,4h,4i,4j,4k,4l,4m,4n,4o,4p,4q,4r,4s,4t,4u,4v,4w,4x,4y,4z,50,51,52,53,54,55,56,57,58,59,5a,5b,7k,7l,7m,7n,7o,7p,7q,7r,7s,7t,7u,7v,7w,7x,7y,7z,80,81,82,83,84,85,86,87,88,89,8a,8b,8c,8d,8e,8f,8g,8h,8i,8j,8k,8l,8m,8n,8o,8p,8q,8r,8s,8t,8u,8v,8w,8x,8y,8z,90,91,92,93,94,95,96,97,98,99,9a,9b,9c,9d,9e,9f,9g,9h,9i,9j,9k,9l,9m,9n,9o,9p,9q,9r,9s,9t,9u,9v,9w,9x,9y,9z,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,ca,cb,cc,cd,ce,cf,eo,ep,eq,er,es,et,eu,ev,ew,ex,ey,ez,f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,fa,fb,fc,fd,fe,ff,fg,fh,fi,fj,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,g0,g1,g2,g3,g4,g5,g6,g7,g8,g9,ga,gb,gc,gd,ge,gf,gg,gh,gi,gj,gk,gl,gm,gn,go,gp,gq,gr,gs,gt,gu,gv,gw,gx,gy,gz,h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,ha,hb,hc,hd,he,hf,hg,hh,hi,hj,hk,hl,hm,hn,ho,hp,hq,hr,hs,ht,hu,hv,hw,hx,hy,hz,i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,ia,ib,ic,id,ie,if,ig,ih,ii,ij,ik,il,im,in,io,ip,iq,ir,is,it,iu,iv,iw,ix,iy,iz,j0,j1,j2,j3,j4,j5,j6,j7,j8,j9,ja,jb,jc,jd,je,jf,jg,jh,ji,jj,ls,lt,lu,lv,lw,lx,ly,lz,m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,ma,mb,mc,md,me,mf,mg,mh,mi,mj,mk,ml,mm,mn,mo,mp,mq,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,na,nb,nc,nd,ne,nf,ng,nh,ni,nj,nk,nl,nm,nn,no,np,nq,nr,ns,nt,nu,nv,nw,nx,ny,nz,o0,o1,o2,o3,o4,o5,o6,o7,o8,o9,oa,ob,oc,od,oe,of,og,oh,oi,oj,ok,ol,om,on,oo,op,oq,or,os,ot,ou,ov,ow,ox,oy,oz,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,pa,pb,pc,pd,pe,pf,pg,ph,pi,pj,pk,pl,pm,pn,po,pp,pq,pr,ps,pt,pu,pv,pw,px,py,pz,q0,q1,q2,q3,q4,q5,q6,q7,q8,q9,qa,qb,qc,qd,qe,qf,qg,qh,qi,qj,qk,ql,qm,qn,sw,sx,sy,sz,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc,td,te,tf,tg,th,ti,tj,tk,tl,tm,tn,to,tp,tq,tr,ts,tt,tu,tv,tw,tx,ty,tz,u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,ua,ub,uc,ud,ue,uf,ug,uh,ui,uj,uk,ul,um,un,uo,up,uq,ur,us,ut,uu,uv,uw,ux,uy,uz,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,va,vb,vc,vd,ve,vf,vg,vh,vi,vj,vk,vl,vm,vn,vo,vp,vq,vr,vs,vt,vu,vv,vw,vx,vy,vz,w0,w1,w2,w3,w4,w5,w6,w7,w8,w9,wa,wb,wc,wd,we,wf,wg,wh,wi,wj,wk,wl,wm,wn,wo,wp,wq,wr,ws,wt,wu,wv,ww,wx,wy,wz,x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,xg,xh,xi,xj,xk,xl,xm,xn,xo,xp,xq,xr,100,101,102,103,104,105,106,107,108,109,10a,10b,10c,10d,10e,10f,10g,10h,10i,10j,10k,10l,10m,10n,10o,10p,10q,10r,10s,10t,10u,10v,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11a,11b,11c,11d,11e,11f,11g,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11s,11t,11u,11v,11w,11x,11y,11z,120,121,122,123,124,125,126,127,128,129,12a,12b,12c,12d,12e,12f,12g,12h,12i,12j,12k,12l,12m,12n,12o,12p,12q,12r,12s,12t,12u,12v,12w,12x,12y,12z,130,131,132,133,134,135,136,137,138,139,13a,13b,13c,13d,13e,13f,13g,13h,13i,13j,13k,13l,13m,13n,13o,13p,13q,13r,13s,13t,13u,13v,13w,13x,13y,13z,140,141,142,143,144,145,146,147,148,149,14a,14b,14c,14d,14e,14f,14g,14h,14i,14j,14k,14l,14m,14n,14o,14p,14q,14r,14s,14t,14u,14v,174,175,176,177,178,179,17a,17b,17c,17d,17e,17f,17g,17h,17i,17j,17k,17l,17m,17n,17o,17p,17q,17r,17s,17t,17u,17v,17w,17x,17y,17z,180,181,182,183,184,185,186,187,188,189,18a,18b,18c,18d,18e,18f,18g,18h,18i,18j,18k,18l,18m,18n,18o,18p,18q,18r,18s,18t,18u,18v,18w,18x,18y,18z,190,191,192,193,194,195,196,197,198,199,19a,19b,19c,19d,19e,19f,19g,19h,19i,19j,19k,19l,19m,19n,19o,19p,19q,19r,19s,19t,19u,19v,19w,19x,19y,19z,1a0,1a1,1a2,1a3,1a4,1a5,1a6,1a7,1a8,1a9,1aa,1ab,1ac,1ad,1ae,1af,1ag,1ah,1ai,1aj,1ak,1al,1am,1an,1ao,1ap,1aq,1ar,1as,1at,1au,1av,1aw,1ax,1ay,1az,1b0,1b1,1b2,1b3,1b4,1b5,1b6,1b7,1b8,1b9,1ba,1bb,1bc,1bd,1be,1bf,1bg,1bh,1bi,1bj,1bk,1bl,1bm,1bn,1bo,1bp,1bq,1br,1bs,1bt,1bu,1bv,1bw,1bx,1by,1bz,1e8,1e9,1ea,1eb,1ec,1ed,1ee,1ef,1eg,1eh,1ei,1ej,1ek,1el,1em,1en,1eo,1ep,1eq,1er,1es,1et,1eu,1ev,1ew,1ex,1ey,1ez,1f0,1f1,1f2,1f3,1f4,1f5,1f6,1f7,1f8,1f9,1fa,1fb,1fc,1fd,1fe,1ff,1fg,1fh,1fi,1fj,1fk,1fl,1fm,1fn,1fo,1fp,1fq,1fr,1fs,1ft,1fu,1fv,1fw,1fx,1fy,1fz,1g0,1g1,1g2,1g3,1g4,1g5,1g6,1g7,1g8,1g9,1ga,1gb,1gc,1gd,1ge,1gf,1gg,1gh,1gi,1gj,1gk,1gl,1gm,1gn,1go,1gp,1gq,1gr,1gs,1gt,1gu,1gv,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,1hs,1ht,1hu,1hv,1hw,1hx,1hy,1hz,1i0,1i1,1i2,1i3,1i4,1i5,1i6,1i7,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3,1lc,1ld,1le,1lf,1lg,1lh,1li,1lj,1lk,1ll,1lm,1ln,1lo,1lp,1lq,1lr,1ls,1lt,1lu,1lv,1lw,1lx,1ly,1lz,1m0,1m1,1m2,1m3,1m4,1m5,1m6,1m7,1m8,1m9,1ma,1mb,1mc,1md,1me,1mf,1mg,1mh,1mi,1mj,1mk,1ml,1mm,1mn,1mo,1mp,1mq,1mr,1ms,1mt,1mu,1mv,1mw,1mx,1my,1mz,1n0,1n1,1n2,1n3,1n4,1n5,1n6,1n7,1n8,1n9,1na,1nb,1nc,1nd,1ne,1nf,1ng,1nh,1ni,1nj,1nk,1nl,1nm,1nn,1no,1np,1nq,1nr,1ns,1nt,1nu,1nv,1nw,1nx,1ny,1nz,1o0,1o1,1o2,1o3,1o4,1o5,1o6,1o7,1o8,1o9,1oa,1ob,1oc,1od,1oe,1of,1og,1oh,1oi,1oj,1ok,1ol,1om,1on,1oo,1op,1oq,1or,1os,1ot,1ou,1ov,1ow,1ox,1oy,1oz,1p0,1p1,1p2,1p3,1p4,1p5,1p6,1p7,1p8,1p9,1pa,1pb,1pc,1pd,1pe,1pf,1pg,1ph,1pi,1pj,1pk,1pl,1pm,1pn,1po,1pp,1pq,1pr,1ps,1pt,1pu,1pv,1pw,1px,1py,1pz,1q0,1q1,1q2,1q3,1q4,1q5,1q6,1q7,1r3,1sg,1sh,1si,1sj,1sk,1sl,1sm,1sn,1so,1sp,1sq,1sr,1ss,1st,1su,1sv,1sw,1sx,1sy,1sz,1t0,1t1,1t2,1t3,1t4,1t5,1t6,1t7,1t8,1t9,1ta,1tb,1tc,1td,1te,1tf,1tg,1th,1ti,1tj,1tk,1tl,1tm,1tn,1to,1tp,1tq,1tr,1ts,1tt,1tu,1tv,1tw,1tx,1ty,1tz,1u0,1u1,1u2,1u3,1u4,1u5,1u6,1u7,1u8,1u9,1ua,1ub,1uc,1ud,1ue,1uf,1ug,1uh,1ui,1uj,1uk,1ul,1um,1un,1uo,1up,1uq,1ur,1us,1ut,1uu,1uv,1uw,1ux,1uy,1uz,1v0,1v1,1v2,1v3,1v4,1v5,1v6,1v7,1v8,1v9,1va,1vb,1vc,1vd,1ve,1vf,1vg,1vh,1vi,1vj,1vk,1vl,1vm,1vn,1vo,1vp,1vq,1vr,1vs,1vt,1vu,1vv,1vw,1vx,1vy,1vz,1w0,1w1,1w2,1w3,1w4,1w5,1w6,1w7,1w8,1w9,1wa,1wb,1wc,1wd,1we,1wf,1wg,1wh,1wi,1wj,1wk,1wl,1wm,1wn,1wo,1wp,1wq,1wr,1ws,1wt,1wu,1wv,1ww,1wx,1wy,1wz,1x0,1x1,1x2,1x3,1x4,1x5,1x6,1x7,1x8,1x9,1xa,1xb,1xr,1y7,1zk,1zl,1zm,1zn,1zo,1zp,1zq,1zr,1zs,1zt,1zu,1zv,1zw,1zx,1zy,1zz,200,201,202,203,204,205,206,207,208,209,20a,20b,20c,20d,20e,20f,20g,20h,20i,20j,20k,20l,20m,20n,20o,20p,20q,20r,20s,20t,20u,20v,20w,20x,20y,20z,210,211,212,213,214,215,216,217,218,219,21a,21b,21c,21d,21e,21f,21g,21h,21i,21j,21k,21l,21m,21n,21o,21p,21q,21r,21s,21t,21u,21v,21w,21x,21y,21z,220,221,222,223,224,225,226,227,228,229,22a,22b,22c,22d,22e,22f,22g,22h,22i,22j,22k,22l,22m,22n,22o,22p,22q,22r,22s,22t,22u,22v,22w,22x,22y,22z,230,231,232,233,234,235,236,237,238,239,23a,23b,23c,23d,23e,23f,23g,23h,23i,23j,23k,23l,23m,23n,23o,23p,23q,23r,23s,23t,23u,23v,23w,23x,23y,23z,240,241,242,243,244,245,246,247,248,249,24a,24b,24c,24d,24e,24f,24v,25b,26o,26p,26q,26r,26s,26t,26u,26v,26w,26x,26y,26z,270,271,272,273,274,275,276,277,278,279,27a,27b,27c,27d,27e,27f,27g,27h,27i,27j,27k,27l,27m,27n,27o,27p,27q,27r,27s,27t,27u,27v,27w,27x,27y,27z,280,281,282,283,284,285,286,287,288,289,28a,28b,28c,28d,28e,28f,28g,28h,28i,28j,28k,28l,28m,28n,28o,28p,28q,28r,28s,28t,28u,28v,28w,28x,28y,28z,290,291,292,293,294,295,296,297,298,299,29a,29b,29c,29d,29e,29f,29g,29h,29i,29j,29k,29l,29m,29n,29o,29p,29q,29r,29s,29t,29u,29v,29w,29x,29y,29z,2a0,2a1,2a2,2a3,2a4,2a5,2a6,2a7,2a8,2a9,2aa,2ab,2ac,2ad,2ae,2af,2ag,2ah,2ai,2aj,2ak,2al,2am,2an,2ao,2ap,2aq,2ar,2as,2at,2au,2av,2aw,2ax,2ay,2az,2b0,2b1,2b2,2b3,2b4,2b5,2b6,2b7,2b8,2b9,2ba,2bb,2bc,2bd,2be,2bf,2bg,2bh,2bi,2bj,2bz,2ds,2dt,2du,2dv,2dw,2dx,2dy,2dz,2e0,2e1,2e2,2e3,2e4,2e5,2e6,2e7,2e8,2e9,2ea,2eb,2ec,2ed,2ee,2ef,2eg,2eh,2ei,2ej,2ek,2el,2em,2en,2eo,2ep,2eq,2er,2es,2et,2eu,2ev,2ew,2ex,2ey,2ez,2f0,2f1,2f2,2f3,2f4,2f5,2f6,2f7,2f8,2f9,2fa,2fb,2fc,2fd,2fe,2ff,2fg,2fh,2fi,2fj,2fk,2fl,2fm,2fn,2fo,2fp,2fq,2fr,2fs,2ft,2fu,2fv,2fw,2fx,2fy,2fz,2g0,2g1,2g2,2g3,2g4,2g5,2g6,2g7,2g8,2g9,2ga,2gb,2gc,2gd,2ge,2gf,2gg,2gh,2gi,2gj,2gk,2gl,2gm,2gn,2go,2gp,2gq,2gr,2gs,2gt,2gu,2gv,2gw,2gx,2gy,2gz,2h0,2h1,2h2,2h3,2h4,2h5,2h6,2h7,2h8,2h9,2ha,2hb,2hc,2hd,2he,2hf,2hg,2hh,2hi,2hj,2hk,2hl,2hm,2hn,2ho,2hp,2hq,2hr,2hs,2ht,2hu,2hv,2hw,2hx,2hy,2hz,2i0,2i1,2i2,2i3,2i4,2i5,2i6,2i7,2i8,2i9,2ia,2ib,2ic,2id,2ie,2if,2ig,2ih,2ii,2ij,2ik,2il,2im,2in,2j3,2kw,2kx,2ky,2kz,2l0,2l1,2l2,2l3,2l4,2l5,2l6,2l7,2l8,2l9,2la,2lb,2lc,2ld,2le,2lf,2lg,2lh,2li,2lj,2lk,2ll,2lm,2ln,2lo,2lp,2lq,2lr,2ls,2lt,2lu,2lv,2lw,2lx,2ly,2lz,2m0,2m1,2m2,2m3,2m4,2m5,2m6,2m7,2m8,2m9,2ma,2mb,2mc,2md,2me,2mf,2mg,2mh,2mi,2mj,2mk,2ml,2mm,2mn,2mo,2mp,2mq,2mr,2ms,2mt,2mu,2mv,2mw,2mx,2my,2mz,2n0,2n1,2n2,2n3,2n4,2n5,2n6,2n7,2n8,2n9,2na,2nb,2nc,2nd,2ne,2nf,2ng,2nh,2ni,2nj,2nk,2nl,2nm,2nn,2no,2np,2nq,2nr,2ns,2nt,2nu,2nv,2nw,2nx,2ny,2nz,2o0,2o1,2o2,2o3,2o4,2o5,2o6,2o7,2o8,2o9,2oa,2ob,2oc,2od,2oe,2of,2og,2oh,2oi,2oj,2ok,2ol,2om,2on,2oo,2op,2oq,2or,2os,2ot,2ou,2ov,2ow,2ox,2oy,2oz,2p0,2p1,2p2,2p3,2p4,2p5,2p6,2p7,2p8,2p9,2pa,2pb,2pc,2pd,2pe,2pf,2pg,2ph,2pi,2pj,2pk,2pl,2pm,2pn,2po,2pp,2pq,2pr,2q7,2s0,2s1,2s2,2s3,2s4,2s5,2s6,2s7,2s8,2s9,2sa,2sb,2sc,2sd,2se,2sf,2sg,2sh,2si,2sj,2sk,2sl,2sm,2sn,2so,2sp,2sq,2sr,2ss,2st,2su,2sv,2sw,2sx,2sy,2sz,2t0,2t1,2t2,2t3,2t4,2t5,2t6,2t7,2t8,2t9,2ta,2tb,2tc,2td,2te,2tf,2tg,2th,2ti,2tj,2tk,2tl,2tm,2tn,2to,2tp,2tq,2tr,2ts,2tt,2tu,2tv,2tw,2tx,2ty,2tz,2u0,2u1,2u2,2u3,2u4,2u5,2u6,2u7,2u8,2u9,2ua,2ub,2uc,2ud,2ue,2uf,2ug,2uh,2ui,2uj,2uk,2ul,2um,2un,2uo,2up,2uq,2ur,2us,2ut,2uu,2uv,2uw,2ux,2uy,2uz,2v0,2v1,2v2,2v3,2v4,2v5,2v6,2v7,2v8,2v9,2va,2vb,2vc,2vd,2ve,2vf,2vg,2vh,2vi,2vj,2vk,2vl,2vm,2vn,2vo,2vp,2vq,2vr,2vs,2vt,2vu,2vv,2vw,2vx,2vy,2vz,2w0,2w1,2w2,2w3,2w4,2w5,2w6,2w7,2w8,2w9,2wa,2wb,2wc,2wd,2we,2wf,2wg,2wh,2wi,2wj,2wk,2wl,2wm,2wn,2wo,2wp,2wq,2wr,2ws,2wt,2wu,2wv,2yk,2z4,2z5,2z6,2z7,2z8,2z9,2za,2zb,2zc,2zd,2ze,2zf,2zg,2zh,2zi,2zj,2zk,2zl,2zm,2zn,2zo,2zp,2zq,2zr,2zs,2zt,2zu,2zv,2zw,2zx,2zy,2zz,300,301,302,303,304,305,306,307,308,309,30a,30b,30c,30d,30e,30f,30g,30h,30i,30j,30k,30l,30m,30n,30o,30p,30q,30r,30s,30t,30u,30v,30w,30x,30y,30z,310,311,312,313,314,315,316,317,318,319,31a,31b,31c,31d,31e,31f,31g,31h,31i,31j,31k,31l,31m,31n,31o,31p,31q,31r,31s,31t,31u,31v,31w,31x,31y,31z,320,321,322,323,324,325,326,327,328,329,32a,32b,32c,32d,32e,32f,32g,32h,32i,32j,32k,32l,32m,32n,32o,32p,32q,32r,32s,32t,32u,32v,32w,32x,32y,32z,330,331,332,333,334,335,336,337,338,339,33a,33b,33c,33d,33e,33f,33g,33h,33i,33j,33k,33l,33m,33n,33o,33p,33q,33r,33s,33t,33u,33v,33w,33x,33y,33z,34s,358,35o;1,1,-1,2kr,2l7,2rv,2rw,2z0;1,4,-c,36,38,39,3m,3o,3p,3t,3u,3v,49,4a,4b,aa,ac,aq,ar,as,ay,az,be,bf,bu,bv,6nq,6nr,6ns,6nt,3ie,3if,3ig,3ih,he,hf,hg,hu,hv,hw,3ns,3nt,i2,i3,3o7,ig,ih,ii,ij,3om,iv,iw,ix,iy,iz,ja,jb,jc,jd,3pk,3pl,oi,oj,ok,oy,oz,p0,3uw,3ux,3uy,3uz,3vb,pk,pl,pm,pn,3vq,pz,q0,q1,q2,q3,qe,qf,qg,qh,3wo,3wp,vm,vn,vo,w2,w3,w4,41z,420,421,422,423,wn,wo,wp,wq,wr,42u,x3,x4,x5,x6,xi,xj,xk,xl,43s,79l,12q,12r,12s,136,137,138,7g6,7g7,7g8,7g9,4au,4av,4aw,4ax,19v,19w,1ab,1ac,1gz,1h0,1hf,1hg,1o3,1o4,1oj,1ok,1v7,1v8,1vn,1vo,57n,57o,22b,22c,22r,22s,5er,5es,29f,29g,29v,29w,5lv,5lw,2gj,2gk,2gz,2h0,5sz,5t0,2nn,2no,2o3,2o4,8zp,8zq,5uc,5ud,5ue,603,604,2ur,2us,2v7,2v8,96t,96u,96v,96w,96x,96y,96z,61g,61h,61i,1nrr,1nrs,1nrt,1nru,1nrv,677,678,31v,31w,32b,32c,9dx,9dy,9dz,9e0,9e1,32i,9e3,9e4,9e5,68j,68k,1nyt,1nyu,1nyv,1nyw,1nyx,1nyy,1nyz,1nz0,1nz1;2,0,0,10g,10w,10x,11c,11d,11e,11s,11t,11u,11v,129,12a,12b,12c,12q,12r,12s,12t,137,138,139,13a,13o,13p,13q,13r,145,146,147,148,14m,14n,14o,14p,153,154,155,156,15k,15l,15m,15n,161,162,163,164,16i,16j,16k,16l;2,1,0,zv,zw,zx,zy,10c,10d,10e,10f,10t,10u,10v,11a,11b,11r;2,4,0,3v60,3v61,3v62,3v63,3v64,3v65,3v66,3v67,6fo,6fp,6fq,3v6f,3v6g,3v6h,3v6i,3v6j,3v6k,3v6l,3v6m,3v6n,3v6s,3v6t,3v6u,3v6v,3v6w,3v6x,3v6y,3v6z,3v70,3v71,6gf,392s,392t,392u,392v,392w,392x,392y,392z,20u7,3938,3939,393a,393b,393c,393d,393e,393f,20un,393o,393p,393q,393r,393s,393t,393u,393v,mak,mal,20v3,3944,3945,3946,3947,3948,3949,394a,394b,mb2,mb3,394k,ph1,394m,394n,394o,394p,394q,394r,mbj,210d,210t,2119,211p,mho,2125,mi5,3nq,ie,mos,14d,4fa1,4fa2,4fa3,4fa4,4fa5,4fa6,4fa7,4fag,4fah,4fai,4faj,4fak,4fal,4fam,4fan,4fat,4fau,4fav,4faw,4fax,4fay,4faz,4fb0,4fb1,4fb2,4fb3,qkh,4fb9,4fba,4fbb,qkx,4fgp,4fgq,4fgr,4fgs,4fgt,4fgu,4fgv,tw1,4fh4,1g9,1ga,1gb,1gc,1gd,1ge,1gf,twg,twh,4ma,4mb,4mc,4md,4me,4fhj,1go,1gp,1gq,1gr,1gs,1gt,1gu,1gv,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,4fij,4fik,4fil,4fim,4fin,qs1,qs2,qs3,qs4,qs5,qs6,qs7,qs8,qs9,qsa,qsb,qsc,1ls,1lt,1lu,1lv,1lw,1lx,1ly,1lz,1m0,1m1,1m2,1m3,1m4,1m5,1m6,1m7,1m8,1m9,1ma,1mb,1mc,1md,1me,1mf,1mg,1mh,1mi,1mj,1mk,1ml,1mm,1mn,1mo,1mp,1mq,1mr,1ms,1mt,1mu,1mv,1mw,1mx,1my,1mz,1n0,1n1,1n2,1n3,1n4,1n5,1n6,1n7,1n8,1n9,1na,1nb,1nc,4fo9,4foa,4fob,4foc,4fod,4foe,4fof,4foo,4fop,4foq,4for,4fos,4fot,4fou,4fov,4fp2,4fp3,4fp4,4fp5,4fp6,4fp7,4fp8,4fp9,4fpa,4fpb,1og,qyp,qz5,8f2,8f3,3u0e,3u0f,8m6,8m7,3u7i,3u7j,8ta,3uem,3uen,3ulq,3ulr,2pr,3usu,3usv,2wv,3uzy,3uzz,33y;2,5,0,cn8,cn9,cna,cnb,cnc,cnd,cne,cnf,cnp,38ye,38yf,38yg,38yh,cnu,co6,38yv,38yw,co9,con,coo;2,0,1,j,k,l,m,n,o,p,q,r,s,z,10,11,12,13,14,15,16,17,18,19,1f,1g,1h,1i,1j,1k,1l,1m,1n,1o,1v,1w,1x,1y,1z,20,21,22,23,24,25,2b,2c,2d,2e,2f,2g,2h,2i,2j,2k,2l,2r,2s,2t,2u,2v,2w,2x,2y,2z,30,38,39,3a,3b,3c,3d,3e,3f,3g,3o,3p,3q,3r,3s,3t,3u,3v,3w,48,49,4a,4b,7n,7o,7p,7q,7r,7s,7t,7u,7v,7w,7x,83,84,85,86,87,88,89,8a,8b,8c,8d,8j,8k,8l,8m,8n,8o,8p,8q,8r,8s,8t,8z,90,91,92,93,94,95,96,97,98,99,9f,9g,9h,9i,9j,9k,9l,9m,9n,9o,9p,9v,9w,9x,9y,9z,a0,a1,a2,a3,a4,a5,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,as,at,au,av,aw,ax,ay,az,b0,b9,ba,bb,bc,bd,be,bf,bq,br,bs,bt,er,es,et,eu,ev,ew,ex,ey,ez,f0,f1,f7,f8,f9,fa,fb,fc,fd,fe,ff,fg,fh,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,g3,g4,g5,g6,g7,g8,g9,ga,gb,gc,gd,gj,gk,gl,gm,gn,go,gp,gq,gr,gs,gt,gz,h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,hf,hg,hh,hi,hj,hk,hl,hm,hn,ho,hp,hw,hx,hy,hz,i0,i1,i2,i3,i4,id,ie,if,ig,ih,ii,ij,iu,iv,iw,ix,iy,jc,js,k8,ko,l4,lv,lw,lx,ly,lz,m0,m1,m2,m3,m4,m5,mb,mc,md,me,mf,mg,mh,mi,mj,mk,ml,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n7,n8,n9,na,nb,nc,nd,ne,nf,ng,nh,nn,no,np,nq,nr,ns,nt,nu,nv,nw,nx,o3,o4,o5,o6,o7,o8,o9,oa,ob,oc,od,oj,ok,ol,om,on,oo,op,oq,or,os,p0,p1,p2,p3,p4,p5,p6,p7,p8,pi,pj,pk,pl,pm,pn,py,pz,q0,q1,q2,sz,t0,t1,t2,t3,t4,t5,t6,t7,t8,tf,tg,th,ti,tj,tk,tl,tm,tn,to,tv,tw,tx,ty,tz,u0,u1,u2,u3,u4,ub,uc,ud,ue,uf,ug,uh,ui,uj,uk,ur,us,ut,uu,uv,uw,ux,uy,uz,v0,v1,v7,v8,v9,va,vb,vc,vd,ve,vf,vg,vh,vn,vo,vp,vq,vr,vs,vt,vu,vv,vw,w4,w5,w6,w7,w8,w9,wa,wb,wc,wm,wn,wo,wp,wq,wr,x3,x5,104,105,106,107,108,109,10a,10b,10c,10k,10l,10m,10n,10o,10p,10q,10r,10s,110,111,112,113,114,115,116,117,118,11g,11h,11i,11j,11k,11l,11m,11n,11o,11w,11x,11y,11z,120,121,122,123,124,12c,12d,12e,12f,12g,12h,12i,12j,12k,12s,12t,12u,12v,12w,12x,12y,12z,130,139,13a,13b,13c,13d,13e,13f,13q,13r,13s,13t,178,179,17a,17b,17c,17d,17e,17f,17o,17p,17q,17r,17s,17t,17u,17v,185,186,187,188,189,18a,18b,18l,18m,18n,18o,18p,18q,18r,191,192,193,194,195,196,197,19g,19h,19i,19j,19k,19l,19m,19n,19x,19y,19z,1a0,1a1,1a2,1ae,1af,1ag,1ah,1ai,1av,1aw,1ax,1ee,1ef,1eg,1eh,1ei,1eu,1ev,1ew,1ex,1ey,1fa,1fb,1fc,1fd,1fe,1fq,1fr,1fs,1ft,1fu,1g6,1g7,1g8,1g9,1ga,1gn,1go,1gp,1gq,1h2,1h3;2,1,1,eg,ew,fc,fs,g8,go,h4,hk,i0,ig,iw,jc,js,k8,ko,l4,10g,10w,10x,11c,11d,11e,11s,11t,11u,11v,129,12a,12b,12c,12q,12r,12s,12t,137,138,139,13a,13o,13p,13q,13r,145,146,147,148,14m,14n,14o,14p,153,154,155,156,157,15k,15l,15m,15n,15o,161,162,163,164,165,16i,16j,16k,16l,16m;2,2,1,eg,ew,fc,fs,g8,go,h4,hk,i0,ig,iw,jc,js,k8,ko,l4,zv,zw,zx,zy,zz,10c,10d,10e,10f,10s,10t,10u,10v,11a,11b,11r;2,3,1,eg,ew,fc,fs,g8,go,h4,hk,i0,ig,iw,jc,js,k8,ko,l4;2,4,1,18bh,18bi,18bj,2u,2v,2w,18bt,18bu,18bv,18bw,18bx,18by,18bz,39,18c9,3e,3v5s,3p,18cp,3u,3v68,6fr,6fs,6ft,18d6,6fv,j35,j36,j37,j38,3ijp,392f,crs,crt,cru,392j,3ik1,4z,2q44,3ik5,392v,392w,pff,pfl,5z2c,pfp,pfr,pfv,pg1,pg5,pg7,pg9,pga,pgb,mao,3ild,j4z,j50,3ilh,pgn,pgp,pgq,pgx,1l2s,ph1,ph3,394p,ph6,18i5,18i6,18i7,18ij,18ik,9p,9q,9r,18iy,a3,a4,a5,a6,a7,aa,ab,18j8,ad,ae,af,ag,18jd,ai,aj,ak,al,am,59xb,at,au,av,aw,18jt,ay,az,18jy,59xr,6mv,6mw,18k9,be,pln,ja9,jaa,jab,jac,jad,399j,cyw,cyx,cyy,399n,3ir5,3ir6,3ir7,3ir8,3ir9,399z,39a0,pmj,3irl,pmq,pmr,pms,3irp,39af,39ag,pmz,3is1,pn6,pn7,pn8,3is5,pnb,pnd,pne,pnf,3ish,3isi,3isj,3isk,3isl,pnr,39bd,pnu,3isx,po2,po3,po4,3it1,po7,poa,eg,ew,fc,fs,g8,go,18pp,18pq,18pr,h4,18q2,18q3,18q4,18q5,18q6,18q7,hh,hk,18qh,hm,18qj,18qm,5a4f,hx,i0,18qx,i2,18qz,5a4u,5a4v,6tz,ig,18rd,ii,psr,39gn,jhl,d62,39gr,39h3,39h4,ptn,ptz,39hk,pu3,puf,39i1,pui,puj,puv,puy,mp9,mpa,mpb,pvb,pve,18x6,ol,18xl,oq,18xn,p1,18y1,p6,18y3,5aby,5abz,713,714,18yh,pzv,39nr,dd4,dd5,dd6,39nv,mul,39o7,q0r,q13,q17,q1j,q1k,q1l,q1m,q1n,q1z,q20,q21,q22,mwd,mwe,mwf,q2f,q2g,q2h,q2i,mwu,mwv,194a,vp,194p,vu,194r,77h,77j,w5,1955,wa,1957,21l9,5aj2,21lb,787,788,195l,q6z,21lp,21lr,39uv,dk8,dk9,dka,39uz,n1o,n1p,n1q,21m7,39vb,q7v,n25,21mn,q87,q8b,21n3,q8n,q8o,q8p,q8q,q8r,21nj,n3h,n3i,21nz,n3y,n3z,19be,12t,19bt,12y,19bv,139,19c9,13e,19cb,5aq5,5aq6,5aq7,7fb,7fc,19cp,qe3,3w69,3a1z,drc,drd,dre,3a23,n8t,3a2f,qez,qfb,qff,qfr,qfs,qft,qfu,qfv,nal,nam,nan,nb2,nb3,4f9s,4f9t,4f9u,4f9v,4f9w,4f9x,4f9y,4f9z,4fa0,4fa1,4fa2,4fa3,4fa4,4fa5,4fa6,4fa7,4fa8,4fa9,4faa,4fab,4fac,4fad,4fae,4faf,4fag,4fah,4fai,4faj,4fak,4fal,4fam,4fan,4fao,4fap,4faq,4far,4fas,4fat,4fau,4fav,4faw,4fax,1a2,4faz,1ad,4fbd,1ai,4fbf,5ax9,5axa,5axb,7mf,7mg,3wd5,4fbu,4fbv,3a93,dyg,dyh,dyi,3a97,qlz,qm3,qmf,qmj,qmv,qmw,qmx,qmy,qmz,nhp,nhq,nhr,4fgg,4fgh,4fgi,4fgj,4fgk,4fgl,4fgm,4fgn,4fgo,4fgp,4fgq,4fgr,4fgs,4fgt,4fgu,4fgv,1g0,1g1,1g2,1g3,1g4,1g5,1g6,1g7,1g8,1g9,1ga,1gb,1gc,1gd,1ge,1gf,1gg,1gh,1gi,1gj,1gk,1gl,1gm,1gn,1go,1gp,1gq,1gr,1gs,1gt,1gu,1gv,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,4fi3,4fi4,4fi5,4fi6,4fi7,4fi8,4fi9,4fia,4fib,4fic,4fid,4fie,4fif,4fig,4fih,1hm,4fij,5b4d,5b4e,5b4f,7th,7ti,7tj,7tk,3wk9,4fiy,3afv,3tes,3tet,3teu,3ag7,e5k,e5l,e5m,3agb,qt7,qtn,qtz,qu0,qu1,qu2,qu3,1lm,1ls,1lt,1lu,1lv,1lw,1lx,1ly,1lz,1m0,1m1,1m2,1m3,1m4,1m5,1m6,1m7,1m8,1m9,1ma,1mb,1mc,1md,1me,1mf,1mg,1mh,1mi,1mj,1mk,1ml,1mm,1mn,1mo,1mp,1mq,1mr,1ms,1mt,1mu,1mv,1mw,1mx,1my,1mz,1n0,1n1,1n2,1n3,4fo0,4fo1,4fo2,4fo3,4fo4,4fo5,4fo6,4fo7,4fo8,4fo9,4foa,4fob,4foc,4fod,4foe,4fof,4fog,4foh,4foi,4foj,4fok,4fol,4fom,4fon,4foo,4fop,4foq,4for,4fos,4fot,4fou,4fov,4fow,4fox,4foy,4foz,4fp0,4fp1,4fp2,4fp3,4fp4,4fp5,4fp6,3wqx,4fpm,80b,5bbh,5bbi,5bbj,80k,80l,80m,80n,3amx,3amy,3amz,3tlw,3tlx,3tly,3anb,3anc,3and,3ane,3anf,r07,r08,r09,r0a,r0b,r0n,r0o,r0p,r0q,r0r,r13,r14,r15,r16,r17,1ui,1uj,1v6,5bim,5bin,87o,87p,3tt0,3tt1,1wr,6q57,6q5b,6q5n,6q5o,6q5p,6q5q,6q5r,21l,21m,8ej,5bpq,5bpr,8eo,8er,8es,8et,3tzv,3u00,3u01,3u02,3u03,3u04,3u05,3u0b,3u0r,3u17,3b2z,3u1o,3u1p,3b32,3u1r,6qcq,bh0r,bh0s,bh0t,bzzj,7chn,3b3w,7chp,7chr,8ln,8lv,8lw,8lx,3u6z,3u74,3u75,3u76,3u77,3u78,3u79,3u7f,3u7v,3u8b,3ba3,3u8s,3u8t,3ba6,3u8v,6qju,4gdn,bh7w,4gdp,4gdr,3baz,3bb0,3bb1,4d8f,8ss,5n6,2hn,3ue4,3ue8,3ue9,2hu,3uej,2i9,3uez,3uff,3bh7,3ufw,3ufx,3bha,3ufz,6qqy,bhez,bhf0,bhf1,c0dr,3bi3,3bi5,4dfj,8zw,2or,3ul8,3ulc,3uld,3uln,2pc,2pd,3um3,3umj,3bob,3un0,3un1,3boe,3un3,6qy2,bhm3,bhm4,bhm5,c0kv,3bp7,3bp9,4dmn,96z,3usb,3usg,3ush,3usr,2wh,3ut7,3utn,3bvf,3uu4,3uu5,3bvi,3uu7,6r56,4gyz,bht8,4gz1,4gz3,3bwb,3bwd,4dtr,9ej,3uzk,3uzl,3uzv,3v0b,3v0r,3c2j,3v18,3v19,3c2m,3v1b,6rca,bi0b,bi0c,bi0d,4e0r,3c3g,4e0t;2,5,1,pa9,1890,pad,38xz,38y0,38y2,3ifl,3ifp,pav,pay,3v35,3v39,pbb,pbe,3v3m,3v3n,3v3o,38zb,38ze,pc7,pca,pcn,3909,pcq,m72,m73,390n,390o,390q,m7j,pdj,pdm,pdz,pe2,9hg7,d66y,pew,pex,3im9,phe,phf,phg,3imd,3953,3954,3956,3imp,3imq,3imr,3ims,3imt,phz,395k,pi2,3va9,3vaa,3vab,3vac,3vad,pif,pii,396f,396i,pjb,396x,pje,pjr,pju,me6,me7,397r,397s,397u,men,pkn,pkq,pl3,pl6,9hnb,d6e2,pm0,pm1,39c7,39ca,pp3,pp6,ppj,39d4,ppm,39dj,39dl,39dm,pqf,pqi,pqv,pqy,mla,mlb,39ev,39ew,39ey,mlr,prr,ajqx,pru,ps7,psa,9huf,d6l6,pt4,pt5,39jb,39jc,39jd,39je,pw7,pw8,pw9,pwa,pwn,pwo,pwp,pwq,39kn,39ko,39kp,39kq,pxj,pxk,pxl,pxm,pxz,py0,py1,py2,mse,msf,39lz,39m0,39m1,39m2,msv,pyv,pyw,pyx,pyy,pzb,pzc,pzd,pze,74pj,hbbs,hbbt,74pm,mxb,mzi,mzj,mzz,n4e,n4v,nbi,nbj,nby,nbz,ncf,nim,nin,nj2,nj3,njj,njz,npq,npr,nq6,nq7,nqn,nwv,nxb,4d1r,8efz,3bbf,rnw,3bbh,rnz,7sij,7sik,7sil,8en3,ruz,rv1,4dfz,7spn,7spo,7spp,8eu7,s23,s25,7swr,7sws,7swt,3bwr,s98,3bwt,7t3v,7t3w,7t3x;2,2,2,w,x,1c,1d,80,81,8g,8h,8x,f4,f5,fk,fl,g1,m8,m9,mo,mp,n5,tc,ts,tt,u9,100,10g,10w,10x,11c,11d,11e,11s,11t,11u,11v,129,12a,12b,12c,12q,12r,12s,12t,137,138,139,13a,13o,13p,13q,13r,145,146,147,148,14m,14n,14o,14p,153,154,155,156,15k,15l,15m,15n,161,162,163,164,16i,16j,16k,16l;2,3,2,zv,zw,zx,zy,10c,10d,10e,10f,10t,10u,10v,11a,11b,11r,2qz,2rf;2,4,2,5,6,1896,m,n,o,p,189m,189n,t,12,3rxj,3rxk,3rxl,3rxm,3rxn,18,4e2e,1j,1k,1l,1m,1n,4e2k,18al,1hs6,1z,20,21,22,23,1hsc,18b1,18b2,18b4,18b5,18b6,18b7,18b8,18b9,4e3a,2f,2g,2h,2i,2j,4e3g,18bh,18bi,1en3,18bk,18bl,18bm,18bn,18bo,18bp,4e3q,c12f,c12g,astl,c12i,c12j,4e3w,18bx,18by,1enj,6eo,6ep,6eq,6er,6es,6et,39c,3s01,391e,3s03,39g,39h,59qe,59qf,59qg,59qh,7x,86,3s4n,3s4o,3s4p,3s4q,3s4r,8c,4e9i,8n,8o,8p,8q,8r,4e9o,18hs,18ht,18hu,18hv,18hw,18hx,1hza,93,94,95,96,97,1hzg,9c,9d,9e,9f,9g,9h,4eae,9j,9k,9l,9m,9n,4eak,9p,9q,9r,9s,9t,9u,9v,9w,9x,4eau,c19j,c19k,at0p,c19m,c19n,4eb0,a5,a6,a7,59ww,18j5,18j6,18j7,59x0,59x1,59x2,59x3,18jc,18jd,18je,18jf,18jg,18jh,18ji,18jj,59xc,398h,20zm,398j,59xg,59xh,59xi,59xj,59xk,59xl,2102,210i,210y,211e,211u,212a,212q,f1,fa,3sbr,3sbs,3sbt,3sbu,3sbv,fg,5a2c,4egm,fr,fs,ft,fu,fv,4egs,5a2s,5a2t,1i6e,g7,g8,g9,ga,gb,1i6k,18pc,18pd,18pe,18pf,5a38,5a39,4ehi,gn,go,gp,gq,gr,4eho,5a3k,18pt,18pu,18pv,5a3o,5a3p,4ehy,c1gn,c1go,at7t,c1gq,c1gr,4ei4,18q5,18q6,18q7,5a40,6sx,6sy,6sz,5a44,5a45,5a46,hj,hk,5a49,5a4g,3se9,39fm,3seb,5a4k,5a4l,5a4m,5a4n,5a4o,5a4p,mow,mox,m4,m5,me,3siv,3siw,3six,3siy,3siz,mk,5a9g,4enq,mv,mw,mx,my,mz,4enw,5a9w,1idi,nb,nc,nd,ne,nf,1ido,5aa8,5aac,4eom,nr,ns,nt,nu,nv,4eos,5aao,5aas,4ep2,c1nr,c1ns,atex,c1nu,c1nv,4ep8,5ab4,701,702,703,5ab8,5ab9,5aba,5abb,5abk,39mp,3sle,39mr,5abo,5abp,5abq,5abr,mw0,mw1,mwg,t9,3spz,3sq0,39rd,3sq2,3sq3,to,5agh,5agi,5agj,4euu,tz,u0,u1,u2,u3,4ev0,5agw,5agx,5agy,ub,5ah0,5ah1,1ikm,uf,ug,uh,ui,uj,1iks,5ahc,5ahd,ur,5ahg,5ahh,4evq,uv,uw,ux,uy,uz,4evw,5ahs,5aht,5ahw,5ahx,4ew6,c1uv,c1uw,atm1,c1uy,c1uz,4ewc,5ai8,5ai9,776,777,5aic,5aid,5aie,5aio,5aip,39tu,3ssj,5ais,5ait,5aiu,n34,n35,n3k,10d,3sx3,3sx4,39yh,3sx6,3sx7,10s,4f1y,113,114,115,116,117,4f24,1irq,11j,11k,11l,11m,11n,1irw,4f2u,11z,120,121,122,123,4f30,4f3a,c21z,c220,att5,c222,c223,4f3g,7ea,7eb,5aps,5apt,3szm,3szn,fno2,fno3,na8,na9,nao,17g,17h,3t47,3t48,3a5l,3t4a,3t4b,17w,4f92,187,188,189,18a,18b,4f98,1iyu,18n,18o,18p,18q,18r,1iz0,4f9s,4f9t,4f9u,4f9v,4f9w,4f9x,4f9y,193,194,195,196,197,4fa4,4fa5,4fa6,4fa7,4fa8,4fa9,4faa,4fab,4fac,4fad,4fae,c293,c294,au09,c296,c297,4fak,4fal,4fam,4fan,4fy,5aww,5awx,5awy,7lv,1am,3t76,3t77,fnvm,fnvn,nhc,nhd,1el,3tbb,3tbc,3acp,3tbe,3tbf,1f0,4fg6,1fb,1fc,1fd,1fe,1ff,4fgc,4fgg,4fgh,4fgi,4fgj,4fgk,4fgl,1j5y,1fr,1fs,1ft,1fu,1fv,1j64,4fgt,4fgu,4fgv,1g0,1g1,1g2,1g3,1g4,1g5,1g6,1g7,1g8,1g9,1ga,1gb,1gc,1gd,1ge,1gf,1gg,1gh,1gi,1gj,1gk,1gl,1gm,1gn,1go,1gp,1gq,1gr,1gs,1gt,1gu,1gv,4fhs,4fht,4fhu,4fhv,4fhw,4fhx,4fhy,4fhz,4fi0,4fi1,4fi2,4fi3,4fi4,4fi5,4fi6,1hb,2268,5b41,7sy,7sz,1hq,1hr,226o,3tea,3teb,1i7,2274,3teq,3ter,227k,fo36,fo37,2280,228g,228w,229c,1lp,1ls,3tif,3tig,3ajt,3tii,3tij,1m4,1m8,1m9,4fna,1mf,1mg,1mh,1mi,1mj,4fng,1mo,1mp,1mq,1mr,4fno,1jd2,1mv,1mw,1mx,1my,1mz,1jd8,4fo0,4fo1,4fo2,1n7,1n8,4fo5,4fo6,1nb,1nc,1nd,1ne,1nf,4foc,4fod,4foe,4fof,4fog,4foh,4foi,4foj,1no,4fol,4fom,c2nb,c2nc,aueh,c2ne,c2nf,4fos,4fot,4fou,4fov,4fp0,4fpa,4fpb,5bb4,5bb5,802,803,3tle,3tlf,3tlu,3tlv,3tma,3tmb,foaq,foar,1st,3tpj,3tpk,3tpl,3tpm,3tpn,1t8,1tc,1td,4fue,1tj,1tk,1tl,1tm,1tn,4fuk,1ts,1tt,1tu,4fur,4fus,1jk6,1tz,1u0,1u1,1u2,1u3,1jkc,1u9,1ua,1ub,1uc,4fv9,4fva,1uf,1ug,1uh,1ui,1uj,4fvg,1uq,1ur,1us,4fvp,4fvq,c2uf,c2ug,aull,c2ui,c2uj,4fvw,5bi8,3tte,3ttf,3ttu,3ttv,6q4w,6q4x,foia,foib,6q50,6q5c,6q5d,6q5g,6q5h,6q5i,6q5j,1zx,3twn,3two,3twp,3twq,3twr,20c,20d,4g1i,20n,20o,20p,20q,20r,4g1o,1jra,213,214,215,216,217,1jrg,4g2b,4g2c,4g2e,21j,21k,21l,21m,21n,4g2k,4g2r,4g2s,4g2u,c31j,c31k,ausp,c31m,c31n,4g30,5bpc,8eb,8ef,3tzn,3tzr,3u07,3u0i,3u0j,3u0n,3u0y,3u0z,3u13,3u1c,3b2p,3u1e,3b2r,3b2s,3u1h,3u1i,3b2v,6qc8,bzz4,bzz5,btnp,btnq,btnr,6qco,4d0w,7chd,7chh,84xi,7chj,271,3u3r,3u3s,3u3t,3u3u,3u3v,27g,27h,4g8m,27r,27s,27t,27u,27v,4g8s,1jye,287,288,289,28a,28b,1jyk,4g9i,28n,28o,28p,28q,28r,4g9o,4g9y,c38n,c38o,auzt,c38q,c38r,4ga4,8lj,3u6v,3u7b,3u7r,3u87,3u8g,3b9t,3b9u,3u8j,3b9w,3u8l,3u8m,3b9z,4gdd,4gdh,btuu,4gdj,6qjs,4d80,4d81,854l,3xfa,854n,2e5,3uav,3uaw,3uax,3uay,3uaz,2ek,2el,4gfq,2ev,2ew,2ex,2ey,2ez,4gfw,1k5i,2fb,2fc,2fd,2fe,2ff,1k5o,4ggm,2fr,2fs,2ft,2fu,2fv,4ggs,4gh2,c3fr,c3fs,av6x,c3fu,c3fv,4gh8,8sn,3udz,3uef,3uev,3ufb,3ufk,3bgx,3ufm,3bgz,3ufo,3ufp,3ufq,3bh3,bkkg,c0dd,bu1x,bu1y,bu1z,6qqw,4df5,3xmd,rue,3xmf,3uh3,2ko,2kq,2kr,3uhj,3uhk,3uhl,2l6,2l7,2l9,3uhz,3ui0,3ui1,3ui2,3ui3,2lo,2lp,4gmu,2lz,2m0,2m1,2m2,2m3,4gn0,1kcm,2mf,2mg,2mh,2mi,2mj,1kcs,4gnq,2mv,2mw,2mx,2my,2mz,4gnw,4go6,c3mv,c3mw,ave1,c3my,c3mz,4goc,8zr,3ul3,3ulj,3ulz,3umf,3umo,3bo1,3bo2,3umr,3bo4,3umt,3umu,3bo7,bkrk,c0kh,bu91,bu92,bu93,6qy0,4dm9,3xth,3xtj,2sd,3up3,3up4,3bqh,3up6,3up7,2ss,2st,4gty,2t3,2t4,2t5,2t6,2t7,4gu4,1kjq,2tj,2tk,2tl,2tm,2tn,1kjw,4guu,2tz,2u0,2u1,2u2,2u3,4gv0,4gva,c3tz,c3u0,avl5,c3u2,c3u3,4gvg,96v,3us7,3usn,3ut3,3utj,3uts,3bv5,3utu,3bv7,3utw,3utx,3uty,3bvb,c0rk,4gyp,4gyt,bug6,4gyv,6r54,4dtc,4dtd,3y0l,3y0m,3y0n,3uw7,3uw8,3bxl,3uwa,3uwb,2zw,2zx,4h12,307,308,309,30a,30b,4h18,1kqu,30n,30o,30p,30q,30r,1kr0,4h1y,313,314,315,316,317,4h24,4h2e,c413,c414,avs9,c416,c417,4h2k,9dz,3uzb,3uzr,3v07,3v0n,3v0w,3c29,3c2a,3c2b,3c2c,3v11,3v12,3c2f,bun9,buna,bunb,6rc8,8fed,85x2,8fef;2,5,2,m6o,m6p,m6q,m6r,m6s,m6t,m6u,m74,m75,m76,m77,m78,m79,m7k,m7l,m7m,m7n,m7o,m81,m82,m83,20w2,20wi,20wy,20xe,20xu,mds,mdt,20ya,mdv,mdw,mdx,mdy,me8,me9,20yq,meb,mec,med,meo,mep,meq,mer,mes,mf5,mf6,mf7,mfm,mkw,mkx,mky,mkz,ml0,ml1,ml2,mlc,mld,mle,mlf,mlg,mlh,mls,mlt,mlu,mlv,mlw,mm9,mma,mmb,ms0,ms1,ms2,ms3,ms4,ms5,msg,msh,msi,msj,msk,msl,msw,msx,msy,msz,mt0,mz4,mz5,mz6,mz8,mzk,mzl,mzm,mzn,mzo,mzp,n42,n4g,n4h,nb4,nb5,nb6,nbk,nbl,nbm,nc0,nc1,ncg,222o,ni9,nio,nip,niq,nj4,nj5,njk,njl,nk0,npc,npd,nps,npt,npu,nq8,nq9,nqo,nwg,nwh,nwi,nww,nwx,rgg,4d1d,8efk,8efl,rnl,3xfp,rnq,3xfr,76ds,8emp,855h,855i,855j,ruo,4dfl,rut,ruv,8ets,8ett,85cl,85cm,85cn,3xtx,s1y,3xtz,85jp,85jq,85jr;2,3,3,10g,10w,10x,11c,11d,11e,11s,11t,11u,11v,129,12a,12b,12c,12q,12r,12s,12t,137,138,139,13a,13o,13p,13q,13r,145,146,147,148,14m,14n,14o,14p,153,154,155,156,15k,15l,15m,15n,161,162,163,164,16i,16j,16k,16l;2,4,3,coq,cor,cos,cot,cou,cov,38zr,38zs,4e2x,22,23,24,25,26,27,18b4,3906,65av,2g,pcp,2i,2j,2k,2l,2m,2n,18bk,390n,1ug8,4e3u,4e3v,4e3w,4e3x,4e3y,4e3z,cvu,cvv,cvw,cvx,cvy,cvz,4ea1,96,97,98,99,9a,9b,9c,397b,397c,4eah,9m,9n,9o,9p,9q,9r,9s,9t,4eay,4eaz,4eb0,4eb1,4eb2,4eb3,a8,a9,aa,ab,ac,ap,aq,ar,as,at,3gm,b7,b8,b9,ba,3h3,bp,bq,br,3hk,c6,c7,c8,4eh6,4eh7,4eh8,4eh9,4eha,4ehb,39eh,pqy,39ej,pr0,39el,pr2,39en,39ey,39f2,39l6,39l8,39la,39ll,65wa,39ln,6924,39lp,6926,39lr,39m2,39m4,39m6,39sq,39ss,39su,zv,zw,zx,zy,10c,10d,10e,10f,10t,10u,10v,11a,11b,11r,4f9s,4fa8,4far,4fas,4fat,4fau,4fb7,4fb8,4fb9,4fba,4fgw,1gg,4fhd,4ml,4mm,4mn,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,1hy,1ie,4fog,4fow,1o1,1o2,1o3,1o4,1o5,1o6,4fp3,1oh,1oi,1oj,1ok,1ol,1om,4fpj,1v6,1v7,1v8,1v9,1va,4fw7,1vm,1vn,1vo,1vp,1vq,4fwn,22b,22c,22d,22e,22r,22s,22t,22u,29g,29h,29i,29w,29x,29y,2gl,2gm,2h1,2h2,2nq,2o6,2uu,2va,31y,32e;2,0,4,s,4e1p,4e1q,4e1r,18,4e25,4e26,4e27,7w,7x,7y,7z,8c,8d,8e,8f,1lr,1m6,1m7,1st,1su,1sv,1t9,1ta,1tb,1zw,1zx,1zy,1zz,20c,20d,20e,20f,26z,270,271,272,273,27f,27g,27h,27i,27j,2e3,2e4,2e5,2e6,2e7,2ek,2el,2em,2en,2l7,2l8,2l9,2la,2lb,2lo,2lp,2lq,2lr;2,4,4,4e2o,4e2p,4e34,pch,3902,6e6,6e7,9k6,38u,38v,3a,3q,ped,pef,48,pet,peu,pev,4e9s,396p,396q,396r,pjk,9d,6i4y,3977,9ra,ae,au,plh,pli,39dt,39du,39e9,39ea,9ye,hi,hy,psm,a5i,om,p2,pzq,acm,vq,w6,q6u,10g,10w,10x,11c,11d,11e,11s,11t,11u,11v,47o,129,12a,12b,12c,485,ajq,5apa,12q,12r,12s,12t,12u,137,138,139,13a,qdy,4fa,5awe,19y,1ae,qkn,ql2,4m8,4m9,4ma,4mb,4mc,4md,4me,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1hc,1hd,1he,1hf,1hg,1hh,1hi,qrr,qs3,qs4,qs5,qs6,qyu,1vq,309,30a,30b,30c,30d,30e,30f,30q,30r,30s,30t,30u,30v;2,0,5,4e1c,4e1d,4e1e,4e1f,4e1g,4e1h,m,4e1s,4e1t,4e1u,4e1v,4e1w,4e1x,12,13,7k,7l,7m,7n,7o,7p,7q,80,81,82,83,84,85,86,eu,fa,ly,me,t2,ti,tj,104,106,10m,178,179,17a,17q,1ec,1ed,1ee,1et,1eu,1lc,1ld,1le,1lf,1lg,1lh,1li,1ls,1lt,1lu,1lv,1lw,1lx,1ly,1lz,1sg,1sh,1si,1sj,1sk,1sl,1sm,1sw,1sx,1sy,1sz,1t0,1t1,1t2,1zk,1zl,1zm,1zn,1zo,1zp,1zq,1zr,200,201,202,203,204,205,206,207,26o,26p,26q,26r,26s,26t,26u,26v,274,275,276,277,278,279,27a,27b,27c,2ds,2dt,2du,2dv,2dw,2dx,2dy,2dz,2e0,2e8,2e9,2ea,2eb,2ec,2ed,2ee,2ef,2eg,2kw,2kx,2ky,2kz,2l0,2l1,2l2,2l3,2l4,2lc,2ld,2le,2lf,2lg,2lh,2li,2lj,2lk,2lw,2mc,2ms,2n8,2no,2o4,2ok,2p0,2pg,2pw,2qc,2qs,2r8,2s6,2sm,2za,2zq;2,1,5,2kk,2l0,2lg,2lw,2mc,2ms,2n8,2no,2o4,2ok,2p0,2pg,2pw,2qc,2qs,2r8;2,2,5,20k,210,21g,21w,22c,22s,238,23o,244,24k,250,278,27o,284,28k,290,29g,29w,2ac,2as,2b8,2bo,2dg,2dw,2ec,2es,2f8,2fo,2g4,2gk,2h0,2hg,2hw,2kk,2l0,2lg,2lw,2mc,2ms,2n8,2no,2o4,2ok,2p0,2pg,2pw,2qc,2qs,2r8;2,3,5,278,27o,284,2c4,2dw,2ec,2es,2g4,2gk,2h0,2ic,2is,2j8,2kk,2l0,2lg,2lw,2mc,2ms,2n8,2no,2o4,2ok,2p0,2pg,2pw,2qc,2qs,2r8;2,4,5,3,4,5,6,m,6ds,6dt,38g,38h,38i,59pi,59pj,59pl,59pm,59pn,59pz,59q3,77,78,79,7a,7q,59wo,59wq,59wr,eb,ec,ed,ee,et,eu,5a3s,5a3t,5a3v,lf,lg,lh,li,lx,ly,5aa9,5aab,5aac,5aae,5aar,sj,sk,sl,sm,t1,t2,5ahd,5ahh,5ahi,5ahx,5ai0,5ai2,zn,zo,zp,zq,105,106,5aoh,5aoj,5aok,5aox,5apd,16r,16s,16t,16u,177,179,5avm,5avn,5avq,5aw7,5aw8,5awa,1dv,1dw,1dx,1dy,1eb,1ed,5b2r,5b2s,5b34,5b3b,5b3d,5b3r,1kz,1l0,1l1,1l2,1lf,1lg,1lh,5b9t,5b9u,5b9w,5b9x,5ba9,5bae,5bap,1s5,1s6,1sj,1sk,1sl,5bgy,5bgz,5bhd,5bhh,5bhi,5bhk,5bhm,1z9,1za,1zn,1zo,1zp,5boj,5bon,5boo,26d,26e,26r,26s,26t,278,27o,5bvl,5bvm,5bvn,5bvp,5bw1,2dh,2di,2dv,2dw,2dx,2ec,2es,5c2r,5c2v,5c2y,2kk,2kl,2km,2kz,2l0,2l1,2lg,2lw,2mc,5c9g,5c9w,5c9y,5ca2,2rp,2rq,2s3,2s4,2s5,5ch5,2yt,2yu,2z7,2z8,2z9,300,301,302,303,304,305,306,307,308,309,30a,30b,30c,30g,30h,30i,30j,30k,30l,30m,30n,30o,30p,30q,30r,30s,30t,30u,30v,318,319,31a,31b,5co9;2,4,6,3h,3x,3ac,3at,3ba,3br,3s2g,3s2h,3s2i,3v8b,3v8c,3v8d,3v8e,3v8f,6odj,by0c,4e7h,by0e,by0f,4b24,4b25,4b26,4b27,al,b1,3hg,6nh,3hx,3i5,3ie,3iv,3s9k,3s9l,3s9m,3vff,3vfg,3vfh,3vfi,3vfj,6okn,by7g,c1d9,c1da,c1db,4b98,4b9b,hp,i5,3ok,3p1,3pi,3pz,3sgo,3sgp,3sgq,3vmj,3vmk,3vml,3vmm,3vmn,6orr,byek,4elp,byem,byen,4bgc,4bgd,4bge,4bgf,702,703,ot,3uq,70j,70k,p9,3v7,710,3vo,3w5,3wm,72f,3x3,3sns,3snt,3snu,3vtn,3vto,3vtp,3vtq,3vtr,6oyv,sf,776,vx,41u,77o,wd,42b,784,42s,439,43q,79j,79r,447,3suw,3sux,3suy,44b,44c,44d,44e,44f,6p5z,6m0b,6m0c,6m0d,6m0e,6m0f,7ea,131,48y,13h,49f,7f8,49w,4ad,4au,7gn,7gu,7gv,4bb,3t20,3t21,3t22,4bf,4bg,4bh,4bi,4bj,6pd3,6m7f,7le,nek,1a5,nem,4g2,nf0,1al,nf2,4gj,7mc,4h0,4hh,4hp,4hy,7nr,1cd,7ny,4if,3t94,3t95,3t96,4ij,4ik,4il,4im,6pk7,6mej,4ma,4me,4mg,1gy,1h2,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,4n6,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,4nn,7tg,1i0,4o4,4ol,4p2,7uv,7v0,7v1,4pj,3tg8,3tg9,3tga,4pn,4po,4pp,6prb,6mln,4tk,1o2,1o8,1o9,1oa,1ob,1oc,1od,4ua,1oo,1op,1oq,1or,1os,1ot,4ur,80k,1p4,4v8,4vp,4w6,81z,824,825,4wn,3tnc,3tnd,3tne,4wr,4ws,4wt,6pyf,6msr,1ri,50o,1vc,1vd,1ve,1vf,1vg,51e,1vs,1vt,1vu,1vv,1vw,51v,87o,52c,52t,530,53a,893,1xn,1xo,53r,3tug,3tuh,3tui,53v,53w,53z,6q5j,6mzv,1yn,57s,22g,22h,22i,22j,58i,22w,22x,22y,22z,58z,8es,59g,59x,5ae,8g7,8gb,8gc,5av,3u1k,3u1l,3u1m,5az,5b0,5b2,5b3,6qcn,6n6z,25q,25r,8ky,29k,29l,29m,5fm,2a0,2a1,2a2,5g3,8lw,5gk,5h1,5hi,8nb,8nf,5hz,3u8o,3u8p,3u8q,5i3,5i6,5i7,6qjr,6ne3,2cu,2cv,8s2,2go,2gp,5mq,2h4,2h5,5n7,8t0,5no,5o5,5om,8uf,8uj,5p3,3ufs,3uft,3ufu,5p7,5pa,5pb,6qqv,6nl7,2jy,2jz,8z6,2ns,5tu,2o8,5ub,904,5us,5v9,5vg,5vq,91j,91n,2q4,5w7,3umw,3umx,3umy,5wb,5wd,5we,5wf,6qxz,6nsb,2r1,2r2,2r3,2rj,96a,2uw,60y,96s,2vc,61f,978,61w,62d,62j,62k,62u,98n,98q,2x7,2x8,63b,3uu0,3uu1,3uu2,63f,63h,63i,63j,6r53,6nzf,2y5,2y6,2y7,2yn,30g,30h,30w,30x,30y,30z,66t,31c,31d,31e,31f,31h,31i,31j,9de,31v,31x,31y,31z,320,682,9dv,9dw,32d,32e,32f,32g,68j,9ec,2t1x,32v,690,2t2d,33b,69h,69y,9fr,9fu,6af,3v14,3v15,3v16,6al,6am,6an,6rc7,6o6j,359,35a,35b,35q,35r;2,5,6,4avh,6eq6,dyj3,8c9p,8c9q,ebdb,8cgt,8cgu,4b9p,6f4e,dyxb,8cnx,8cny,2rz;2,4,7,3bf,3v80,3v81,3v82,3v83,6hk,6hl,6hm,63,3v8c,4e74,by01,6b,vs4,3v8l,3v8m,3v8n,3v8o,3v8p,3v8q,3v8r,3v8s,3v8t,3v8u,1xpr,4b1s,7ai9,6q,6r,vsk,6t,6u,6v,394s,394v,3ht,ch,6o3,6o4,3vf4,3vf5,3vf6,3vf7,3s9g,6oo,6op,6oq,6or,c1cw,by75,de,df,vz8,3vfp,3vfq,3vfr,3vfs,3vft,3vfu,3vfv,3vfw,3vfx,3vfy,1xwv,4b8w,dt,du,dv,vzo,dx,dy,1xx3,awag,awah,1xx6,5pto,5ptr,3p1,jl,6v6,6v7,jp,3vm8,3vm9,3vma,3vmb,3sgk,6vr,6vs,6vt,6vu,6vv,4elc,bye9,ki,kj,w6c,3vmt,3vmu,3vmv,3vmw,3vmx,3vmy,3vmz,3vn0,3vn1,3vn2,1y3z,4bg0,7awh,ky,kz,w6s,219z,39j0,4em5,4em6,39j3,3w5,3w6,728,729,72a,72b,72c,qt,qu,3vtc,3vtd,3vte,3vtf,3sno,72u,72v,72w,72x,72y,72z,rm,rn,wdg,3vtx,3vty,3vtz,3vu0,3vu1,3vu2,3vu3,3vu4,3vu5,3vu6,1yb3,s0,s1,s2,s3,wdw,da0n,1c6x,1c6y,q2j,39q4,39q5,39q6,39q7,42s,xg,5dq7,79c,79d,3sub,3suc,5dqm,5dqn,3w0g,441,79w,79x,79y,79z,7a0,7a1,7a2,5dr1,5dr2,5dr3,6m01,6m02,6m03,4oh0,39wl,39wm,39wn,39wo,39wp,39wq,1yi3,5drg,5drh,5dri,1yi7,z6,z7,4ohg,39x1,39x2,39x3,39x4,39x5,39x6,39x7,39xb,7gg,3w7k,7h0,7h1,7h2,7h3,7h4,7h5,7h6,4oo4,7hh,7hi,4oo7,4oo8,4oo9,4ooa,1yp7,1yp8,1yp9,1ypa,1ypb,4ook,4ool,4oom,4oon,4ooo,4oop,4ooq,3a4b,gjcs,4ida,3a4f,3weo,7o4,7o6,7o7,7o8,1cy,1cz,4is,4iu,4iv,4iw,4ove,1ywb,1ywc,1ywd,1ywe,1ywf,6mes,6met,6meu,6mev,6mew,6mex,4ovu,3abf,1yws,5qt9,1ywu,3abj,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,3wls,4pd,4pe,4pf,1k1,1k2,1k3,310p,7vu,1z3f,1z3g,1z3h,1z3i,1z3j,1ki,1km,66t5,4p2y,3aij,1z3y,3ain,3wsw,4wh,4wi,4wj,1r4,1r5,1r6,1r7,317t,82y,1zaj,1zak,1zal,1zam,1zan,1rn,6jnd,4pa2,3apn,hfjy,3apr,3x00,53l,53m,53n,1y8,1y9,1ya,1yb,31ex,8a2,3awb,1zho,1zhp,1zhq,1zhr,1yt,6ad5,4ph6,3awr,3x74,3x75,3x76,cvkj,25c,25d,25e,9zab,3x7o,3x7p,3x7q,3x7r,3x7s,3x7t,3x7u,3b3f,3b3g,1zot,1zou,1zov,25t,25u,25v,25w,25z,5rln,5hs,5ht,5hu,5hv,2cg,2ch,2ci,2cj,5ic,5id,31t5,8oa,3baj,3bak,1zvx,1zvy,1zvz,2cw,2cx,2cy,2cz,2d0,2d1,2d3,6ard,4pve,3baz,3bb1,3bb2,3bb3,5ow,5ox,5oy,5oz,2jk,2jl,2jm,2jn,5pg,5ph,5pi,3209,8ve,3bhn,3bho,2031,2032,2033,2k0,2k1,2k2,2k3,2k4,2k5,2k6,6kft,4q2i,3bi3,2kc,3bi5,2ke,5w0,5w1,5w2,5w3,2qo,2qp,2qq,2qr,5wk,5wl,5wm,327d,92i,3bor,3bos,20a5,20a6,20a7,2r4,2r5,2r6,2r7,2r8,2r9,2ra,2rb,6b5l,4q9m,3bp7,3bp9,2rj,634,635,636,637,20gu,2xs,2xt,2xu,2xv,63o,63p,63q,99m,3bvv,3bvw,20h9,20ha,20hb,2y8,2y9,2ya,2yb,2yc,2yd,2ye,6nzt,4qgq,3bwb,3bwd,6a8,6a9,6aa,6ab,34w,34x,34y,34z,6as,6at,6au,9gq,3c2z,3c30,20od,20oe,20of,35c,35d,35e,35f,35g,35h,35i,6o6x,4qnu,3c3f,3c3h,35r;2,5,7,0,1,2,3,pac,6,7,38y4,38y7,h,vmc,38yk,38yn,x,vms,38z0,38z3,4njo,fuk,ful,fum,fun,4tvo,4tvp,4tvq,4tvr,4tvs,4tvt,4tvu,4tvv,4tvw,4tvx,4tvy,4tvz,74,75,76,77,phg,1xqf,aw3s,aw3t,1xqi,5pn0,5pn3,7k,7l,7m,vtg,5mho,5mhr,80,81,82,vtw,5pnw,5pnz,4nqs,g1o,g1p,g1q,g1r,4u2s,4u2t,4u2u,4u2v,4u2w,4u2x,4u2y,4u2z,4u30,4u31,4u32,4u33,e8,e9,ea,eb,pok,39cc,39cf,eo,ep,eq,er,w0k,39cs,bfa5,bfa6,39cv,f5,w10,39d8,39db,4nxw,g8s,g8t,g8u,g8v,4u9w,4u9x,4u9y,4u9z,4ua0,4ua1,4ua2,4ua3,4ua4,4ua5,4ua6,4ua7,lc,ld,le,lf,pvo,21af,1c09,pvv,39jg,39jh,39ji,39jj,w7o,7qqf,7qqg,7qqh,7qqi,7qqj,39jw,39jx,39jy,39jz,w84,39kc,39kd,39ke,39kf,4o50,gfw,gfx,4ugu,4uh0,4uh1,4uh2,4uh3,4uh4,4uh5,4uh6,4uh7,4uh8,4uh9,4uha,4uhb,4oas,39qd,39qe,39qf,39qg,39qh,39qi,39qj,eia4,39qn,4ob8,39qt,39qu,39qv,39qw,39qx,39qy,39qz,eiak,39r3,4obo,39r9,39ra,39rb,39rc,39rd,39re,39rf,eib0,39rj,4oc4,gmz,eibg,4uo4,4uo5,4uo6,4uo7,4uo8,4uo9,4uoa,4uob,4uoc,4uod,4uoe,4uof,4ohw,4ohx,4ohy,4ohz,4oi0,4oi1,4oi2,39xn,gj64,4i6m,39xr,4oic,4oid,4oie,4oif,4oig,4oih,4oii,39y3,39y4,39y5,39y6,39y7,4ois,4oit,4oiu,4oiv,4oiw,4oix,4oiy,39yj,39yk,39yl,39ym,39yn,4oj8,4oj9,4oja,4ojb,4ojc,4ojd,4oje,gu3,gu4,gu5,gu6,4uv8,4uv9,4uva,4uvb,4uvc,4uvd,4uve,4uvf,4uvg,4uvh,4uvi,4uvj,4op6,3a4r,1yq4,ax3h,1yq6,3a4v,4opm,3a57,3a58,3a5b,4oq2,3a5n,3a5o,3a5r,4oqi,3a63,3a64,h1a,4v27,4v2i,4v2j,4v2k,4v2l,4v2m,4v2n,4owa,3abv,axal,hf66,3abz,4owq,3acb,3acc,fkt9,3acf,4ox6,3acr,3acs,3acv,4oxm,3ad7,3ad8,3adb,4oy2,3ado,h8u,3adr,4va2,4va3,4va4,4va5,4va6,4va7,4p3e,3aiz,3aj3,4p3u,3ajf,1z4t,3ajj,4p4a,3ajv,3ajw,fl0t,3ajz,4p4q,3akb,3akc,1z5r,4p56,3aks,3akv,4p5m,hgc,hge,3alb,4vhm,4vhn,4vho,4vhp,4vhq,4vhr,4pai,3aq3,4pay,3aqj,4pbe,3aqz,22i4,22i5,22i7,1te,1tf,1tg,1th,4pbu,3arf,3arg,fl8d,1zcv,1tu,1tv,1tw,1tx,4pca,3arv,3arw,3arz,4pcq,3asb,3asc,3asf,4pd6,3asr,3ass,hnx,hny,3asv,4vp6,4vp7,4vp8,4vp9,4vpa,4vpb,5rez,5o9n,4pii,3ay3,22p8,22p9,22pa,22pb,20h,20i,20j,20k,20l,4piy,3ayj,3ayk,1zjx,1zjy,1zjz,20x,20y,20z,210,211,4pje,3ayz,3az0,bgwe,3az3,21e,21f,21g,4pju,3azf,3azg,3azj,21v,4pka,3azv,3azw,3azz,4vwa,hvg,hvh,hvi,hvj,4vwq,4vwr,4vws,4vwt,4vwu,4vwv,26b,26c,4poq,3b4b,3b4d,3b4e,3b4f,26r,4pp6,3b4r,3b4t,3b4u,3b4v,277,4ppm,3b57,22wc,3b59,3b5a,3b5b,27l,27m,27n,27o,27p,4pq2,3b5n,1zr0,1zr1,1zr2,1zr3,281,282,283,284,285,4pqi,3b63,28i,28j,28k,4pqy,3b6j,28y,28z,290,4pre,3b6z,4w3e,i2j,i2k,i2l,i2m,i2n,4w3u,4w4a,4w4b,4w4c,4w4d,4w4e,4w4f,rnv,3bbh,7si6,rob,3bbx,7sim,4pwq,3bcb,233g,3bcd,btwu,btwv,2ep,2eq,2er,2es,2et,4px6,3bcr,1zy4,1zy5,1zy6,1zy7,2f5,2f6,2f7,2f8,2f9,4pxm,3bd7,2fn,2fo,4py2,3bdn,2g3,4pyi,3be3,4wai,i9n,i9o,i9p,i9q,i9r,4way,4wbe,4wbu,4wbv,4wbw,4wbx,4wby,4wbz,ruz,3bil,7spa,rvf,3bj1,7spq,4q3u,3bjf,23ak,3bjh,bu3y,bu3z,2lu,2lv,2lw,2lx,4q4a,3bjv,2058,2059,205a,205b,2m9,2ma,2mb,2mc,2md,4q4q,3bkb,3bkf,4q56,3bkr,3bkv,4q5m,3bl7,3blb,4whm,igr,igs,igt,igu,igv,4wi2,4wii,4wiy,4wje,4wjf,4wjg,4wjh,4wji,4wjj,4qa2,3bpn,3bpp,7swe,4qai,3bq3,3bq5,7swu,4qay,3bqj,23ho,3bql,bub2,bub3,4qbe,3bqz,20cc,20cd,20ce,20cf,4qbu,3brf,3brj,4qca,3brv,3brz,4qcq,3bsb,3bsf,4woq,inv,inw,inx,iny,inz,4wp6,4wpm,4wq2,4wqi,4wqj,4wqk,4wql,4wqm,4wqn,2yo,2ys,2yt,2yu,4qh6,3bwr,3bwt,4qhm,3bx7,3bx9,4qi2,3bxn,23os,3bxp,bui6,bui7,4qii,3by3,20jg,20jh,20ji,20jj,saz,3byn,sbf,3bz3,sbv,3bzj,4wvu,iuz,iv0,iv1,iv2,iv3,4wwa,4wwq,4wx6,4wx7,4wx8,4wx9,4wxa,4wxb;2,0,8,r,17,1n,23,2j,2z,3f,3v,4b,4r,57,5n,63,6j,6z;2,1,8,b,r,17,1n,23,2j,2z,3f,3v,4b,4r,57,5n,5cyj,5cyz,5czf;2,2,8,5csr,5ct7,5ctn,5cu3,5cuj,5cuz,5cvf,5cvv,5cwb,5cwr,5cx7,57,5n,63,6j,6z;2,3,8,b,r,17,1n,23,2j,2z,5cvv,5cwb,5cwr,5cx7,5cxn,5cy3,5cyj,5cyz,5czf;2,4,8,5csr,5ct7,5ctn,5cu3,5cuj,5cuz,5cvf,5cvv,5cwb,4a,5cwr,4c,4q,5cx7,4s,1xpc,1xpd,1xpe,1xpf,1xpg,1xph,1xpi,1xpj,1xpk,1xpl,1xpm,1xpn,394c,3cd,3ce,3cf,gru8,6y,6z,70,71,72,73,be,bf,bg,bu,bv,bw,cb,1xwg,1xwh,1xwi,1xwj,1xwk,1xwl,1xwm,1xwn,1xwo,1xwp,1xwq,1xwr,39bg,3jh,3ji,3jj,4ees,4eet,4eeu,4eev,e3,poc,e5,e6,e7,iz,jf,jv,1y3k,1y3l,1y3m,1y3n,1y3o,1y3p,1y3q,1y3r,1y3s,1y3t,1y3u,1y3v,3qm,kz,l0,l7,39j0,4o3h,la,qj,qz,4esg,39pd,4esi,1yar,1yas,1yat,1yau,1yav,1yaw,1yax,1yay,1yaz,73g,73h,21gw,39pv,bfn8,bfn9,39py,39q2,bfnf,39q4,4oal,5dps,5dpt,5dpu,5dpv,5dpw,5dpx,5dpy,5dpz,5dq0,5dq1,5dq2,xn,5dq4,5dq5,5dq6,5dq8,5dq9,5dqa,5dqb,5dqc,5dqd,5dqe,5dqf,5dqg,5dqh,5dqi,y3,5dqk,5dql,5dqm,ym,39wg,4ezl,39wi,1yhv,1yhw,1yhx,1yhy,1yhz,1yi0,1yi1,1yi2,1yi3,7ak,7al,z2,bshc,21o3,8mpg,2x9x,hhx2,2x9z,9f5m,39x8,4ohp,5dxa,5dxq,4f68,4c0j,4c0k,4f6o,3a3l,4f6q,1yoz,1yp0,1yp1,1yp2,1yp3,1yp4,1yp5,1yp6,1yp7,7ho,7hp,bsog,1ckz,dq7p,16i,zy3,3a4c,4oot,5e4e,5e4u,4c7n,4c7o,3aao,4fdt,3aaq,1yw3,1yw4,1yw5,1yw6,1yw7,1yw8,1yw9,1ywa,1ywb,7os,7ot,3my8,222b,8n3o,dqet,1dj,4fek,4ovx,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,5ebi,5eby,4ces,4fkw,3aht,4fky,1z37,1z38,1z39,1z3a,1z3b,1z3c,1z3d,1z3e,1z3f,7vw,7vx,3tgw,229f,1kk,dqlx,4flo,4p31,5ei7,5eim,5ein,5ej2,5ej3,1qt,82n,3aow,4fs1,3aoy,1zab,1zac,1zad,1zae,1zaf,1zag,1zah,1zai,1zaj,830,831,4xb,3to0,3apf,2y2d,10jf,3apo,4pa5,1zh1,89q,89r,1zhc,1zhd,1zhe,1zhf,1zhg,1zhh,1zhi,1zhj,1zhk,1zhl,1zhm,1zhn,8a4,8a5,54e,54f,1ys,3aws,4ph9,4d05,8gu,8gv,1zog,1zoh,1zoi,1zoj,1zok,1zol,1zom,1zon,1zoo,1zop,1zoq,1zor,8h8,8h9,5bi,5bj,25s,25t,25u,25x,d52v,7308,9gc9,ff97,3b3w,4pod,1zvc,1zvd,5i4,8ny,8nz,1zvk,1zvl,5rs2,1zvn,1zvo,1zvp,1zvq,1zvr,1zvs,1zvt,1zvu,1zvv,2cs,5im,5in,3bao,3bap,5rsi,3bar,3bas,5rsl,3bau,3bav,3baw,3bax,3bay,3baz,3bb0,4pvh,8v0,8v1,8v2,202o,202p,202q,202r,202s,202t,202u,202v,202w,202x,202y,202z,8vg,8vh,5pq,5pr,4jqo,2k2,3bhw,2k5,5rzq,4a9l,3bi2,3bi3,3bi4,4q2l,923,924,925,926,209s,209t,209u,209v,209w,209x,209y,209z,20a0,20a1,20a2,20a3,92k,92l,5wu,5wv,df5d,2r6,4agj,23g4,5s6t,3bp2,i5tj,4agp,4agq,4agr,3bp8,4q9p,996,997,998,999,20gw,20gx,20gy,20gz,20h0,20h1,20h2,20h3,20h4,20h5,20h6,20h7,99o,99p,63y,63z,2y8,2y9,4ann,23n8,3bw6,4k57,3bwc,4qgt,9fy,9g9,9ga,9gb,9gc,9ge,20o0,20o1,20o2,20o3,20o4,20o5,20o6,20o7,20o8,20o9,20oa,20ob,9gs,9gt,6b2,6b3,35c,35d,4kc3,3c38,3c3a,4kc7,4kc8,3c3g,4qnx;2,5,8,b,38z0,4njh,fu8,fu9,fua,fub,fuc,fud,fue,fuf,fug,fuh,fui,fuj,fuk,4njx,4tvk,4tvl,4tvm,4tvn,4tvo,4tvp,4tvq,4tvr,4tvs,4tvt,4tvu,4tvv,4tvw,4tvx,pho,pi4,3964,4nql,g1c,g1d,g1e,g1f,g1g,g1h,g1i,g1j,g1k,g1l,g1m,g1n,g1o,4nr1,4u2o,4u2p,4u2q,4u2r,4u2s,4u2t,4u2u,4u2v,4u2w,4u2x,4u2y,4u2z,4u30,4u31,39cc,4nwt,39cs,4nx9,39d8,4nxp,g8g,g8h,g8i,g8j,g8k,g8l,g8m,g8n,g8o,g8p,g8q,g8r,g8s,4ny5,4u9s,4u9t,4u9u,4u9v,4u9w,4u9x,4u9y,4u9z,4ua0,4ua1,4ua2,4ua3,4ua4,4ua5,21a8,39j7,bfgk,bfgl,39ja,39je,bfgr,39jg,4o3x,21ao,39jn,bfh0,bfh1,39jq,39ju,bfh7,39jw,4o4d,21b4,39k3,39k4,39k5,39k6,39ka,39kb,39kc,4o4t,gfl,gfm,39kj,39kk,gfp,gfq,gfr,gfs,gft,gfu,gfv,gfw,4o59,4ugw,4ugx,4ugy,4ugz,4uh0,4uh1,4uh2,4uh3,4uh4,4uh5,4uh6,4uh7,4uh8,4uh9,39qk,4ob1,azv4,azv7,39r0,4obh,21i8,21ib,39rg,4obx,gmp,gmq,39rn,gms,gmt,gmu,gmv,gmw,gmx,gmy,gmz,4ocd,4uo0,4uo1,4uo2,4uo3,4uo4,4uo5,4uo6,4uo7,4uo8,4uo9,4uoa,4uob,4uoc,4uod,785n,39xo,4oi5,b028,b02b,zrv,39y4,4oil,21pc,21pf,zsb,39yk,4oj1,gts,gtt,gtu,gtv,gtw,gtx,gty,gtz,gu0,gu1,gu2,gu3,4ojh,4uv4,4uv5,4uv6,4uv7,4uv8,4uv9,4uva,4uvb,4uvc,4uvd,4uve,4uvf,4uvg,4uvh,78cr,3a4s,4op9,21w0,b09f,4f8b,3a58,4opp,21wg,21wj,3a5o,4oq5,h0w,h0x,h0y,h0z,h10,h11,h12,h13,h14,h15,h16,h17,h18,4oql,4v28,4v29,4v2a,4v2b,4v2c,4v2d,4v2e,4v2f,4v2g,4v2h,4v2i,4v2j,4v2k,4v2l,3ta8,78jv,3abw,4owd,2234,b0gj,4fff,3acc,4owt,223k,223n,3acs,4ox9,3acw,3acx,3acy,h83,h8b,h8c,4oxp,3adc,3add,3ade,h8j,h8k,h8l,h8m,h8n,h8o,h8p,h8q,h8r,h8s,4oy5,4v9s,4v9t,4v9u,4v9v,4v9w,4v9x,4v9y,4v9z,4va0,4va1,4va2,4va3,4va4,4va5,3thc,3air,78qz,3aj0,4p3h,22a8,3aj7,10d7,3ajg,4p3x,22ao,3ajn,10dn,3ajw,4p4d,1z5c,1z5d,1z5e,3ak3,hff,hfg,4p4t,hydc,hyde,3akj,hfv,hfw,4p59,ino0,ino1,ino2,hg3,hg4,hg5,hg6,hg7,hg8,hg9,hga,hgb,hgc,4p5p,4vhc,4vhd,4vhe,4vhf,4vhg,4vhh,4vhi,4vhj,4vhk,4vhl,4vhm,4vhn,4vho,4vhp,3aq4,4pal,3aqk,4pb1,22hs,3ar0,4pbh,1zcg,1zch,1zci,hmk,4pbx,87r4,87r6,bgoz,hn0,4pcd,hnc,hnd,hne,hnf,hng,4pct,invk,invl,invm,hnn,hno,hnp,hnq,hnr,hns,hnu,hnv,hnw,4pd9,4vow,4vox,4voy,4voz,4vp0,4vp1,4vp2,4vp3,4vp4,4vp5,4vp6,4vp7,4vp8,4vp9,3ax8,4php,3axo,4pi5,22ow,3axz,3ay0,3ay1,3ay2,3ay3,3ay4,4pil,1zjk,1zjl,1zjm,3ayf,3ayg,3ayh,3ayi,3ayj,3ayk,4pj1,87y8,87ya,bgw3,3ayv,3ayw,3ayx,3ayy,3ayz,3az0,4pjh,3azb,3azc,3azd,3aze,3azf,3azg,4pjx,3azr,3azs,3azt,3azu,3azv,3azw,4pkd,hv4,hv5,hv6,hv7,hv8,hv9,hva,hvb,hvc,hvd,hve,hvf,hvg,4vwd,4vwg,4vwh,4vwi,4vwj,4vwk,4vwl,4vwm,4vwn,4vwo,4vwp,4vwq,4vwr,4vws,4vwt,3b40,3b41,5rlu,3b43,3b44,5rlx,3b46,3b47,3b48,3b49,3b4a,3b4b,3b4c,4pot,3b4g,3b4h,5ogi,3b4j,3b4k,5ogl,3b4m,3b4n,3b4o,3b4p,3b4q,3b4r,3b4s,4pp9,3b4w,3b4x,3b4y,3b4z,3b50,3b51,3b52,3b53,3b54,3b55,3b56,3b57,3b58,4ppp,1zqo,1zqp,1zqq,1zqr,1zqs,1zqt,1zqu,1zqv,1zqw,1zqx,1zqy,1zqz,3b5o,4pq5,bh37,bh38,bh39,bh3a,bh3b,3b60,3b64,4pql,3b6g,3b6k,4pr1,3b6w,3b70,4prh,i28,i29,i2a,i2b,i2c,i2d,i2e,i2f,i2g,i2h,i2i,i2j,i2k,4w3h,4w3x,4w40,4w41,4w42,4w43,4w44,4w45,4w46,4w47,4w48,4w49,4w4a,4w4b,4w4c,4w4d,4jk0,3bb8,5ona,3bbg,4pvx,8ky8,3bbo,3bbq,8bh5,8bh6,8bh7,3bbw,4pwd,btwg,btwh,btwi,btwj,3bc4,btwl,3bc6,btwn,btwo,btwp,btwq,btwr,3bcc,4pwt,1zxs,1zxt,1zxu,1zxv,1zxw,1zxx,1zxy,1zxz,1zy0,1zy1,1zy2,1zy3,3bcs,4px9,5ruw,3bd8,4pxp,5opk,rq4,3be0,3be4,4pyl,i9c,i9d,i9e,i9f,i9g,i9h,i9i,i9j,i9k,i9l,i9m,i9o,4wal,4wb1,4wbh,4wbk,4wbl,4wbm,4wbn,4wbo,4wbp,4wbq,4wbr,4wbs,4wbt,4wbu,4wbv,4wbw,4wbx,38cj,5oud,3bie,4aa1,4aa2,4aa3,3bik,4q31,3bis,3bit,3biu,8bo9,8boa,8bob,3bj0,4q3h,bu3k,bu3l,bu3m,bu3n,3bj8,3bj9,3bja,bu3r,bu3s,bu3t,bu3u,bu3v,3bjg,4q3x,204w,204x,204y,204z,2050,2051,2052,2053,2054,2055,2056,2057,3bjw,4q4d,3bk0,3bk1,3bk2,5s1v,3bk4,3bk5,3bk6,5s1z,3bk8,3bkc,4q4t,3bkg,3bkh,3bki,5owj,3bkk,3bkl,3bkm,5own,3bko,rx8,3bkw,3bkx,3bky,3bkz,3bl0,3bl1,3bl2,3bl3,3bl4,3bl8,4q5p,igg,igh,igi,igj,igk,igl,igm,ign,igo,igp,igq,igr,igs,4whp,4wi5,4wil,4wj1,4wj4,4wj5,4wj6,4wj7,4wj8,4wj9,4wja,4wjb,4wjc,4wjd,4wje,4wjf,4wjg,4wjh,38jn,3bpi,4jyj,3bpo,4qa5,3bpw,3bpy,3bq4,4qal,buao,buap,buaq,buar,3bqc,buat,3bqe,buav,buaw,buax,buay,buaz,3bqk,4qb1,20c0,20c1,20c2,20c3,20c4,20c5,20c6,20c7,20c8,20c9,20ca,20cb,3br0,4qbh,4k01,4k02,3br9,bhom,3brc,4gui,4guj,3brg,4qbx,8le9,8lea,3brp,bhp2,3brs,3brw,4qcd,3bs5,7syv,3bs8,8i95,3bsc,4qct,ink,inl,inm,inn,ino,inp,inq,inr,ins,int,inu,inv,inw,4wot,4wp9,4wpp,4wq5,4wq8,4wq9,4wqa,4wqb,4wqc,4wqd,4wqe,4wqf,4wqg,4wqh,4wqi,4wqj,4wqk,4wql,3bwk,3bwm,c3yf,c3yg,3bws,4qh9,3bx0,3bx2,8idz,8ie0,3bx8,4qhp,buhs,buht,buhu,buhv,3bxg,buhx,3bxi,buhz,bui0,bui1,bui2,bui3,3bxo,4qi5,20j4,20j5,20j6,20j7,20j8,20j9,20ja,20jb,20jc,20jd,20je,20jf,3by4,4qil,3byd,bhvq,3byg,4h1m,4h1n,3byk,4qj1,3byt,bhw6,3byw,3bz0,4qjh,3bz9,3bzc,8ig9,3bzg,4qjx,iuo,iup,iuq,iur,ius,iut,iuu,iuv,iuw,iux,iuy,iuz,iv0,4wvx,4wwd,4wwt,4www,4wwx,4wwy,4wwz,4wx0,4wx1,4wx2,4wx3,4wx4,4wx5,4wx6,4wx7,4wx8,4wx9;2,3,9,18n,193,19j,19z,1af,1av,1bb,1br,1c7,1cn,1d3,1dj,1fr,1g7,1gn,1h3,1hj,1hz,1if,1ig,1iv,1iw,1jb,1jc,1jr,1js,1k7,1k8,1kn,1ko,1mw,1nc,1ns,1o8,1oo,1p4,1pk,1q0,1qg,1qw,1rc,1rs,1u0,1ug,1uw,1vc,1vs;2,4,9,3f,3g,3h,3i,3j,3v,3w,3x,3y,3z,3aw,5k,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3c0,6b,6c,6o,aj,ak,al,am,an,az,b0,b1,b2,b3,3i0,co,3s9f,3s9g,3s9h,3s9i,3s9j,3s9k,3s9l,df,hn,ho,hp,hq,hr,i3,i4,i5,i6,i7,3p4,js,3sgj,3sgk,3sgl,3sgm,3sgn,3sgo,3sgp,kj,or,os,ot,ou,ov,p7,p8,p9,pa,pb,3w8,qw,3snn,3sno,3snp,3snq,3snr,3sns,3snt,rn,vv,vw,vx,vy,wb,wc,wd,we,43c,y0,79l,79u,3sur,3sus,3sut,3suu,3suv,3suw,3sux,44i,12z,130,131,132,13f,13g,13h,13i,4ag,7gm,7gn,154,7gp,7gx,7gy,3t1v,3t1w,3t1x,3t1y,3t1z,3t20,3t21,4bl,4bm,16e,16f,16g,16v,17b,17r,187,18n,193,19j,2r93,1a2,1a3,1a4,1a5,2r9j,1ai,1aj,1ak,1al,2r9z,1bb,1br,4hk,7no,7np,7nq,1c7,1c8,7nt,7o0,7o1,7o2,3t8z,3t90,3t91,3t92,3t93,3t94,3t95,4io,4ip,4iq,1dh,1di,1dj,1dk,1dl,1dz,1e0,1ef,1eg,1ev,1ew,1fb,1fc,1fr,1fs,1g7,1g8,2rfr,2rfs,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,4n2,4n3,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,2rh3,2rh4,1if,1iv,4oo,7ur,7us,7ut,7uu,1jb,1jc,7v4,7v5,7v6,3tg3,3tg4,3tg5,3tg6,3tg7,3tg8,3tg9,4ps,4pt,4pu,1k7,1kl,1km,1kn,1ko,1kp,1l4,1lk,1m0,1mg,1mw,1o2,1o3,1o4,1o5,1o6,7zt,7zu,1oh,1oi,1oj,1ok,1ol,1om,1ow,1ox,1oy,1oz,1p0,1p1,1p2,5ehs,5eht,5ei8,81v,81w,81x,81y,828,829,82a,3tn7,3tn8,3tn9,3tna,3tnb,3tnc,3tnd,4ww,4wx,4wy,1rp,1rq,1rr,1rs,1rt,88z,890,89c,89d,3tub,3tuc,3tud,3tue,3tuf,3tug,3tuh,540,541,542,1yt,1yu,1yv,1yw,8g3,24n,8gg,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,5b4,5b5,5b6,3u8j,3u8k,3u8l,3u8m,3u8n,3u8o,3u8p,5i8,5i9,5ia,3ufn,3ufo,3ufp,3ufq,3ufr,3ufs,3uft,5pc,5pd,5pe,5v4,2ps,3umr,3ums,3umt,3umu,3umv,3umw,3umx,5wg,5wh,5wi,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,63k,63l,63m,3v0z,3v10,3v11,3v12,3v13,3v14,3v15,6ao,6ap,6aq;2,5,9,zq,zr,zs,zt,16t,16u,16v,16w,16x,17a,17b,17r,1dx,1dy,1dz,1e0,1e1,1ee,1ef,1eg,1eu,1ev,1ew,1l1,1l2,1l3,1l4,1l5,1lj,1lk,1lz,1s5,1s6,1s7,1s8;2,4,a,34,35,36,37,38,3k,3l,3m,3n,3o,a8,a9,aa,ab,ao,ap,aq,ar,hc,hd,he,hs,ht,hu,og,oh,oi,ow,ox,oy,4mb,4mc,4mo,4mp,1gz,1h0,1hc,1hd,4nl;2,4,b,4m8,4m9,4ma,4mb,4mc,4md,4me,4mf,4mg,4mn,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1hb;2,4,c,3j,39e,3z,42,3nn,ib,4mb,4mc,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr;2,4,d,34,35,36,37,38,39,3k,3l,3m,3n,3o,3p,a8,a9,aa,ab,ac,ad,ao,ap,aq,ar,as,at,hd,he,hf,hg,hh,ht,hu,hv,hw,hx,oi,oj,ok,ol,oy,oz,p0,p1,vn,vo,vp,vq,w3,w4,w5,w6,12r,12s,12t,12u,12v,137,138,139,13a,13b,19w,19x,19y,19z,1a0,1ac,1ad,1ae,1af,1ag,1gw,1gx,1gy,1gz,7sk,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,7t0,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,7zp,1v9;2,4,e,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr;2,4,f,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr;2,4,g,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr;2,4,h,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr;2,4,i,4md,4me,4mf,4mg,4mh,4mi,4mj,4mk,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm;2,3,-8,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,4,-8,4mg,4mh,4mi,4mj,4mk,4ml,4mm,4mn,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr;2,3,-7,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,4,-7,7rx,7ry,7rz,4m8,4m9,4ma,4mb,4mc,4md,4me,4mf,16jv,16jw,16jx,16jy,16jz,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h5,1hc;2,3,-6,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,4,-6,4le,4lf,7rk,7rl,1g2,1g3,7ro,7rp,7rq,7rr,7rs,7rt,7ru,7rv,7rw,7rx,7ry,7rz,16jk,16jl,16jm,16jn,16jo,16jp,16jq,16jr,16js,16jt,16ju,16jv,16jw,16jx,16jy,16jz;2,3,-5,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3,7we;2,4,-5,7po,tu6,7q2,tuk,tum,7qg,tuy,tv0,tv2,7qu,tvc,tve,tvg,tvi,7r8,tvq,tvs,tvu,tvw,tvy,7rk,7rl,7rm,tw4,tw6,tw8,twa,twc,twe,16jk,16jl,16jm,twj,twk,twl,twm,twn,two,twp,twq,twr,tws,twt,twu,twv;2,3,-4,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3,7vi,7vs,7vu,7vw,u0e,7w0,7w2,7w4,7w6,u0o,u0q,u0s,u0u;2,4,-4,tts,ttu,ttw,tty,tu0,tu2,tu4,tu6,tu8,tua,tuc,tue,tug,tui,tuk,tum,tuo,tuq,tus,tuu,tuw,tuy,tv0,tv2,tv4,tv6,tv8,tva,tvc,tve,tvg,tvi,tvk,tvm,tvo,tvq,tvs,tvu,tvw,tvy,tw0,tw2,tw4,tw6,tw8,twa,twc,twe,twg,twh,twi,twj,twk,twl,twm,twn,two,twp,twq,twr,tws,twt,twu,twv;2,0,-3,10e,10f,10u,10v,11a,11b,11q,11r,126,127,12m,12n,132,133,13i,13j,13y,13z,14e,14f,14u,14v,15a,15b,15q,15r,166,167,16m,16n;2,1,-3,zy,zz,10e,10f,10u,10v,11a,11b,11q,11r,126,127,12m,12n,132,133,13i,13j,13y,13z,14e,14f,14u,14v,15a,15b,15q,15r,166,167,16m,16n;2,2,-3,zy,zz;2,3,-3,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3,tz8,7v4,7v6,tzo,tzu,u00,u02,u04,7vq,u0a,u0g,u0i,u0k,u0m,u0o,u0q,7wc;2,4,-3,tts,ttu,ttw,tty,tu0,tu2,tu4,7pq,tu8,tua,tuc,tue,tug,tui,tuk,tum,tuo,tuq,tus,tuu,tuw,tuy,tv0,tv2,tv4,tv6,tv8,tva,tvc,tve,tvg,tvi,tvk,tvm,tvo,tvq,tvs,tvu,tvw,tvy,tw0,tw2,tw4,tw6,tw8,twa,twc,twe,twg,twh,twi,twj,twk,twl,twm,twn,two,twp,twq,twr,tws,twt,twu,twv;2,0,-2,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,x,y,z,10,11,12,13,14,15,16,17,18,19,1a,1b,1e,1f,1g,1h,1i,1j,1k,1l,1m,1n,1o,1p,1q,1r,1t,1u,1v,1w,1x,1y,1z,20,21,22,23,24,25,26,27,29,2a,2b,2c,2d,2e,2f,2g,2h,2i,2j,2k,2l,2m,2n,2p,2q,2r,2s,2t,2u,2v,2w,2x,2y,2z,30,31,32,33,36,37,38,39,3a,3b,3c,3d,3e,3f,3g,3h,3i,3j,3l,3m,3n,3o,3p,3q,3r,3s,3t,3u,3v,3w,3x,3y,3z,41,42,43,44,45,46,47,48,49,4a,4b,4c,4d,4e,4f,4h,4i,4j,4k,4l,4m,4n,4o,4p,4q,4r,4s,4t,4u,4v,4x,4y,4z,50,51,52,53,54,55,56,57,58,59,5a,5b,7l,7m,7n,7o,7p,7q,7r,7s,7t,7u,7v,7w,7x,7y,7z,81,82,83,84,85,86,87,88,89,8a,8b,8c,8d,8e,8f,8h,8i,8j,8k,8l,8m,8n,8o,8p,8q,8r,8s,8t,8u,8v,8x,8y,8z,90,91,92,93,94,95,96,97,98,99,9a,9b,9d,9e,9f,9g,9h,9i,9j,9k,9l,9m,9n,9o,9p,9q,9r,9t,9u,9v,9w,9x,9y,9z,a0,a1,a2,a3,a4,a5,a6,a7,a9,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ap,aq,ar,as,at,au,av,aw,ax,ay,az,b0,b1,b2,b3,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,c1,c2,c3,c4,c5,c6,c7,c8,c9,ca,cb,cc,cd,ce,cf,ep,eq,er,es,et,eu,ev,ew,ex,ey,ez,f0,f1,f2,f3,f5,f6,f7,f8,f9,fa,fb,fc,fd,fe,ff,fg,fh,fi,fj,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,g1,g2,g3,g4,g5,g6,g7,g8,g9,ga,gb,gc,gd,ge,gf,gh,gi,gj,gk,gl,gm,gn,go,gp,gq,gr,gs,gt,gu,gv,gx,gy,gz,h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,ha,hb,hd,he,hf,hg,hh,hi,hj,hk,hl,hm,hn,ho,hp,hq,hr,ht,hu,hv,hw,hx,hy,hz,i0,i1,i2,i3,i4,i5,i6,i7,i9,ia,ib,ic,id,ie,if,ig,ih,ii,ij,ik,il,im,in,ip,iq,ir,is,it,iu,iv,iw,ix,iy,iz,j0,j1,j2,j3,j5,j6,j7,j8,j9,ja,jb,jc,jd,je,jf,jg,jh,ji,jj,lt,lu,lv,lw,lx,ly,lz,m0,m1,m2,m3,m4,m5,m6,m7,m9,ma,mb,mc,md,me,mf,mg,mh,mi,mj,mk,ml,mm,mn,mp,mq,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n3,n5,n6,n7,n8,n9,na,nb,nc,nd,ne,nf,ng,nh,ni,nj,nl,nm,nn,no,np,nq,nr,ns,nt,nu,nv,nw,nx,ny,nz,o1,o2,o3,o4,o5,o6,o7,o8,o9,oa,ob,oc,od,oe,of,oh,oi,oj,ok,ol,om,on,oo,op,oq,or,os,ot,ou,ov,ox,oy,oz,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,pa,pb,pd,pe,pf,pg,ph,pi,pj,pk,pl,pm,pn,po,pp,pq,pr,pt,pu,pv,pw,px,py,pz,q0,q1,q2,q3,q4,q5,q6,q7,q9,qa,qb,qc,qd,qe,qf,qg,qh,qi,qj,qk,ql,qm,qn,sx,sy,sz,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,td,te,tf,tg,th,ti,tj,tk,tl,tm,tn,to,tp,tq,tr,tt,tu,tv,tw,tx,ty,tz,u0,u1,u2,u3,u4,u5,u6,u7,u9,ua,ub,uc,ud,ue,uf,ug,uh,ui,uj,uk,ul,um,un,up,uq,ur,us,ut,uu,uv,uw,ux,uy,uz,v0,v1,v2,v3,v5,v6,v7,v8,v9,va,vb,vc,vd,ve,vf,vg,vh,vi,vj,vl,vm,vn,vo,vp,vq,vr,vs,vt,vu,vv,vw,vx,vy,vz,w1,w2,w3,w4,w5,w6,w7,w8,w9,wa,wb,wc,wd,we,wf,wh,wi,wj,wk,wl,wm,wn,wo,wp,wq,wr,ws,wt,wu,wv,wx,wy,wz,x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xd,xe,xf,xg,xh,xi,xj,xk,xl,xm,xn,xo,xp,xq,xr,100,101,102,103,104,105,106,107,108,109,10a,10b,10c,10d,10e,10f,10g,10h,10i,10j,10k,10l,10m,10n,10o,10p,10q,10r,10s,10t,10u,10v,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11a,11b,11c,11d,11e,11f,11g,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11s,11t,11u,11v,11w,11x,11y,11z,120,121,122,123,124,125,126,127,128,129,12a,12b,12c,12d,12e,12f,12g,12h,12i,12j,12k,12l,12m,12n,12o,12p,12q,12r,12s,12t,12u,12v,12w,12x,12y,12z,130,131,132,133,134,135,136,137,138,139,13a,13b,13c,13d,13e,13f,13g,13h,13i,13j,13k,13l,13m,13n,13o,13p,13q,13r,13s,13t,13u,13v,13w,13x,13y,13z,140,141,142,143,144,145,146,147,148,149,14a,14b,14c,14d,14e,14f,14g,14h,14i,14j,14k,14l,14m,14n,14o,14p,14q,14r,14s,14t,14u,14v,14w,14x,14y,14z,150,151,152,153,154,155,156,157,158,159,15a,15b,15c,15d,15e,15f,15g,15h,15i,15j,15k,15l,15m,15n,15o,15p,15q,15r,15s,15t,15u,15v,15w,15x,15y,15z,160,161,162,163,164,165,166,167,168,169,16a,16b,16c,16d,16e,16f,16g,16h,16i,16j,16k,16l,16m,16n;2,1,-2,zk,zl,zm,zn,zo,zp,zq,zr,zs,zt,zu,zv,zw,zx,zy,zz,100,101,102,103,104,105,106,107,108,109,10a,10b,10c,10d,10e,10f,10g,10h,10i,10j,10k,10l,10m,10n,10o,10p,10q,10r,10s,10t,10u,10v,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11a,11b,11c,11d,11e,11f,11g,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11s,11t,11u,11v,11w,11x,11y,11z,120,121,122,123,124,125,126,127,128,129,12a,12b,12c,12d,12e,12f,12g,12h,12i,12j,12k,12l,12m,12n,12o,12p,12q,12r,12s,12t,12u,12v,12w,12x,12y,12z,130,131,132,133,134,135,136,137,138,139,13a,13b,13c,13d,13e,13f,13g,13h,13i,13j,13k,13l,13m,13n,13o,13p,13q,13r,13s,13t,13u,13v,13w,13x,13y,13z,140,141,142,143,144,145,146,147,148,149,14a,14b,14c,14d,14e,14f,14g,14h,14i,14j,14k,14l,14m,14n,14o,14p,14q,14r,14s,14t,14u,14v,14w,14x,14y,14z,150,151,152,153,154,155,156,157,158,159,15a,15b,15c,15d,15e,15f,15g,15h,15i,15j,15k,15l,15m,15n,15o,15p,15q,15r,15s,15t,15u,15v,15w,15x,15y,15z,160,161,162,163,164,165,166,167,168,169,16a,16b,16c,16d,16e,16f,16g,16h,16i,16j,16k,16l,16m,16n;2,2,-2,zk,zl,zm,zn,zo,zp,zq,zr,zs,zt,zu,zv,zw,zx,zy,zz;2,3,-2,1i8,1i9,1ia,1ib,1ic,1id,1ie,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1ja,1jb,1jc,1jr,1js,1jt,1k8,1k9,1ka,1kp,1kq,1kr;2,4,-2,7pc,7pe,1e1,1e2,1e3,1e4,tu8,tua,7pw,1ei,1ej,1ek,1el,tuo,tuq,tus,7qg,1f0,1f1,1f2,1f3,tv4,tv6,tv8,tva,tvc,7qy,1fg,1fh,1fi,1fj,tvk,tvm,tvo,tvq,tvs,tvu,tvw,tvx,7ri,tw0,tw2,tw4,tw6,tw8,twa,twc,twd,twe,twg,twh,twi,twj,twk,twl,twm,twn,two,twp,twq,twr,tws,twt,twu,twv,1h3,1hj;2,0,-1,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,10,11,12,13,14,15,16,17,18,19,1a,1b,1c,1d,1e,1f,1g,1h,1i,1j,1k,1l,1m,1n,1o,1p,1q,1r,1s,1t,1u,1v,1w,1x,1y,1z,20,21,22,23,24,25,26,27,28,29,2a,2b,2c,2d,2e,2f,2g,2h,2i,2j,2k,2l,2m,2n,2o,2p,2q,2r,2s,2t,2u,2v,2w,2x,2y,2z,30,31,32,33,34,35,36,37,38,39,3a,3b,3c,3d,3e,3f,3g,3h,3i,3j,3k,3l,3m,3n,3o,3p,3q,3r,3s,3t,3u,3v,3w,3x,3y,3z,40,41,42,43,44,45,46,47,48,49,4a,4b,4c,4d,4e,4f,4g,4h,4i,4j,4k,4l,4m,4n,4o,4p,4q,4r,4s,4t,4u,4v,4w,4x,4y,4z,50,51,52,53,54,55,56,57,58,59,5a,5b,5p,5r,64,65,67,6k,6l,6n,70,71,73,7k,7l,7m,7n,7o,7p,7q,7r,7s,7t,7u,7v,7w,7x,7y,7z,80,81,82,83,84,85,86,87,88,89,8a,8b,8c,8d,8e,8f,8g,8h,8i,8j,8k,8l,8m,8n,8o,8p,8q,8r,8s,8t,8u,8v,8w,8x,8y,8z,90,91,92,93,94,95,96,97,98,99,9a,9b,9c,9d,9e,9f,9g,9h,9i,9j,9k,9l,9m,9n,9o,9p,9q,9r,9s,9t,9u,9v,9w,9x,9y,9z,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,ca,cb,cc,cd,ce,cf,ct,cv,d9,db,dp,dr,e5,e7,eo,ep,eq,er,es,et,eu,ev,ew,ex,ey,ez,f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,fa,fb,fc,fd,fe,ff,fg,fh,fi,fj,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,g0,g1,g2,g3,g4,g5,g6,g7,g8,g9,ga,gb,gc,gd,ge,gf,gg,gh,gi,gj,gk,gl,gm,gn,go,gp,gq,gr,gs,gt,gu,gv,gw,gx,gy,gz,h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,ha,hb,hc,hd,he,hf,hg,hh,hi,hj,hk,hl,hm,hn,ho,hp,hq,hr,hs,ht,hu,hv,hw,hx,hy,hz,i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,ia,ib,ic,id,ie,if,ig,ih,ii,ij,ik,il,im,in,io,ip,iq,ir,is,it,iu,iv,iw,ix,iy,iz,j0,j1,j2,j3,j4,j5,j6,j7,j8,j9,ja,jb,jc,jd,je,jf,jg,jh,ji,jj,jx,jy,jz,kd,ke,kf,kt,ku,kv,l8,l9,la,lb,ls,lt,lu,lv,lw,lx,ly,lz,m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,ma,mb,mc,md,me,mf,mg,mh,mi,mj,mk,ml,mm,mn,mo,mp,mq,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,na,nb,nc,nd,ne,nf,ng,nh,ni,nj,nk,nl,nm,nn,no,np,nq,nr,ns,nt,nu,nv,nw,nx,ny,nz,o0,o1,o2,o3,o4,o5,o6,o7,o8,o9,oa,ob,oc,od,oe,of,og,oh,oi,oj,ok,ol,om,on,oo,op,oq,or,os,ot,ou,ov,ow,ox,oy,oz,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,pa,pb,pc,pd,pe,pf,pg,ph,pi,pj,pk,pl,pm,pn,po,pp,pq,pr,ps,pt,pu,pv,pw,px,py,pz,q0,q1,q2,q3,q4,q5,q6,q7,q8,q9,qa,qb,qc,qd,qe,qf,qg,qh,qi,qj,qk,ql,qm,qn,r1,r2,r3,rh,ri,rj,rw,rx,ry,rz,sc,sd,se,sf,sw,sx,sy,sz,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc,td,te,tf,tg,th,ti,tj,tk,tl,tm,tn,to,tp,tq,tr,ts,tt,tu,tv,tw,tx,ty,tz,u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,ua,ub,uc,ud,ue,uf,ug,uh,ui,uj,uk,ul,um,un,uo,up,uq,ur,us,ut,uu,uv,uw,ux,uy,uz,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,va,vb,vc,vd,ve,vf,vg,vh,vi,vj,vk,vl,vm,vn,vo,vp,vq,vr,vs,vt,vu,vv,vw,vx,vy,vz,w0,w1,w2,w3,w4,w5,w6,w7,w8,w9,wa,wb,wc,wd,we,wf,wg,wh,wi,wj,wk,wl,wm,wn,wo,wp,wq,wr,ws,wt,wu,wv,ww,wx,wy,wz,x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,xg,xh,xi,xj,xk,xl,xm,xn,xo,xp,xq,xr,y1,y2,y3,y5,y6,y7,yh,yi,yj,yl,ym,yn,z1,z2,z3,zh,zi,zj,100,101,102,103,104,105,106,107,108,109,10a,10b,10c,10d,10e,10f,10g,10h,10i,10j,10k,10l,10m,10n,10o,10p,10q,10r,10s,10t,10u,10v,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11a,11b,11c,11d,11e,11f,11g,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11s,11t,11u,11v,11w,11x,11y,11z,120,121,122,123,124,125,126,127,128,129,12a,12b,12c,12d,12e,12f,12g,12h,12i,12j,12k,12l,12m,12n,12o,12p,12q,12r,12s,12t,12u,12v,12w,12x,12y,12z,130,131,132,133,134,135,136,137,138,139,13a,13b,13c,13d,13e,13f,13g,13h,13i,13j,13k,13l,13m,13n,13o,13p,13q,13r,13s,13t,13u,13v,13w,13x,13y,13z,140,141,142,143,144,145,146,147,148,149,14a,14b,14c,14d,14e,14f,14g,14h,14i,14j,14k,14l,14m,14n,14o,14p,14q,14r,14s,14t,14u,14v,14w,14x,14y,14z,150,151,152,153,154,155,156,157,158,159,15a,15b,15c,15d,15e,15f,15g,15h,15i,15j,15k,15l,15m,15n,15o,15p,15q,15r,15s,15t,15u,15v,15w,15x,15y,15z,160,161,162,163,164,165,166,167,168,169,16a,16b,16c,16d,16e,16f,16g,16h,16i,16j,16k,16l,16m,16n;2,1,-1,d,f,t,v,18,19,1b,1o,1p,1r,24,25,27,2k,2l,2n,30,33,3j,3z,4f,4v,5b,5r,67,6n,73,7h,7j,7x,7z,8d,8f,8t,8v,99,9b,9o,9p,9r,a4,a5,a7,al,an,b3,bj,bw,bx,bz,cc,cf,cv,db,do,dr,e7,ek,el,em,en,ez,f0,f1,f3,fg,fh,fj,fx,fz,gd,gf,gt,gv,h9,hb,hp,hr,i5,i7,il,in,j1,j3,jg,jh,jj,jx,jz,kc,kd,kf,ks,kt,kv,l8,lb,lo,lp,lq,lr,m4,m5,m6,m7,ml,mm,mn,n1,n2,n3,nh,ni,nj,nx,ny,nz,od,oe,of,ot,ou,ov,p9,pa,pb,pp,pq,pr,q5,q6,q7,ql,qm,qn,r1,r2,r3,rh,ri,rj,ry,rz,sf,st,su,sv,t9,ta,tb,tp,tq,tr,u6,u7,ul,um,un,v2,v3,vi,vj,vy,vz,we,wf,wt,wu,wv,xa,xb,xq,xr,y5,y6,y7,ym,yn,z1,z2,z3,zh,zi,zj,zk,zl,zm,zn,zo,zp,zq,zr,zs,zt,zu,zv,zw,zx,zy,zz,100,101,102,103,104,105,106,107,108,109,10a,10b,10c,10d,10e,10f,10g,10h,10i,10j,10k,10l,10m,10n,10o,10p,10q,10r,10s,10t,10u,10v,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11a,11b,11c,11d,11e,11f,11g,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11s,11t,11u,11v,11w,11x,11y,11z,120,121,122,123,124,125,126,127,128,129,12a,12b,12c,12d,12e,12f,12g,12h,12i,12j,12k,12l,12m,12n,12o,12p,12q,12r,12s,12t,12u,12v,12w,12x,12y,12z,130,131,132,133,134,135,136,137,138,139,13a,13b,13c,13d,13e,13f,13g,13h,13i,13j,13k,13l,13m,13n,13o,13p,13q,13r,13s,13t,13u,13v,13w,13x,13y,13z,140,141,142,143,144,145,146,147,148,149,14a,14b,14c,14d,14e,14f,14g,14h,14i,14j,14k,14l,14m,14n,14o,14p,14q,14r,14s,14t,14u,14v,14w,14x,14y,14z,150,151,152,153,154,155,156,157,158,159,15a,15b,15c,15d,15e,15f,15g,15h,15i,15j,15k,15l,15m,15n,15o,15p,15q,15r,15s,15t,15u,15v,15w,15x,15y,15z,160,161,162,163,164,165,166,167,168,169,16a,16b,16c,16d,16e,16f,16g,16h,16i,16j,16k,16l,16m,16n;2,2,-1,f,7j,en,lr,n1,nh,nx,st,su,sv,t9,ta,tp,tq,u5,u6,ul,um,v1,v2,zk,zl,zm,zn,zo,zp,zq,zr,zs,zt,zu,zv,zw,zx,zy,zz,10e,10f,10u,10v,11a,11q,126;2,4,-1,1eo,1ep,1eq,1er,1es,1et,1eu,1ev,1ew,1ex,1ey,1ez,1f4,1f5,1f6,1f7,1f8,1f9,1fa,1fb,1fc,1fd,1fe,1ff,1fg,1fh,1fi,7r4,7r6,7r8,7ra,7rc,1fu,1fv,1fw,1fx,1fy,tw0,tw2,tw4,tw6,tw8,7ru,7rv,twc,twd,twf,twg,twh,twi,twj,twk,twl,twm,twn,two,twp,twq,twr,tws,twt,twu,twv,1hb,1m5,1m6,1m7,1ml,1mm,1mn,1n1,1n2,1n3,1nh,1ni,1nj;2,3,-a,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,4,-a,4m8,4m9,4ma,4mb,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,4u8,4u9,1ow,1ox,4uq,1pe;2,3,-9,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,4,-9,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr;2,3,-k,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,3,-j,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,3,-i,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,3,-h,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,3,-g,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,3,-f,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,3,-e,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,3,-d,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,3,-c,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,4,-c,38j,38k,37,38,3o,6f9,6fa,6fb,6fc,6fd,1kzu,6ff,6fg,6fh,6fi,39w,1l05,1l06,1l07,1l08,1l09,1l0a,1l0b,1l0c,1l0d,1l0e,3fn,3fo,ab,ac,as,6md,6me,6mf,6mg,6mh,1l6y,6mj,6mk,6ml,6mm,6mn,3h0,1l79,1l7a,1l7b,1l7c,1l7d,1l7e,1l7f,1l7g,1l7h,1l7i,1l7j,3mr,3ms,hf,hg,hv,hw,6th,6ti,6tj,6tk,6tl,6tm,6tn,6to,6tp,6tq,6tr,3o4,1led,1lee,1lef,1leg,1leh,1lei,1lej,1lek,1lel,1lem,1len,3tv,3tw,3tx,oj,ok,ol,oz,p0,p1,70m,70n,70o,70p,70q,70r,70s,70t,70u,70v,3v8,1llh,1lli,1llj,1llk,1lll,1llm,1lln,1llo,1llp,1llq,1llr,40z,410,411,412,vn,vo,vp,vq,w3,w4,w5,w6,77r,77s,77t,77u,77v,77w,77x,77y,77z,42c,42d,1lsm,1lsn,1lso,1lsp,1lsq,1lsr,1lss,1lst,1lsu,1lsv,483,484,485,486,487,12r,12s,12t,12u,12v,137,138,139,13a,13b,7ew,7ex,7ey,7ez,7f0,7f1,7f2,7f3,49g,49h,1lzq,1lzr,1lzs,1lzt,1lzu,1lzv,1lzw,1lzx,1lzy,1lzz,4f7,4f8,4f9,4fa,4fb,4fc,19v,19w,19x,19y,19z,1a0,1ab,1ac,1ad,1ae,1af,1ag,7m1,7m2,7m3,7m4,7m5,7m6,7m7,4gj,4gk,4gl,4gm,1m6v,1m6w,1m6x,1m6y,1m6z,1m70,1m71,1m72,1m73,4mb,4mc,4md,4me,4mf,4mg,4mh,4mi,4mj,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,7sy,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,4nm,4nq,4nr,1me0,1me1,1me2,1me3,1me4,1me5,1me6,1me7,808,809,80a,80b,80c,80d,80e,80f,1ml4,1ml5,1ml6,1ml7,1ml8,1ml9,1mla,1mlb,87d,87e,87f,87g,87h,87i,87j,1ms9,1msa,1msb,1msc,1msd,1mse,1msf,8ei,8ej,8ek,8el,8em,8en,1mze,1mzf,1mzg,1mzh,1mzi,1mzj,8lo,8lp,8lq,8lr,1n6k,1n6l,1n6m,1n6n;2,3,-b,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;2,4,-b,3mg,h2,h3,h4,hi,hj,hk,6tc,hz,i0,1le8,3tk,5dgm,o7,o8,3u1,5dh2,on,oo,op,70g,70h,p3,p4,p5,1llc,1lld,5dnq,414,415,5do6,vs,vt,77k,77l,77m,w8,w9,1lsg,1lsh,1lsi,5duu,489,5dva,12x,7eo,7ep,7eq,7er,13d,1lzk,1lzl,1lzm,1lzn,5e1y,4fd,5e2e,1a1,7ls,7lt,7lu,7lv,1ah,1m6o,1m6p,1m6q,1m6r,5e92,4mf,4mg,4mh,4mi,4mj,4mk,4ml,4mm,4mn,1gw,1gx,1gy,1gz,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hc,1hd,1he,1hf,1hg,1hh,1hi,1hj,1hk,1hl,1hm,1hn,1ho,1hp,1hq,1hr,1mds,1mdt,1mdu,1mdv,5eg6,4tl,4tm,4tn,4to,5egm,1o9,1oa,1ob,1oc,800,801,802,1op,1oq,1or,1os,4ul,4um,4un,1mkw,1mkx,1mky,1p9,1pa,1pb,5ena,50p,50q,5enq,1vd,1ve,519,51a,874,875,1vt,1vu,1vx,1vy,1ms0,1ms1,1wd,1we,1wu,5eue,57t,5euu,22h,22i,22j,58c,58d,58e,8e8,8e9,22x,22y,22z,230,231,232,1mz4,1mz5,23e,23f,23g,23h,23i,5f1i,5f1y,29m,29n,5fg,5fh,2a2,2a3,2a4,2a5,2ai,2aj,2ak,2al,8mf,8mg,8mh,8mi,8mj,8mk,8ml,8mm,8mn,1gvr,1gvs,1gvt,1gvu,1gvv,1gvw,1gvx,1gvy,1gvz,1gw7,1gw8,1gw9,1gwa,1gwb,1gwc,rm5,1gwe,1gwf,1gwn,1gwo,1gwp,1gwq,1gwr,1gws,rml,1gwu,1gwv,1gx3,1gx4,1gx5,1gx6,1gx7,1gx8,1gx9,1gxa,1gxb,2m0n,2m0o,2m0p,2m0q,2m0r,2m0s,2m0t,2m0u,2m0v,5f8m,5f92,8tj,3ueg,3ueh,3uei,3uej,3uek,3uel,3uem,8tr,1h2v,1h33,1h3b,4gjv,4gjw,1h3j,1h3r,4gkb,4gkc,1h3z,1h47,3bhk,3bhl,3bhm,3bhn,3bho,3bhp,3bhq,1h4f,2m7r,5rzu,5rzw,2m7z,5ffq,5fg6,3ula,2mcm,90n,3ulk,3ull,3ulm,3uln,3ulo,3ulp,3ulq,90v,1h9z,3bnd,2pm,1ha7,1haf,3bnt,s0f,1hav,3bo9,s0v,1hbb,3boo,3bop,3boq,3bor,3bos,3bot,3bou,1hbj,2mev,3bp6,3bp8,2mf3,5fmu,5fna,2mjq,97r,3uso,3usp,3usq,3usr,3uss,3ust,3usu,97z,1hh3,3buh,2ws,1hhb,1hhj,3bux,1hhr,1hhz,3bvd,1hi7,1hif,hq7c,hq7d,3bvu,3bvv,3bvw,3bvx,3bvy,1hin,2mlz,3bwa,3bwc,2mm7,5fty,5fue,2mqu,9ev,5fvs,3uzt,3uzu,3uzv,3uzw,3uzx,3uzy,9f3,1ho7,5fw8,3c1l,g2bf,g2bg,1hof,1hon,5fwo,3c21,sen,1hp3,hqe0,hqe1,sf3,1hpj,3c2y,3c2z,3c30,3c31,3c32,1hpr,2mt3,3c3e,3c3g,2mtb;2,5,-b,2lu0,2lu1,2lu2,rgr,2lu4,2lu5,2lu6,2luh,2lui,rh7,2luk,2lul,2luy,2luz,2lv0,2lvf,2m14,5one,5ong,2m1a,2m1l,3bbu,3bbw,2m1p,2m22,2m24,2m2j,2m88,3bii,3bik,2m8e,2m8p,3biy,3bj0,2m8t,2m96,2m98,2m9n,2mfc,3bpm,3bpo,2mfi,2mft,3bq2,3bq4,2mfx,2mga,2mgc,2mgr,2mmg,3bwq,3bws,2mmm,2mmx,3bx6,3bx8,2mn1,2mne,2mng,2mnv;2,3,-m,xy,xz,ye,yf,yv,14m,152,15i,15j,15z,16e,16f,1ba,1bq,1c6,1d2,1d3,1di,1dj,3teq,3ter,3tes,3tet,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,3tf6,3tf7,3tf8,3tf9,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3,1jb,qtz,1k6,1k7,1kn;2,4,-m,sm,sn,t2,t3,tj,zq,106,107,10n,113,16u,17b,17r,187,qo7,1ef,1ev,1fb,qpz,1lj,1lz,1mf,qxh,qxi,qxj,qxx,qxy,qxz,hh1,hh2,hh3,4yf,4yu,1t3,4z9,1ti,1tj,3aro,1tx,1ty,1tz,r4o,r54,ho5,ho6,ho7,ho8,hom,hon,3ays,rbp,rbq,rbr,rc5,rc6,rc7,hv9,hva,hvb,i10,i84,i85,5rq,if9,2me,ilh,ilx,2th,isl,305;2,3,-l,1i8,1i9,1ia,1ib,1ic,1id,1ie,1if,1ig,1ih,1ii,1ij,1ik,1il,1im,1in,1io,1ip,1iq,1ir,1is,1it,1iu,1iv,1iw,1ix,1iy,1iz,1j0,1j1,1j2,1j3;3,4,0,3s1a,3s1b,3s8e,3s8f,6u6,6u7,3sfi,3sfj,71a,71b,3smm,3smn,78e,78f,3stq,3str,7fi,7fj,3t0u,3t0v,7mm,7mn,3t7y,3t7z,3tf2,3tf3,3tm6,3tm7,3tta,3ttb,3u0e,3u0f,3u7i,3u7j,3uem,3uen,3ulq,3ulr,3usu,3usv,3uzy,3uzz;3,4,1,6fv,3s0w,3s0x,3s17,3s1n,3s23,393v,3s2k,3s2l,3s2m,3s2n,6odm,6mp,6mz,3s80,3s81,3s8b,3s8r,3s97,39az,3s9o,3s9p,3s9q,3s9r,6okq,6ts,6tt,6u3,3sf4,3sf5,3sff,3sfv,3sgb,39i3,39i4,39i5,39i6,39i7,6oru,70w,70x,717,3sm8,3sm9,3smj,3smz,3snf,39p7,3snw,3snx,3sny,3snz,6oyy,780,781,3stc,3std,78r,xm,3su3,3suj,39wb,3sv0,3sv1,3sv2,3sv3,6p62,7f4,7f5,3t0g,3t0h,3t17,3t1n,3a3f,3a3g,3a3h,3a3i,3a3j,6pd6,atws,4f71,bj72,bj73,7ugs,7ugt,fqwu,fqwv,7m8,7m9,3t7k,3t7l,3t8b,3t8r,3aaj,3t98,3t99,3t9a,3t9b,6pka,bje4,bje5,bje6,bje7,7unw,7unx,aqym,aqyn,3teo,3tep,3tff,3tfv,3ahn,3tgc,3tgd,3tge,3tgf,6pre,aub0,4fl9,bjla,bjlb,7uv0,7uv1,hrzy,hrzz,3tls,3tlt,3tmj,3tmz,3aor,3aos,3aot,3aou,3aov,6pyi,3tsw,3tsx,6q5m,6q5n,6q5o,6q5p,6q5q,6q5r,3u00,3u01,3u1p,3u1q,3u1r,6qcs,3u74,3u75,3u8s,3u8t,3u8u,3u8v,6qjv,3ue8,3ue9,6qqi,3ufv,3ufw,3ufx,3ufy,3ufz,6qqy,3ukv,3ulc,3uld,6qxl,3umy,3umz,3un0,3un1,3un2,3un3,6qy1,3usg,3ush,3utl,6r4n,6r4o,3uu1,3uu2,3uu3,3uu4,3uu5,3uu6,3uu7,6r53,6r54,3uzk,3uzl,3v0p,3v14,3v15,3v16,3v17,3v18,3v19,3v1a,3v1b,6rc7;3,5,1,7uha,7uhb;3,4,2,3rxj,3rxk,38yx,3rxm,3rxn,18,19,4e2e,1j,1k,1l,1m,1n,4e2k,1hs6,1z,20,21,22,23,1hsc,4e3a,2f,2g,2h,2i,2j,4e3g,4e3q,c12f,c12g,astl,c12i,c12j,4e3w,3f,6fb,3s0n,3s13,3s1j,55,56,57,3s1z,5l,5m,5n,3s28,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,6odk,3s4n,3s4o,3961,3s4q,3s4r,8c,8d,4e9i,8n,8o,8p,8q,8r,4e9o,1hza,93,94,95,96,97,1hzg,4eae,9j,9k,9l,9m,9n,4eak,4eau,c19j,c19k,at0p,c19m,c19n,4eb0,aj,6mf,3s7r,3s87,3s8n,c8,c9,ca,cb,cc,3s93,co,cp,cq,cr,cs,3s9c,3s9d,3s9e,3s9f,3s9g,3s9h,3s9i,3s9j,d6,d7,6oko,dm,3sbr,3sbs,39d5,3sbu,3sbv,fg,fh,4egm,fr,fs,ft,fu,fv,4egs,1i6e,g7,g8,g9,ga,gb,1i6k,4ehi,gn,go,gp,gq,gr,4eho,4ehy,c1gn,c1go,at7t,c1gq,c1gr,4ei4,hm,hn,6tj,i2,3sev,ii,3sfb,iy,3sfr,jc,jd,je,jf,jg,3sg6,3sg7,js,jt,ju,jv,jw,39hs,39ht,3sgi,3sgj,3sgk,3sgl,3sgm,3sgn,k9,ka,kb,6ors,kp,kq,kr,3siv,3siw,3six,3siy,3siz,mk,4enq,mv,mw,mx,my,mz,4enw,1idi,nb,nc,nd,ne,nf,1ido,4eom,nr,ns,nt,nu,nv,4eos,4ep2,c1nr,c1ns,atex,c1nu,c1nv,4ep8,oq,or,70n,3slz,3smf,3smv,qg,qh,qi,qj,qk,3sna,3snb,qw,qx,qy,qz,r0,3snk,3snl,3snm,3snn,3sno,3snp,3snq,3snr,rd,re,6oyw,ru,3spz,3sq0,3sq1,3sq2,3sq3,to,4euu,tz,u0,u1,u2,u3,4ev0,1ikm,uf,ug,uh,ui,uj,1iks,4evq,uv,uw,ux,uy,uz,4evw,4ew6,c1uv,c1uw,atm1,c1uy,c1uz,4ewc,vu,vv,77r,3st3,3stj,3stz,xl,xm,xn,xo,3sue,3suf,y1,y2,y3,3suo,3sup,3suq,3sur,3sus,3sut,3suu,3suv,6p60,3sx3,3sx4,3sx5,3sx6,3sx7,4f1o,4f1y,113,114,115,116,117,4f24,1irq,11j,11k,11l,11m,11n,1irw,4f2u,11z,120,121,122,123,4f30,4f3a,c21z,c220,att5,c222,c223,4f3g,12y,7ev,3t07,3t0n,3t13,3t1i,3t1j,3a34,3a35,3t1u,3t1v,3t1w,3t1x,3t1y,3t1z,4f6o,byzl,6pd4,7ugg,7ugh,17c,3t47,3t48,3t49,3t4a,3t4b,4f8s,4f92,187,188,189,18a,18b,4f98,1iyu,18n,18o,18p,18q,18r,1iz0,4f9y,193,194,195,196,197,4fa4,4fae,c293,c294,au09,c296,c297,4fak,1a2,7lz,3t7b,3t7r,3t87,3t8m,3t8n,3t8w,3t8x,3t8y,3t8z,3t90,3t91,3t92,3t93,bjds,bjdt,6pk8,7unk,7unl,1eg,3tbb,3tbc,3tbd,3tbe,3tbf,4ffw,4fg6,1fb,1fc,1fd,1fe,1ff,4fgc,1j5y,1fr,1fs,1ft,1fu,1fv,1j64,4fh2,1g7,1g8,1g9,1ga,1gb,4fh8,4fhi,c2g7,c2g8,au7d,c2ga,c2gb,4fho,1h6,4n0,3tef,3tev,3tfb,1iw,1ix,1iy,3tfq,3tfr,1jc,1jd,1je,3tg0,3tg1,3tg2,3tg3,3tg4,3tg5,3tg6,3tg7,4fkw,bzdt,6prc,7uuo,7uup,1lk,3tif,3tig,3ajt,3tii,3tij,4fn0,4fna,1mf,1mg,1mh,1mi,1mj,4fng,1mt,1jd2,1mv,1mw,1mx,1my,1mz,1jd8,4fo5,4fo6,1nb,1nc,1nd,1ne,1nf,4foc,4fom,c2nb,c2nc,aueh,c2ne,c2nf,4fos,7zr,4u3,4u4,3tl3,3tlj,3tlz,3tmf,1q0,1q1,1q2,1q3,3tmu,3tmv,1qg,1qh,1qi,1qj,3aog,3aoh,3tn6,3tn7,3tn8,3tn9,3tna,3tnb,1qw,1qx,1qy,6pyg,1rd,3tpj,3tpk,3aqx,3tpm,3tpn,4fu4,4fue,1tj,1tk,1tl,1tm,1tn,4fuk,1jk6,1tz,1u0,1u1,1u2,1u3,1jkc,4fva,1uf,1ug,1uh,1ui,1uj,4fvg,4fvq,c2uf,c2ug,aull,c2ui,c2uj,4fvw,86v,86w,516,517,518,3ts7,eiw,eix,3tsn,ejc,ejd,eje,3tt3,ejs,ejt,eju,3ttj,ek8,ek9,eka,ekb,3ttz,eko,ekp,ekq,ekr,eks,6q4x,3tua,3tub,3tuc,3tud,3tue,3tuf,el4,el5,el6,el7,el8,el9,6q5c,6q5d,6q5k,6q5l,6q5m,6q5n,6q5o,6q5p,6q5q,6q5r,3twn,3two,3ay1,3twq,3twr,4g18,4g1i,20n,20o,20p,20q,20r,4g1o,1jra,213,214,215,216,217,1jrg,4g2e,21j,21k,21l,21m,21n,4g2k,4g2u,c31j,c31k,c31l,c31m,c31n,4g30,8e0,589,58a,58b,58c,eq0,eqg,eqw,eqx,eqy,247,erc,erd,ere,erf,24n,ers,ert,eru,erv,erw,3u1c,3u1d,3u1e,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,3u1m,3u1n,3u1o,3u1p,3u1q,3u1r,25l,3u3r,3u3s,3b55,3u3u,3u3v,4g8c,4g8m,27r,27s,27t,27u,27v,4g8s,1jye,287,288,289,28a,28b,1jyk,4g9i,28n,28o,28p,28q,28r,4g9o,4g9y,c38n,c38o,c38p,c38q,c38r,4ga4,5fd,5fe,5ff,5fg,2bc,2bd,2be,eyj,eyw,eyx,eyy,eyz,ez0,3u8g,3u8h,3u8i,3u8j,3u8k,3u8l,3u8m,3u8n,3u8o,3u8p,3u8q,3u8r,3u8s,3u8t,3u8u,3u8v,2dy,3uaf,3uag,3uah,3uai,3uaj,3uak,3uav,3uaw,3bc9,3uay,3uaz,4gfg,4gfq,2ev,2ew,2ex,2ey,2ez,4gfw,1k5i,2fb,2fc,2fd,2fe,2ff,1k5o,4ggm,2fr,2fs,2ft,2fu,2fv,4ggs,4gh2,c3fr,c3fs,c3ft,c3fu,c3fv,4gh8,5mg,5mh,5mi,5mj,5mk,rra,rrb,rrc,rrd,rre,rrf,rrg,rrq,rrr,rrs,rrt,rru,rrv,rrw,f5n,f64,3ufk,3ufl,3ufm,3ufn,3ufo,3ufp,3ufq,3ufr,3ufs,3uft,3ufu,3ufv,3ufw,3ufx,3ufy,3ufz,2l8,2li,3uhz,3ui0,3ui1,3ui2,3ui3,4gmk,4gmu,2lz,2m0,2m1,2m2,2m3,4gn0,1kcm,2mf,2mg,2mh,2mi,2mj,1kcs,4gnq,2mv,2mw,2mx,2my,2mz,4gnw,8yl,8ym,8yn,4go6,2nb,2nc,2nd,2ne,2nf,5t8,5t9,5ta,5tb,8z4,8z5,2nr,ry4,3ukg,3ukh,rye,2o7,ryk,3ukw,ryu,rz0,3ulc,3uls,fcr,3um8,fd8,3bo0,3bo1,3bo2,3bo3,3bo4,3umt,3umu,3umv,3umw,3umx,3boa,3bob,3boc,3bod,3boe,3un3,3upj,3upk,3upl,3upm,3upn,1kjq,2tj,2tk,2tl,2tm,2tn,1kjw,4guu,2tz,2u0,2u1,2u2,2u3,4gv0,95p,95q,95r,2ub,4gva,2uf,2ug,2uh,2ui,2uj,60c,60d,60e,60f,2ur,2uv,2uz,s58,s5i,2vb,s5o,s5y,s64,fjv,fkc,3uts,3utt,3utu,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,3uu2,3uu3,3uu4,3uu5,3uu6,3uu7,3uwn,3uwo,3uwp,3uwq,3uwr,1kqu,30n,30o,30p,30q,30r,1kr0,4h1y,313,314,315,316,317,4h24,9ct,9cu,9cv,31f,4h2e,31j,31k,31l,31m,31n,67g,67h,67i,67j,31z,scc,scm,scs,sd2,sd8,fqz,frg,3v0w,3v0x,3v0y,3v0z,3v10,3v11,3v12,3v13,3v14,3v15,3v16,3v17,3v18,3v19,3v1a,3v1b;3,3,3,2ie,2iu,2ja,2jq,2k6;3,4,3,3a,3q,ae,au,hi,hy,o6,om,p2,va,vq,w6,12e,12u,13a,qdy,19i,19y,1gm,1h2,1na,1nq,1o6,1ty,1ue,1uu,1va,51i,6q5c,6q5d,6q5e,6q5f,6q5g,6q5h,6q5i,6q5j,6q5k,6q5l,6q5m,6q5n,6q5o,6q5p,6q5q,6q5r,20m,212,21i,21y,3u1c,3u1d,3u1e,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,3u1m,3u1n,3u1o,3u1p,3u1q,3u1r,27a,27q,286,28m,292,3u8g,3u8h,3u8i,3u8j,3u8k,3u8l,3u8m,3u8n,3u8o,3u8p,3u8q,3u8r,3u8s,3u8t,3u8u,3u8v,2dy,2dz,2e0,2e1,2e2,2e3,2e4,2e5,2e6,2e7,2ee,2ef,2eg,2eh,2ei,2ej,2ek,2el,2em,2en,2eu,2fa,2fq,3ufk,3ufl,3ufm,3ufn,3ufo,3ufp,3ufq,3ufr,3ufs,3uft,3ufu,3ufv,3ufw,3ufx,3ufy,3ufz,8y8,5sw,3umo,3ump,3umq,3bo3,3bo4,3bo5,3bo6,3bo7,3umw,3umx,3umy,3umz,3boc,3bod,3boe,3bof,95c,600,3uts,3utt,3utu,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,3uu2,3uu3,3uu4,3uu5,3uu6,3uu7,3v0w,3v0x,3v0y,3v0z,3v10,3v11,3v12,3v13,3v14,3v15,3v16,3v17,3v18,3v19,3v1a,3v1b;3,4,4,6q5c,6q5d,6q5e,6q5f,6q5g,6q5h,6q5i,6q5j,6q5k,6q5l,6q5m,6q5n,6q5o,6q5p,6q5q,6q5r,3u1c,3u1d,3u1e,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,3u1m,3u1n,3u1o,3u1p,3u1q,3u1r,3u8g,3u8h,3u8i,3u8j,3u8k,3u8l,3u8m,3u8n,3u8o,3u8p,3u8q,3u8r,3u8s,3u8t,3u8u,3u8v,2ds,2dt,2du,2dv,2dw,2dx,2dy,2dz,2e0,2e1,2e2,2e3,2e4,2e5,2e6,2e7,2e8,2e9,2ea,2eb,2ec,2ed,2ee,2ef,2eg,2eh,2ei,2ej,2ek,2el,2em,2en,2ez,2f0,2f1,2f2,2f3,3ufk,3ufl,3ufm,3ufn,3ufo,3ufp,3ufq,3ufr,3ufs,3uft,3ufu,3ufv,3ufw,3ufx,3ufy,3ufz,3bo0,3ump,3umq,3umr,3ums,3umt,3bo6,3bo7,3bo8,3bo9,3boa,3umz,3un0,3un1,3un2,3bof,946,5yu,3uts,3utt,3utu,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,3uu2,3uu3,3uu4,3uu5,3uu6,3uu7,3v0w,3v0x,3v0y,3v0z,3v10,3v11,3v12,3v13,3v14,3v15,3v16,3v17,3v18,3v19,3v1a,3v1b;3,4,5,5,6,j,k,l,79,7a,7n,7o,7p,7q,ed,ee,er,es,et,eu,lh,li,lv,lw,lx,ly,sl,sm,sz,t0,t1,t2,21ls,ekf,eku,ekv,el9,ela,elb,6q5c,6q5d,6q5e,6q5f,6q5g,6q5h,6q5i,6q5j,6q5k,6q5l,6q5m,6q5n,6q5o,6q5p,6q5q,6q5r,erj,ery,3u1c,3u1d,3u1e,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,3u1m,3u1n,3u1o,3u1p,3u1q,3u1r,eyn,ez2,3u8g,3u8h,3u8i,3u8j,3u8k,3u8l,3u8m,3u8n,3u8o,3u8p,3u8q,3u8r,3u8s,3u8t,3u8u,3u8v,2ds,2dt,2du,2dv,2dw,2dx,2dy,2dz,2e0,2e1,2e8,2e9,2ea,2eb,2ec,2ed,2ee,2ef,2eg,2eh,2ei,bw0,bw1,bw2,bw3,bw4,bw5,2eu,2ev,2ew,2ex,2ey,2ez,2f0,2f1,2f2,2f3,2fd,2fe,2ff,2fg,2fh,2fi,2fj,2ft,2fu,2fv,2fw,2fx,2fy,2fz,5m1,2ge,2gf,f5r,f66,3ufk,3ufl,3ufm,3ufn,3ufo,3ufp,3ufq,3ufr,3ufs,3uft,3ufu,3ufv,3ufw,3ufx,3ufy,3ufz,fcv,fda,3bo0,3bo1,3bo2,3bo3,3ums,3umt,3umu,3umv,3umw,3bo9,3boa,3bob,3boc,3bod,3un2,3un3,fjz,fke,3uts,3utt,3utu,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,3uu2,3uu3,3uu4,3uu5,3uu6,3uu7,fr3,fri,3v0w,3v0x,3v0y,3v0z,3v10,3v11,3v12,3v13,3v14,3v15,3v16,3v17,3v18,3v19,3v1a,3v1b;3,3,6,2eu,2fa,2fq,2g6,2gm,2h2,2hi,2hy,2ie,2iu,2ja,2me,2mu,2na;3,4,6,2t,39,6f8,3p,6fo,3ac,3at,53,3ba,6h3,6h6,3br,3s2g,3s2h,3s2i,3bx,3by,3bz,6odj,6l7v,6l,6m,6n,72,73,9x,ad,6mc,at,6ms,6mt,3hg,6n9,3hx,c7,3ie,6o7,6oa,3iv,3s9k,3s9l,3s9m,3j1,3j2,3j3,6okn,6lez,dp,dq,dr,e7,h1,hh,hx,6tx,6ud,6uf,3p1,6uv,3pi,6vb,6ve,3pz,3sgo,3sgp,3sgq,3q5,3q6,3q7,6orr,6lm3,kt,ku,kv,l9,lb,o5,ol,p1,710,711,3vo,71h,71j,3w5,71z,3wm,72f,72i,3x3,3sns,3snt,3snu,3x9,3xa,3xb,6oyv,6lt7,rx,ry,rz,sf,v9,vp,w5,784,785,42s,78l,78n,439,793,43q,79j,79m,447,3suw,3sux,3suy,44d,44e,44f,6p5z,6m0b,z1,z2,z3,zh,zj,12d,12t,139,7f8,7f9,49w,7fp,7fq,7fr,4ad,7g6,7g7,7gm,7gn,154,7gp,7gq,21ue,7h3,3t20,3t21,3t22,4bh,4bi,4bj,21uv,6m7f,165,166,167,21vb,19h,19x,1ad,7mc,7md,4h0,7mt,7mv,4hh,7nb,4hy,7nr,7nt,7nu,4if,3t94,3t95,3t96,4il,4im,4in,6pk7,6mej,1d9,1da,1db,1gl,1h1,1hh,7tg,4o4,7tx,4ol,7uf,4p2,7uv,1jc,7ux,7uy,4pj,3tg8,3tg9,3tga,4pq,4pr,6prb,6mln,1ke,1kf,1np,1o5,1ol,80k,4v8,811,4vp,81j,4w6,81z,821,822,4wn,3tnc,3tnd,3tne,4wu,4wv,6pyf,6msr,1ri,1rj,1ut,1v9,875,876,1vp,ej5,ej6,87n,87o,ejk,ejl,ejm,ejn,884,885,ek0,ek1,ek2,ek3,ek4,88l,88n,ekg,ekh,eki,ekj,ekk,ekl,892,893,895,896,ekw,ekx,eky,ekz,el0,el1,el2,53r,3tug,3tuh,3tui,53z,6q5c,6q5d,6q5e,6q5f,6q5g,6q5h,6q5i,6q5j,6mzv,6mzw,6mzx,6mzy,6mzz,21w,21x,22c,22d,8ea,22t,eqa,8er,eqo,eqp,eqq,eqr,8f8,8f9,er5,er6,er7,er8,8fp,8fq,8fr,erl,erm,ern,ero,erp,8g6,8g7,8g8,8g9,8ga,3u1c,3u1d,3u1e,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,3u1m,3u1n,3u1o,3u1p,3u1q,3u1r,25w,25x,25y,25z,260,28z,290,291,29f,29g,29h,29x,exs,8mv,8nb,8nc,8nd,8ne,3u8g,3u8h,3u8i,3u8j,3u8k,3u8l,3u8m,3u8n,3u8o,3u8p,3u8q,3u8r,3u8s,3u8t,3u8u,3u8v,2cr,2d0,2d1,2d2,2d3,2d4,2dy,2ee,2eo,2ep,2sdu,2sdv,2eu,2f4,2f5,2f6,2seb,2sec,2fa,2fk,2fl,2fm,2fn,2ses,2fq,2g0,2g1,2g2,2g3,2g4,2sf9,2g6,2gg,2gh,2gi,2gj,2gk,2sfp,2gm,2gx,2gy,2gz,2h0,2sg5,2h2,5n5,2hi,f4w,2hy,2ie,8tz,2iu,8uf,8ug,8uh,3ufk,3ufl,3ufm,3ufn,3ufo,3ufp,3ufq,3ufr,3ufs,3uft,3ufu,3ufv,3ufw,3ufx,3ufy,3ufz,2jq,2jz,2k4,2k5,2k6,2k7,2k8,fc0,913,91j,91k,91l,3umj,3umo,3ump,3umq,3bo3,3bo4,3bo5,3bo6,3bo7,3umw,3umx,3umy,3bob,3boc,3bod,3boe,3bof,2r0,2r8,2r9,2ra,2rb,2rc,fj4,987,98n,98o,98p,3utn,3uts,3utt,3utu,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,3uu2,3uu3,3uu4,3uu5,3uu6,3uu7,2yd,2ye,2yf,2yg,fq8,9fs,9ft,3v0r,3v0w,3v0x,3v0y,3v0z,3v10,3v11,3v12,3v13,3v14,3v15,3v16,3v17,3v18,3v19,3v1a,3v1b;3,5,6,mqd,mqe,mqf,mqg,mqh,sv,mxh,mxi,mxj,mxk,mxl,mxy,mxz,my0,myf,21on,n4l,n4m,21p3,n4o,n4p,n52,21pj,n54,n5i,21pz,n5k,n5z,nbp,nbq,nbr,nbs,nbt,nc6,nc7,nc8,ncn,nit,niu,niv,niw,nix,1z9,1za,1zb,26c,26d,26e,26f,26g,26u,26v,27a,2dg,2dh,2di,2dj,2dk,2dx,2dy,2dz,2ed,2ee,2ef,2kk,2kl,2km,2kn,2ko,2l1,2l2,2li,2rp,2rq,2rr;3,4,7,3bk,3bl,3bm,3bn,68,69,6a,6b,3c4,3c5,3c6,6i2,394b,394c,1xpp,1xpq,1xpr,6o,6p,6q,6r,6s,6t,6u,6l89,4np6,394r,277g,394t,72,73,3io,3ip,3iq,3ir,dc,dd,de,df,3j8,3j9,3ja,6p6,39bf,39bg,6p9,6pa,6pb,ds,dt,du,dv,dw,dx,dy,e0,6lfd,4nwa,39bv,39bw,39bx,39by,39bz,3ps,3pt,3pu,3pv,kg,kh,ki,kj,3qc,3qd,6wa,6wb,6wc,6wd,6we,6wf,kw,kx,ky,kz,l0,l1,6lmh,4o3e,4o3f,4o3g,4o3h,4o3i,4o3j,3ww,3wx,3wy,3wz,rk,rl,rm,rn,3xg,3xh,s0,s1,s2,s3,s4,s5,440,441,442,443,yo,yp,yq,yr,44k,z4,z5,z6,z7,z8,z9,4b4,4b5,4b6,4b7,4b8,4b9,4ba,4bb,4bc,4bd,4be,4bf,4bg,4bh,4bi,4bj,15s,15t,15u,15v,15w,15x,15y,15z,160,161,162,163,164,165,166,167,168,169,16a,16b,4i8,4i9,4ia,4ib,4ic,4id,4ie,4if,4ig,4ih,4ii,4ij,4ik,4il,4im,1cw,1cx,1cy,1cz,1d0,1d1,1d2,1d3,1d4,1d5,1d6,1d7,1d8,1d9,1da,1de,1dg,4pc,4pd,4pe,4pf,4pg,4ph,4pi,4pj,4pk,4pl,4pm,4pn,4po,1k0,1k1,1k2,1k3,1k4,1k5,1k6,1k7,1k8,1k9,1ka,1kb,1kc,1kg,1ki,4wg,4wh,4wi,4wj,4wk,4wl,4wm,4wn,4wo,4wp,4wq,4wr,1r4,1r5,1r6,1r7,1r8,1r9,1ra,1rb,1rc,1rd,1re,1rf,1rm,89b,53k,53l,53m,53n,53t,53z,6mzk,6mzl,6mzm,6mzn,6mzo,6mzp,6mzq,6mzr,6mzs,6mzt,6mzu,6mzv,6mzw,6mzx,6mzy,6mzz,1yr,8ge,8gf,3u1c,3u1d,3u1e,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,3u1m,3u1n,3u1o,3u1p,3u1q,3u1r,25d,25e,25f,25g,25h,25i,25j,25k,25l,25u,260,8nh,8ni,8nj,3u8g,3u8h,3u8i,3u8j,3u8k,3u8l,3u8m,3u8n,3u8o,3u8p,3u8q,3u8r,3u8s,3u8t,3u8u,3u8v,2cj,2ck,2cl,2cm,2cn,8uk,8ul,8um,3ufk,3ufl,3ufm,3ufn,3ufo,3ufp,3ufq,3ufr,3ufs,3uft,3ufu,3ufv,3ufw,3ufx,3ufy,3ufz,2jk,2jo,2jp,2jq,91n,91o,91p,3umo,3ump,3umq,3umr,3ums,3bo5,3bo6,3bo7,3bo8,3bo9,3umy,3umz,3un0,3un1,3un2,3bof,62e,62f,62g,62h,62i,62j,62k,2x2,2x3,2x4,2x5,2x6,2x7,2x8,3uts,3utt,3utu,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,3uu2,3uu3,3uu4,3uu5,3uu6,3uu7,2xt,2xv,9ft,9fu,9fv,3v0w,3v0x,3v0y,3v0z,3v10,3v11,3v12,3v13,3v14,3v15,3v16,3v17,3v18,3v19,3v1a,3v1b,351,352,353;3,5,7,5,4nii,38y3,glcc,38y5,4niy,38yj,38yl,4nje,38yz,20q4,38z1,brji,brjj,4nju,38zf,1xks,1xkt,1xku,1xkv,pcb,38zz,pcr,390f,pd7,390v,4tx6,fwb,fwc,fwd,fwe,fwf,4txm,4ty2,4ty3,4ty4,4ty5,4ty6,4ty7,4npm,3957,pho,3959,395a,phr,4nq2,395n,pi4,395p,395q,pi7,4nqi,3963,3964,3965,3966,3967,4nqy,396j,396k,396l,396m,396n,4nre,396z,pjg,pjh,pji,3973,4nru,397f,pjw,pjx,pjy,397j,4nsa,397v,pkc,pkd,pke,397z,4u4a,g3f,g3g,g3h,g3i,g3j,4u4q,4u4r,4u4s,4u4t,4u4u,4u4v,ed,4nwq,4nwr,4nwt,4nwu,4nx6,4nx7,4nx9,4nxa,4nxm,4nxn,4nxo,4nxp,4nxq,4nxr,4ny2,4ny3,4ny4,4ny5,4ny6,4ny7,4nyi,4nyj,4nyn,4nyy,4nyz,4nz3,4nze,4nzf,4nzj,4ube,4ubf,4ubg,4ubh,4ubi,4ubj,lc;3,3,8,18r,197,19n,1a3,1aj,1az,1bf,1bv,1cb,1cr,1d7,1dn;3,4,8,6h9,6ha,6hk,6hl,6hm,6hn,6hp,6hq,1xpc,1xpd,1xpe,1xpf,1xpg,1xph,1xpi,1xpj,1xpk,1xpl,1xpm,1xpn,6i4,6i5,3ce,3cf,6o,899t,899u,a0hf,394k,394l,394m,394n,394o,394p,394q,394s,4np9,6ob,6oc,6od,6on,6oo,6op,6oq,6or,6os,6ot,6ou,6ow,6ox,6oy,6oz,6p0,6p1,6p2,6p3,6p4,6p5,6p6,6p7,6p8,6p9,3ji,3jj,39bk,39bl,39bm,39bn,39bo,39bp,39bq,39br,39bs,39bt,39bu,39bv,39bw,4nwd,6v1,6v2,6vh,6vi,6vx,6vy,6w0,6w1,6w2,6w3,6w4,6w5,6wd,3qm,3qn,4o34,4o35,4o36,4o37,4o38,4o39,4o3a,4o3b,4o3c,4o3d,4o3e,4o3f,4o3g,4o3h,725,726,72i,72j,72l,72m,72t,72v,72y,72z,730,731,732,3xh,3xj,3xk,3xm,3xn,3xo,3xp,3xq,3xr,79v,79w,79x,79y,44j,44k,44l,44m,44n,44o,44p,44q,44r,44s,44t,44u,44v,ze,zf,zg,zh,7gm,7gn,7go,4b4,4b5,4ba,4bb,4bc,4bd,4be,4bf,4bg,4bh,4bi,4bj,15s,15t,168,16h,16i,16j,16k,16l,16z,17f,17v,18b,18r,197,19n,1a3,1aj,1az,1bf,1bv,7no,7np,7nq,7nr,1cb,4ic,4id,4ie,4if,4ig,4ih,4ii,4ij,4ik,4il,4im,4in,1d7,1dl,1dm,1dn,1do,1dp,7uq,7ur,7us,7ut,4pe,4pf,4pg,4ph,4pi,4pj,4pk,4pl,4pm,4pn,4po,4pp,4pq,4pr,1kp,1kq,1kr,1ks,1kt,81s,81t,81u,81v,4wg,4wh,4wi,4wj,4wk,4wl,4wm,4wn,4wo,4wp,4wq,4wr,4ws,4wt,4wu,4wv,1ru,1rv,1rw,1rx,88w,88x,53k,53l,53m,53n,53o,53p,53q,53r,53s,53t,53u,53v,53w,53x,53y,53z,6mzk,6mzl,6mzm,6mzn,6mzo,6mzp,6mzq,6mzr,6mzs,6mzt,6mzu,6mzv,6mzw,6mzx,6mzy,6mzz,8g0,3u1c,3u1d,3u1e,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,3u1m,3u1n,3u1o,3u1p,3u1q,3u1r,3u8g,3u8h,3u8i,3u8j,3u8k,3u8l,3u8m,3u8n,3u8o,3u8p,3u8q,3u8r,3u8s,3u8t,3u8u,3u8v,3ufk,3ufl,3ufm,3ufn,3ufo,3ufp,3ufq,3ufr,3ufs,3uft,3ufu,3ufv,3ufw,3ufx,3ufy,3ufz,3bo0,3bo1,3bo2,3bo3,3bo4,3umt,3umu,3umv,3umw,3umx,3boa,3bob,3boc,3bod,3boe,3un3,3uts,3utt,3utu,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,3uu2,3uu3,3uu4,3uu5,3uu6,3uu7,3v0w,3v0x,3v0y,3v0z,3v10,3v11,3v12,3v13,3v14,3v15,3v16,3v17,3v18,3v19,3v1a,3v1b;3,5,8,0,38xw,38xy,38xz,38y0,38y1,38y2,pak,38yc,38ye,38yf,38yg,38yh,38yi,pb0,brj4,brj5,brj6,brj7,38ys,brj9,38yu,brjb,brjc,brjd,brje,brjf,38z0,4njh,1xkg,1xkh,1xki,1xkj,1xkk,1xkl,1xkm,1xkn,1xko,1xkp,1xkq,1xkr,38zg,4njx,3osg,3osh,3osi,38zp,bex2,bex3,38zs,4e2y,4e2z,38zw,4nkd,3905,bexi,bexj,3908,390c,4nkt,390l,390o,8fhl,390s,4nl9,fw0,fw1,fw2,fw3,fw4,fw5,fw6,fw7,fw8,fw9,fwa,fwb,fwc,4tx9,4txp,4txs,4txt,4txu,4txv,4txw,4txx,4txy,4txz,4ty0,4ty1,4ty2,4ty3,4ty4,4ty5,394w,phd,394y,394z,3950,phh,3952,3953,3954,3955,3956,phn,pho,395c,pht,395e,395f,395g,395h,395i,395j,395k,395l,395m,pi3,pi4,395s,395t,395u,395v,395w,395x,395y,395z,3960,3961,3962,3963,3964,4nql,3968,3969,396a,396b,396c,396d,396e,396f,396g,396h,396i,396j,396k,4nr1,396o,396p,396q,396r,396s,396t,396u,396v,396w,396x,396y,396z,3970,4nrh,3974,3975,3976,3977,3978,3979,397a,397b,397c,397d,397e,397f,397g,4nrx,397k,397l,397m,397n,397o,397p,397q,397r,397s,397t,397u,397v,397w,4nsd,g34,g35,g36,g37,g38,g39,g3a,g3b,g3c,g3d,g3e,g3f,g3g,4u4d,4u4g,4u4h,4u4i,4u4j,4u4k,4u4l,4u4m,4u4n,4u4o,4u4p,4u4q,4u4r,4u4s,4u4t,4nwg,4nwi,4nwj,4nwk,mit,4nwm,4nwn,4nwo,4nwp,4nwq,4nwt,4nww,4nwy,4nwz,4nx0,4nx1,4nx2,4nx3,4nx4,4nx5,4nx6,4nx9,4nxc,4nxd,4nxe,4nxf,4nxg,4nxh,4nxi,4nxj,4nxk,4nxl,4nxm,4nxn,4nxo,4nxp,4nxs,4nxt,4nxu,4nxv,4nxw,4nxx,4nxy,4nxz,4ny0,4ny1,4ny2,4ny3,4ny4,4ny5,4ny8,4ny9,4nya,4nyb,4nyc,4nyd,4nye,4nyf,4nyg,4nyh,4nyi,4nyj,4nyk,4nyl,4nyo,4nyp,4nyq,4nyr,4nys,4nyt,4nyu,4nyv,4nyw,4nyx,4nyy,4nyz,4nz0,4nz1,4nz4,4nz5,4nz6,4nz7,4uas,4nz9,4nza,4nzb,4nzc,4nzd,4nze,4nzf,4nzg,4nzh,4ub4,4ub5,4ub6,4ub7,4ub8,4ub9,4uba,4ubb,4ubc,4ubd,4ube,4ubf,4ubg,4ubh,sp,sq,sr,ss,st,zt,zu,zv,zw,zx,10b,10r,16x,16y,16z,170,171,17e,17f,17g,17u,17v,17w,1e1,1e2,1e3,1e4,1e5,1ej,1ek,1ez,1l5,1l6,1l7,1l8;3,4,9,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3c0,3c1,3c2,3s9f,3s9g,3s9h,3s9i,3s9j,3s9k,3s9l,3j4,3j5,3j6,3sgj,3sgk,3sgl,3sgm,3sgn,3sgo,3sgp,3q8,3q9,3qa,3snn,3sno,3snp,3snq,3snr,3sns,3snt,3xc,3xd,3xe,3sur,3sus,3sut,3suu,3suv,3suw,3sux,44g,44h,44i,4b4,4b5,4b6,3t1v,3t1w,3t1x,3t1y,3t1z,3t20,3t21,6m76,4i8,4i9,4ia,3t8z,3t90,3t91,3t92,3t93,3t94,3t95,6mea,4pc,4pd,4pe,3tg3,3tg4,3tg5,3tg6,3tg7,3tg8,3tg9,6mle,4wg,4wh,4wi,3tn7,3tn8,3tn9,3tna,3tnb,3tnc,3tnd,6msi,53k,53l,53m,3tub,3tuc,3tud,3tue,3tuf,3tug,3tuh,6mzk,6mzl,6mzm,3u1c,3u1d,3u1e,3u1f,3u1g,3u1h,3u1i,3u1j,3u1k,3u1l,3u8g,3u8h,3u8i,3u8j,3u8k,3u8l,3b9y,3u8n,3u8o,3u8p,3ufk,3ufl,3ufm,3ufn,3ufo,3ufp,3bh2,3ufr,3ufs,3uft,3umo,3ump,3umq,3umr,3bo4,3bo5,3bo6,3umv,3umw,3umx,3uts,3utt,3utu,3utv,3utw,3utx,3uty,3utz,3uu0,3uu1,3v0w,3v0x,3v0y,3v0z,3v10,3v11,3v12,3v13,3v14,3v15;3,0,-b,5dzp,5e05,5e0l,5e11,5e1h,5e1x,5e2d,5e2t,5e39,5e3p,5e45,5e4l,5e51,5e5h,5e5x;3,1,-b,5dz9,5dzp,5e05,5e0l,5e11,5e1h,5e1x,5e2d,5e2t,5e39,5e3p,5e45,5e4l,5e51,5e5h,5e5x;3,2,-b,5dz9,5dzp,5e05,5e0l,5e11,5e1h,5e1x,5e2d,5e2t,5e39,5e3p,5e45,5e4l,5e51,5e5h,5e5x;3,3,-b,5dz9,5dzp,5e05,5e0l,5e11,5e1h,5e1x,5e2d,5e2t,5e39,5e3p,5e45,5e4l,5e51,5e5h,5e5x;3,4,-b,5cva,5cvq,5cwo,2js6,6g7,5cx4,3s15,3s16,3s17,3s18,3s19,3s1a,6gf,1epj,5cxk,392x,56,57,1epr,1epz,hnew,hnex,pfz,1eqf,pgf,1eqv,394a,394b,394c,394d,394e,1er3,2juf,394q,394s,2jun,5d2e,5d2u,5d3c,5d3s,2jza,6nb,5d48,3s89,3s8a,3s8b,3s8c,3s8d,3s8e,6nj,1ewn,hnlk,hnll,1ewv,1ex3,pn3,1exj,pnj,1exz,39be,39bf,39bg,39bh,39bi,1ey7,2k1j,39bu,39bw,2k1r,5d9i,5d9y,5da0,5dag,5daw,2k6e,6uf,3sfc,3sfd,3sfe,3sff,3sfg,3sfh,3sfi,6un,1f3r,jd,jg,1f3z,1f47,pu7,1f4n,pun,1f53,39ig,39ih,39ii,39ij,39ik,39il,39im,1f5b,2k8n,39iw,39ix,39iy,5q0r,39j0,39j1,39j2,2k8v,5dgm,5dgo,5dh2,5dh4,5dhk,2kdi,39nr,3smg,3smh,3smi,dd7,dd8,dd9,dda,71r,qd,qe,5q5z,qi,2ke3,2ke4,2ke5,4eri,1fb3,5n0n,2kej,1fbj,1fbr,2kez,b9b0,b9b1,b9b2,1fbz,1fc7,39pk,39pl,39pm,39pn,39po,39pp,39pq,1fcf,2kfr,2kfz,5dnq,5dns,vq,5do8,39uv,3stk,3stl,3stm,dkb,dkc,dkd,dke,78v,1fhz,xk,1fi7,q87,q8f,q8n,q8v,1fjb,39wo,39wp,39wq,39wr,39ws,39wt,39wu,1fjj,2kmv,2kn3,12e,5duv,5duw,12u,5dvb,5dvc,7fr,3t0o,3t0p,3t0q,drf,drg,drh,dri,7fz,1fp3,14r,1fpb,qfb,1fpr,qfr,1fq7,1fqf,3a3s,3a3t,3a3u,3a3v,3a3w,3a3x,3a3y,1fqn,2ktz,2ku7,5dz9,5dzp,5e05,5e0l,5e11,5e1h,19h,19i,19x,19y,7mv,7mw,7mx,7my,7mz,7n0,7n1,7n2,7n3,1fw7,1fw8,1fw9,1fwa,1fwb,1fwc,1fwd,1fwe,1fwf,1fwn,qmg,qmh,1fwq,qmj,qmk,qml,1fwu,1fwv,1fx3,qmw,qmx,1fx6,qmz,qn0,qn1,1fxa,1fxb,1fxj,1fxk,1fxl,1fxm,1fxn,1fxo,1fxp,1fxq,1fxr,2l13,2l14,2l15,2l16,2l17,2l18,2l19,2l1a,2l1b;3,5,-b,2jns,38y2,38y4,2jny,2jo9,38yi,38yk,2jod,2joq,2jos,2jp7,2juw,3956,3958,2jv2,2jvd,395m,395o,2jvh,2jvu,2jvw,2jwb,2k20,39c9,39ca,5mob,39cc,39cd,2k26,2k2h,39cq,39cr,39cs,2k2l,2k2y,39d7,2k30,2k3f,2k94,2k9a,2k9l,2k9p,2ka2,2ka4,2kaj,2kg8,2kge,2kgp,2kgt,2kh6,2kh8,2khn,2knc,2kni,2knt,2knx,2koa,2koc,2kor,2kug,2kuh,2kui,qh7,2kuk,2kul,2kum,2kux,2kuy,qhn,2kv0,2kv1,2kve,2kvf,2kvg,2kvv;3,4,-m,ftx,1h,g0v,g11,g12,g13,g14,g15,g16,g17,g18,g19,g1a,g1b,8l,8m,8n,fs;3,3,-l,g5h,g5w,d1,g6b,dg,dh,g6q,dv,dw,dx,gcl,k5,kl,l1,gjp,r9,rp,s5,gqt,yd,yt,z9,gxx,15h,15x,16d,h51,1cl,1d1,1dh,hc5,1jp,1k5,hj9,1qt,1r9,hqd,1xx,1yd,hxh,251,i12,i13,i1h,i1i,i1j,i1x,i1y,i1z,i2d,i2e,i2f,i2t,i2u,i3a,i3q,i4l,2c5,i9z,iad,2hi,iaf,iat,2hy,iav,ibp,2j9,ihh,ihj,ihx,ihz,iid,iif,iit,2qd,iol,iom,ip1,ip3,iph,ipj,ipx,2xh,ivq,iw5,iw6,iw7,iwl,iwn,ix1;3,4,-l,g01,76,77,78,79,g0g,7l,7m,7n,7o,7p,ed,lh,sl;4,4,0,6el,3919,391p,3925,392l,3s1a,3s1b,3931,393h,393x,394d,394t,in,q6,q7,qm,x9,xa,39v3,xp,xq,xr,14d,14e,14u,3a9b,3a9r,3au7,3aun,3av3,3avj,3avz,23z,2b2,3b8v,3b9b,3b9r,3ba7,3ban,3bb3,2i7,3bmn,3bn3,3bnj,3bnz,3bof,3bov,3bpb,9bz,3byn,3bz3,3bzj,3bzz,3c0f,3c0v,3c1b,3c1r,3c27,3c2n,3c33,3c3j;4,5,0,38y5,38y6,38ym,38yn,38z3,3bin,3bwv,3bxb,3bxr;4,4,1,6ea,390y,391e,391u,3s0w,3s0x,392a,392q,3936,393m,3s2g,3s2h,3s2i,3s2j,3s2k,3s2l,3s2m,3s2n,3942,6odj,394i,3s9k,3s9l,3s9m,3s9n,3s9o,3s9p,3s9q,3s9r,6okn,3sgo,3sgp,3sgq,39i3,3sgs,3sgt,3sgu,3sgv,6orr,3snd,3sns,3snt,3snu,39p7,3snw,3snx,3sny,3snz,6oyv,3suh,3suj,3suw,3sux,3suy,39wb,3sv0,3sv1,3sv2,6p5r,6p5z,6p67,3t1l,3t1m,3t1n,3t20,3t21,3t22,3a3f,3t24,3t25,6pcu,6pd3,6pda,7kn,7ko,7kp,7kr,7ks,7kt,3t5z,3t60,3t61,3t63,3t64,3t65,3t6g,3t6k,3t6w,3t70,3t7c,3t7g,3t7s,3t7w,3t88,3t8c,3t8o,3t8p,3t8q,3t8s,3t94,3t95,3t96,3aaj,3t98,6pjx,6pk7,6pkd,1gr,1gs,3tf0,3tfc,3tfg,3tfs,3tft,3tfu,3tfv,3tfw,6pqv,6pr1,3tm4,3tmg,3tmk,6pxj,3tmw,3tmx,3tmy,3tmz,3tn0,6pxp,6pxz,6py5,3tt8,3ttk,3ttl,3ttm,3ttn,3tto,6q4n,6q4t,3tzw,3u0c,6qbb,3u0o,3u0p,3u0q,3u0r,3u0s,6qbh,6qbr,6qbx,3u70,2ao,3u7c,3u7d,3u7e,3u7f,3u7g,6qif,6qil,3ue4,6qp3,3ueg,3ueh,3uei,3uej,3uek,6qp9,6qpj,6qpp,3uks,3ul4,3ul5,3ul6,3ul7,3ul8,3ul9,6qvy,6qw7,6qwe,6qwu,3us8,3us9,3usa,3btn,3usc,3usd,3use,6r33,6r3b,6r3j,9bv,3ux7,3uxn,3uy3,3uyj,3uyz,3uzc,3uzd,3uze,3uzf,3c0s,3uzh,3uzi,3uzj,6raf;4,5,1,38xt,38xu,38y8,38y9,38yo;4,4,2,3ry3,3ry4,3ryf,3ryg,3ryh,3ryi,3ryj,4e3a,2f,2g,2h,2i,2j,4e3g,6e5,6e6,4e3q,2v,2w,2x,2y,2z,38s,38t,38u,3b,3c,3d,pdo,pdy,3s,pe4,pee,pek,csb,css,3s28,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3s2i,3s2j,3s2k,3s2l,3s2m,3s2n,3s53,3s54,3s55,3s56,3s57,3s5j,3s5k,3s5l,3s5m,3s5n,4eae,9j,9k,9l,9m,9n,4eak,6l9,4eau,9z,a0,a1,a2,a3,3fw,3fx,af,ag,pks,pl2,pl8,pli,plo,czc,czd,cze,czf,czs,czt,czu,czv,czw,3s9c,3s9d,d08,d09,d0a,d0b,d0c,d0d,6oki,6okj,6okk,6okl,6okm,6okn,6oko,6okp,6okq,6okr,6oks,6okt,6oku,6okv,3sd3,3sd4,3sd5,3sd6,3sd7,6sc,h3,h4,h5,h6,h7,3n0,hj,hk,hn,ps6,psm,3sgg,6or5,6orl,3sk7,3sk8,3sk9,3ska,3skb,6zg,o7,o8,o9,oa,ob,3u4,on,oo,op,p7,p8,p9,pn,po,pp,6oy8,6oyo,3srr,3srs,3srt,3sru,3srv,vr,vs,vt,wa,wb,wc,wd,we,wq,wr,ws,wt,x8,x9,xo,47w,3syv,3syw,3syx,3syy,3syz,12k,12v,12w,12x,130,13e,13f,13g,13h,13i,13u,13v,13w,13x,13y,14b,14c,14d,14r,14s,14t,7kr,7l5,7l6,3t63,3t6f,3t6g,3t6h,3t6i,3t6j,1ag,1ai,1aj,1ak,1al,1ay,1az,1b0,1b1,1b2,1bf,1bg,1bh,1bw,7rv,7rw,7s9,7sa,3td7,3td8,3tdj,3tdk,3tdl,3tdm,3tdn,1hn,1ho,1hp,1hq,1i3,1i4,1i5,7zb,7zc,7zd,3tkn,3tko,3tkp,3tl3,3tl4,3tl5,3tl6,3tl7,3ts7,3ts8,3ts9,3tsa,3tsb,3tzb,3tzc,3tzd,3tze,3tzf,3tzr,3tzs,3tzt,3tzu,3tzv,8k4,8k5,8k6,8k7,8k8,8k9,8ka,8kb,3u5g,3u5h,3u5i,3u5j,3u5k,3u5l,3u5m,3u5n,3u5x,3u5y,3u5z,3u60,3u61,3u62,3u63,3u6f,3u6g,3u6h,3u6i,3u6j,3u6v,3u6w,3u6x,3u6y,3u6z,6qom,3udz,3ue0,3ue1,3ue2,3ue3,6qp2,6qvq,3ul3,3ul4,3bmh,3ul6,3ul7,6qw6,6r2o,6r2p,6r2q,6r2r,6r2s,6r2t,3us6,3us7,3btk,3us9,3usa,3usb,6r34,6r35,6r36,6r37,6r38,6r39,9c7,312,3uxj,3uxz,3uyf,3uyv,3uz4,3uz5,3uz6,3uz7,3uz8,3uz9,3uza,3c0n,3uzc,3uzd,3uze;4,4,3,3s28,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3s2i,3s2j,3s2k,3s2l,3s2m,3s2n,6okg,6okh,6oki,6okj,6okk,6okl,6okm,6okn,6oko,6okp,6okq,6okr,6oks,6okt,6oku,6okv,oi,oj,ok,ol,om,w3,w4,12r,137;4,4,4,3s28,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3s2i,3s2j,3s2k,3s2l,3s2m,3s2n,6okg,6okh,6oki,6okj,6okk,6okl,6okm,6okn,6oko,6okp,6okq,6okr,6oks,6okt,6oku,6okv;4,4,5,csf,csu,3s28,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3s2i,3s2j,3s2k,3s2l,3s2m,3s2n,czj,czy,czz,d0d,d0e,d0f,6okg,6okh,6oki,6okj,6okk,6okl,6okm,6okn,6oko,6okp,6okq,6okr,6oks,6okt,6oku,6okv;4,4,6,6f5,cr5,crk,6h4,6h5,6h6,3s23,3s28,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3s2i,3s2j,3s2k,3s2l,3s2m,3s2n,6l,6m9,cy9,6mq,6mr,cyo,cyp,cyq,cyr,6n8,6n9,cz4,cz5,cz6,cz7,cz8,cz9,6nq,6nr,czk,czl,czm,czn,czo,czp,czq,czr,6o8,6o9,6oa,d00,d01,d02,d03,d04,d05,d06,d07,3s9k,3s9l,3s9m,6okg,6okh,6oki,6okj,6okk,6okl,6okm,6okn,iq,6vd,6ve,3sgo,3sgp,3sgq,3sns,3snt,3snu,3suw,3sux,3suy,3t20,3t21,3t22;4,4,7,6h4,6h5,6h6,3s28,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3s2i,3s2j,3s2k,3s2l,3s2m,3s2n,6b,6d,3h8,bw,cc,3ia,cy,3pe,k2;4,4,8,3s28,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3s2i,3s2j,3s2k,3s2l,3s2m,3s2n;4,4,9,3s28,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h;4,1,-k,ry,rz,s4,s5,s6,s7,s8,s9,sa,sb,sc,sd,se,sf,yn,z3,z7,z8,z9,za,zb,zc,zd,ze,zf,zg,zh,zi,zj,15r,167,16e,16f,16g,16h,16i,16j,16k,16l,16m,16n;4,2,-k,sg,sh,si,sj,sk,sl,sm,sn,so,sp,sq,sr,ss,st,su,sv,sw,sx,sy,sz,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,zk,zl,zm,zn,zo,zp,zq,zr,zs,zt,zu,zv,zw,zx,zy,zz,100,101,102,103,104,105,106,107,108,109,10a,10b,10c,10d,10e,10f;4,3,-k,5b4w,5b5c,28jk,28jl,2evk,2evl,qu8,2ew1,2ewg,2ewh,5bc0,5bcg,28qo,28qp,9vps,2f2p,r1d,22gg,2f3l,5bj4,5bjk,88h,28xs,28xt,4j4g,2f9t,2fa9,22nk,2fap,5bq8,5bqo,294w,294x,2fgx,2fhd,22uo,2fht,5bxc,5bxs,5by8,29c1,2fo1,rmp,231s,2fox,29j4,29j5,2fv4,2fv5,rts,2fvl,2fw0,2fw1,91c,91d,afo0,ic41,98g,98h,icb4,icb5,9fk,9fl,ici8,ag29;4,0,-j,sx,td,tt,u9,up,v5,vl,w1,wh,wx,xd,xt,y9,yp,z5,101,10h,10x,11d,11t,129,12p,135,13l,141,14h,14x,15d,15t,169;4,1,-j,sh,sx,td,tt,u9,up,v5,vl,w1,wh,wx,xc,xd,xs,xt,y8,yo,zl,101,10h,10x,11d,11t,129,12p,135,13l,141,14g,14h,14w,14x,15c,15s;4,2,-l,sh,si,sj,sk,sl,sm,sn,so,sp,sq,sr,ss,st,su,sv,sx,sy,sz,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,td,te,tt,tu,u9,ua,up,uq,v5,v6,vl,vm,w1,w2,wh,wi,wx,wy,xd,xe,xt,xu,y9,ya,yp,yq,z5,z6,zl,zm,zn,zo,zp,zq,zr,zs,zt,zu,zv,zw,zx,zy,zz,101,102,103,104,105,106,107,108,109,10a,10b,10c,10d,10e,10f,10h,10i,10x,10y,11d,11e,11t,11u,129,12a,12p,12q,135,136,13l,13m,141,142,14h,14i,14x,14y,15d,15e,15t,15u,169,16a;4,3,-l,fx1,fx2,fxh,fxi,fxj,fxx,fxy,fxz,3b0,fyc,fyd,59s9,59sa,59sb,59sc,61,63,g45,g46,g4m,g52,59yy,59yz,g5h,59zd,59ze,59zf,59zg,5a62,5a63,5a64,gcl,5a6h,5a6i,5a6j,5a6k,5acs,5act,5ad7,5ad8,5ad9,gjp,5adl,5adm,5adn,5ado,rc,rd,rf,sh,si,sx,sy,td,te,tt,tu,u9,ua,up,uq,v5,v6,vl,vm,w1,w2,wh,wi,wx,wy,5ajx,5ajy,xd,xe,5akd,5ake,xt,xu,gqt,yd,yh,zl,zm,101,102,10h,10i,10x,10y,11d,11e,11t,11u,129,12a,12p,12q,135,136,13l,13m,141,142,5ar1,5ar2,5ar3,14h,14i,5arh,5ari,5arj,14x,14y,gxx,15h,5ay6,5ay7,5aym,5ayn,h51,5b5b,7uj,7uk,7ul,7um,5b5r,hc5,28ju,28jv,28jw,28jx,28jy,28jz,1jp,228q,228s,2evx,2evy,2evz,2296,2298,2ewd,qum,2ewf,229m,229n,229o,2ewt,2ewu,2ewv,81n,81o,81p,81q,81r,hj9,hja,hjb,28qy,28qz,28r0,28r1,28r2,28r3,1qt,2f31,81cu,81cv,2f3h,22gq,22gr,22gs,2f3x,22gu,22gv,88q,88r,88s,88t,88u,88v,hqf,hqg,hqh,28y2,28y3,28y4,28y5,28y6,28y7,2fa5,ai1q,2fal,22nu,22nv,22nw,22nx,22ny,22nz,294q,8fv,8fw,8fx,8fy,8fz,2956,2957,2958,2959,295a,295b,2fh9,2fhp,22uy,22uz,22v0,2fi5,22v2,8my,8mz,8n0,8n1,8n2,8n3,29ca,29cb,29cc,29cd,29ce,29cf,4jj3,8kxb,2322,2323,2324,2fp9,2326,2327,8u3,8u4,8u5,8u6,8u7,29je,29jf,29jg,29jh,29ji,29jj,238a,238c,2fvh,2fvi,2fvj,238q,238s,2fvx,ru6,2fvz,2396,2397,2398,2fwd,2fwe,2fwf,91o,91p,91q,91r,afoc,afod,afoe,afof,98s,98t,98u,98v,afvg,afvh,afvi,afvj,9fw,9fx,9fy,9fz,ag2k,ag2l,ag2m,ag2n;5,4,0,bd,be,iz,j0,jf,q2,q3,q4,qi,qj,qk,wv,x7,x8,xb,xn,xr,13z,14e,14f,14u,14v,1b2,1b3,1bj,1bz,1i6;5,4,1,6obb,3s0o,3s0p,3s0q,3s0r,3s0s,3925,3s0u,3s0v,6obr,6oig,3s7t,3s7u,3s7v,3s7w,3s7x,399a,3s7z,6oiw,6opl,3sey,3sez,3sf0,3sf1,3sf2,39gf,6oq1,3sf,6ym,n3,3sjy,nj,3ske,3sku,3sla,3slq,6owq,3sm3,3sm4,3sm5,3sm6,3sm7,6ox6,6p3v,3st8,3st9,3sta,3stb,6p4b,6pb0,3t0d,3t0e,3t0f,140,6pbg,14g,6pi5,3t7i,3t7j,1b4,6pil,6ppa,3ten,6ppq,6pwf,1pe,1pf,1pg,1ph,6pwv,1wi,1wj,1wk,1wl,1wm,1wz,1x0,1x1,1xg,23m,23n,23o,23p,23q,243,244,245,24j,24k,24l,2aq,2ar,2as,2at,2au,2b8,2bo,2hu,2hv,2hx,2hy,2hz,2if,3uiy,3uiz,3uj0,3uj1,3uj2,3uj3,2n0,2p2,2p3,2p4,2pi,2pj,2pk,3uq2,3uq3,3uq4,3uq5,3uq6,3uq7,2w7,2wn,9bz,3ux6,3ux7,3ux8,3ux9,3uxa,3uxb,9ch,3bz5,3bzl,3c01,3c0h,3c0x,3c1d,3c1t,3c29,3c2p,3c35;5,5,1,3bwh,3bwx,3bxd,3bxt,1r29,1xe9;5,4,2,3s0g,3s0h,3s0i,3s0j,3s0k,3s0l,391y,3s0n,3s0o,3s0p,3s7k,3s7l,3s7m,3s7n,3s7o,3991,3s7q,3s7r,3s7s,6r6,g1,3sci,3scy,3sde,3sdu,3sea,3seo,3sep,3seq,3ser,3ses,3set,3seu,3sev,3sls,3slt,3slu,3slv,3slw,3slx,3sly,3ssw,3ssx,3ssy,3ssz,3st0,3st1,3t00,3t01,3t02,3t03,3t04,3t05,6pb6,6pb7,6pb8,6pb9,6pba,3t74,3t75,3t76,3t77,3t78,3t79,6pie,6pif,3te8,3te9,3tea,3teb,3tec,3ted,3tee,6ppj,3tlc,3tld,3tle,3tlf,3tlg,3tlh,3tli,6pwn,6q34,6q35,6q36,3tsj,3tsk,3tsl,3tsm,6q3k,6q3l,6q3m,6q3r,6qab,3tzo,3tzp,3tzq,6qar,6qav,3u6c,3u6d,3u6e,6qhf,3u6s,3u6t,3u6u,6qhj,6qhv,6qhz,3ud0,3ud1,3ud2,3udg,3udh,3udi,6qoj,6qon,8xd,8xe,8xf,3uio,3uip,3uiq,3uir,8xw,8xx,8xy,3uj8,3uj9,3uja,3ujo,3ujp,3ujq,3uk4,3uk5,3uk6,6qv7,3ukk,3ukl,3ukm,6qvb,6qvn,6qvr,94g,94h,94i,94j,94k,3ups,3upt,3upu,3upv,3upw,951,952,3uqc,3uqd,3uqe,3uqs,3uqt,3uqu,3ur8,3ur9,3ura,6r2b,6r2f,9bk,9bl,9bm,9bn,9bo,9bp,3uww,3uwx,3uwy,3uwz,3ux0,3ux1,9c6,3uxg,3uxh,3uxi,3uxw,3uxx,3uxy,6r8z,3uyc,3uyd,3uye,6r93,6r9f,6r9j;6,3,0,i4,ik,j0,jg,jw,kc,ks,l8,p8,po,q4,qk,r0,rg,rw,sc,wc,ws,x8,xo,y4,yk,z0,zg,13g,13w,14c,14s,158,15o,164,16k,1ak,1b0,1bg,1bw,1cc,1cs,1d8,1do,1ho,1i4,1ik,1j0,1jg,1jw,1kc,1ks,1os,1p8,1po,1q4,1qk,1r0,1rg,1rw,1vw,1wc,1ws,1x8,1xo,1y4,1yk,1z0,230,23g,23w,24c,24s,258,25o,264,2a4,2ak,2b0,2bg,2bw,2cc,2cs,2d8,2h8,2ho,2i4,2ik,2j0,2jg,2jw,2kc,2o8,2oc,2of,2oo,2os,2ov,2p4,2p8,2pb,2pk,2po,2pr,2q0,2q4,2q7,2qg,2qk,2qn,2qw,2r0,2r2,2r3,2rc,2rd,2rg,2ri,2rj,2vd,2vg,2vj,2vt,2vw,2vz,2w9,2wc,2wf,2wp,2ws,2wv,2x5,2x8,2xb,2xl,2xo,2xr,2y1,2y4,2y7,2yh,2yk,2yn,32i,32k,32m,32y,330,332,33e,33g,33i,33u,33w,33y,34a,34c,34e,34q,34s,34u,356,358,35a,35m,35o,35q;6,4,0,ek,39cs,39d8,fw,gc,gs,lo,39jw,39kc,n0,ng,nw,ss,39r0,39rg,u4,uk,v0,zw,39y4,39yk,118,11o,170,3a58,3a5o,18c,18s,1e4,3acc,3acs,1fg,1fw,1l8,3ajg,3ajw,1mk,1sc,3aqk,3ar0,1to,1u4,1zg,3axo,3ay4,20s,26k,3b4s,3b58,27w,28c,2do,3bbw,3bcc,2ko,2kp,2ks,2kv,2l4,2l5,3bj0,2lb,3bjc,3bjd,3bjg,3bjj,2m0,2m1,2m4,2rt,2ru,2rw,2rz,2s9,2sa,3bq4,2sf,3bqh,3bqi,3bqk,3bqm,3bqn,2t5,2t6,2yy,2z0,2z2,2ze,2zf,3bx8,2zi,3bxm,3bxn,3bxo,3bxq,30a,30b,30c;6,3,1,2gw,2hc,2hs,2i8,2io,2j4,2jk,2k0,2o0,2og,2ow,2pc,2ps,2q8,2qo,2r4;6,4,1,6da,6db,3ryi,3ryj,3ryk,3ryl,3rym,3ryn,2j,2l,6kc,6kd,6ke,6kf,3s5m,3s5n,3s5o,3s5p,3s5q,3s5r,6rf,6rg,6rh,6ri,6rj,3scq,3scr,3scs,3sct,3scu,3scv,6yi,6yj,6yk,6yl,6ym,6yn,3sju,3sjv,3sjw,3sjx,3sjy,3sjz,75m,75n,75o,75p,75q,75r,3sqy,3sqz,3sr0,3sr1,3sr2,3sr3,7cq,7cr,7cs,7ct,7cu,7cv,3sy2,3sy3,3sy4,3sy5,3sy6,3sy7,7ju,7jv,7jw,7jx,7jy,7jz,3t56,3t57,3t58,3t59,3t5a,3t5b,7qy,7qz,7r0,7r1,7r2,3tca,3tcb,3tcc,3tcd,3tce,3tcf,7y2,7y3,7y4,3tje,3tjf,3tjg,3tjh,3tji,3tjj,84v,856,3tq7,3tqi,3tqj,3tqk,3tql,3tqm,3tqn,3txm,3txn,3txo,3txp,3txq,3txr,8in,8iy,52cv,4d2y,4d3e,52dn,52do,52dp,52dq,52dr,4d3u,riz,rj0,rj2,rj3,4d4a,rjf,rjg,rji,rjj,4d4q,rjv,rjw,rjy,rjz,52fe,52ff,52fg,52fh,52fi,52fj,4d5m,rkr,rks,rkt,rku,rkv,4d62,rl7,rl8,rl9,rla,rlb,4d6i,rln,rlo,rlp,rlq,rlr,52h6,52h7,52h8,52h9,52ha,52hb,4d7e,rmj,3ba4,3ba5,3ba6,rmn,4d7u,rmz,3bak,5lgt,3bam,rn3,4d8a,rnf,3bb0,3bb1,3bb2,rnj,2dc,2ds,3bc0,52kq,52kr,52ks,52kt,52ku,52kv,rq2,rqi,rqy,52mi,52mj,52mk,52ml,52mm,52mn,rru,rsa,rsq,52oa,52ob,52oc,52od,52oe,52of,rtm,ru2,rui,2kg,2kw,8wt,3bj4,52r1,52ru,52rv,52rw,52rx,52ry,52rz,rx6,rxm,ry2,52tm,52tn,52to,52tp,52tq,ryy,6u1n,595o,6u1p,rze,rzu,6u2j,6u2k,6u2l,52ve,52vf,52vg,52vh,52vi,s0q,7suz,9dr0,9dr1,9dr2,s16,bhm3,cd7w,cd7x,cd7y,s1m,93u,4dnu,4doa,4doq,52yz,52z0,52z1,52z2,52z3,4dp6,s4b,s4c,s4d,s4e,4dpm,s4r,s4s,s4t,s4u,4dq2,s57,s58,s59,s5a,s5b,530q,530r,530s,530t,530u,530v,4dqy,s63,s64,s65,s66,4dre,s6j,s6k,s6l,s6m,4dru,s6z,s70,s71,s72,s73,532i,532j,532k,532l,532m,532n,4dsq,s7v,s7w,s7x,s7y,4dt6,s8b,s8c,s8d,s8e,4dtm,s8r,s8s,s8t,s8u,s8v,sa7,san,sb3,sbi,sby,sce,scu,sda,sdq,se6,sem,sf2,sfi,sfz;6,5,1,8u8a,8u8b,8u8c,8u8d,8u8e,8u8f,8ufe,8uff,8ufg,8ufh,8ufi,8ufj,8umi,8umj,8umk,8uml,8umm,8umn,8utm,8utn,8uto,8utp,8utq,8utr;6,4,2,6cw,6cx,6cy,6cz,6d0,6d1,3ry8,3ry9,3rya,3ryb,3ryc,3ryd,6di,3rys,3ryt,3ryu,3rz8,3rz9,3rza,6oab,6oaf,6k0,6k1,6k2,6k3,6k4,6k5,3s5c,3s5d,3s5e,3s5f,3s5g,3s5h,6km,3s5w,3s5x,3s5y,6ogz,3s6c,3s6d,3s6e,6oh3,6ohf,6ohj,6r4,6r5,6r6,6r7,6r8,6r9,3scg,3sch,3sci,3scj,3sck,3scl,6rq,3sd0,3sd1,3sd2,6oo3,6oo7,6y8,6y9,6ya,6yb,6yc,6yd,3sjk,3sjl,3sjm,3sjn,3sjo,3sjp,6yu,6our,3sk4,3sk5,3sk6,6ouv,6ov7,6ovb,75c,75d,75e,75f,75g,75h,3sqo,3sqp,3sqq,3sqr,3sqs,3sqt,3squ,6p1v,6p1z,7cg,7ch,7ci,7ck,7cl,3sxs,3sxt,3sxu,6p8j,3sxw,3sxx,3sxy,6p8z,6p93,7jk,7jl,7jm,7jn,7jo,7jp,7jq,3t4w,3t4x,3t4y,3t4z,3t50,3t51,3t52,6pg7,7qr,7qs,7qt,7qu,3tc0,3tc1,3tc2,3tc3,3tc4,3tc5,3tc6,6pmv,6pnb,7xx,3tj4,3tj5,3tj6,3tj7,3tj8,3tj9,6pty,6pue,6q0l,3tq8,3tq9,3tqa,3tqb,3tqc,6q11,6q1h,3txc,3txd,3txe,3txf,6q8h,6q8i,6q8j,6q8k,52dc,4d3k,4d40,4d4g,52f4,4d5c,4d5s,4d68,52gw,4d74,4d7k,4d80,52kg,rps,rq8,rqo,52m8,rrk,rs0,rsg,52o0,rtc,rts,ru8,52rk,rww,rxc,rxs,ry8,ryo,rz4,rzk,52v4,s0g,s0w,s1c,52yo,4dow,4dpc,4dps,530g,4dqo,4dr4,4drk,5328,4dsg,4dsw,4dtc,sbk,sc0,scg,scw,sdc,sds,se8,seo,sf4;6,5,2,8u80,8uf4,8um8,8utc;7,3,0,3v,3w,3x,4b,4c,4d,4r,4s,4t,4u,57,58,59,5n,5o,5p,63,64,65,6j,6k,6l,6z,70,71,72,b0,b1,bg,bh,bw,bx,cc,cd,cs,ct,d8,d9,do,dp,e4,e5;7,4,0,b,c,d,e,r,38yk,38yl,u,38yz,38z0,38z1,38z2,1n,1o,1p,25,3958,7h,395o,7x,3964,3965,8s,8t,98,gc,qpn;7,4,1,pcv,pdb,pdr,pe7,pen,pf3,pfj,pfz,pgf,pgv,3di,86;a,4,0,3bwt,3bx9,3bxp,3by5,3byl,3bz1,3bzh,3bzx,3c0d,3c0t,3c19,3c1p,3c25,3c2l,3c31,3c3h;a,5,0,3brh,3bwt,3bx9,1r1p,1xdp,3byl;b,5,0,38zx,3971,39e5,39l9,39sd,39zh,3a6l,3adp,3akt,3arx,3az1;c,4,1,gl,h1,mt,n9,np,o5,us,v8,v9,vo,vp,110,11g,11w,12c,12s,17o,184,18k,190,19g,19w,1ec,1es,1f8,1fo,1g4,1gk,1h0,1lg,1lw,1mc,1ms,1n8,1no,1o4;d,4,1,jm;f,4,1,2ab,677,31v;g,4,1,gy,uq,4ld,1g1,20x,5rk,2m8;h,4,0,hb,857,3arv,3asb,3asr,3at7,3atn,3au3,3auj,3auz,3avf,3avv,3awb,3awr;h,5,0,3aln,3aq3,3aqj,3aqz,3arf,1w7f,1pwb,3asr,3azv,3b6z,3be3,3bl7,3bsb,3bzf;i,5,0,390r,397v,39ez,39m3,39t7,3a0b,3a7f,3aej,3aln,3asr,3azv;l,5,0,390q,3916,391m,3922,392i,392y,397u,pkq,pl6,3996,399m,39ex,39ey,39ez,39fd,39ff,39ft,39fv,39g9,39ga,39gb,39m1,39m2,39m3,39mg,hks9,hksb,39mk,39mw,39n0,39nc,39nd,39ne,39nf,39ng,39t4,39t5,39t6,39t7,39t8,39tk,39to,q6g,q6k,39ug,39uh,39ui,39uj,39uk,3a08,3a09,3a0a,3a0b,3a0c,3a0o,hl6h,hl6j,3a0s,3a14,3a18,3a1k,3a1l,3a1m,3a1n,3a1o,3a7c,3a7d,3a7e,3a7f,3a7g,3a7s,3a7w,qko,qks,3a8o,3a8p,3a8q,3a8r,3a8s,3aeg,3aeh,3aei,3aej,3aek,3aew,hlkp,hlkr,3af0,3afc,3afg,3afs,3aft,3afu,3afv,3afw,3alk,3all,3alm,3aln,3alo,3am0,3am4,qyw,qz0,3amw,3amx,3amy,3amz,3an0,3ask,3asl,3asm,3asn,3aso,3asp,3asq,3asr,3ass,3ast,3asu,3asv,3at4,hlyx,hlyz,3at8,3atk,3ato,3au0,3au1,3au2,3au3,3au4,3azp,3azq,3azr,3azs,3azt,3azu,3azv,3azw,3azx,3azy,3azz,3b08,3b0c,rd4,rd8,3b14,3b15,3b16,3b17,3b18,3b6u,3b6v,3b6w,3b6x,3b6y,3b6z,3b70,3b71,3b72,3b7c,hmd5,hmd7,3b7g,3b7s,3b7w,3b88,3b89,3b8a,3b8b,3b8c,3bdz,3be0,3be1,3be2,3be3,3be4,3be5,3beg,3bek,3bew,3bf0,3bfc,3bfd,3bfe,3bff,3bfg,3bl4,3bl5,3bl6,3bl7,3bl8,3blk,3bll,3bln,3blo,3bm0,3bm1,3bm3,3bm4,3bmg,3bmh,3bmi,3bmj,3bmk,3bs8,3bs9,3bsa,3bsb,3bsc,3bso,3urd,3urf,3bss,3bt4,5ymh,61sb,3bt8,hq54,hq55,hq56,hq57,hq58,3bzc,3bzd,3bze,3bzf,3bzg,3bzs,1xfd,1xfe,1xff,3bzw,hqbs,hqbw,7t7d,7t7e,7t7f;l,5,1,3asg;m,5,0,390o,390p,390q,390r,390s,hnco,pdl,1ugq,pdn,hncs,pe1,pe3,7q8q,397t,397u,397v,hnjt,1oca,hnjv,pl6,39ey,hnqy;p,4,0,3905,390l,6ei,3911,3916,391h,391m,391x,3922,392d,392i,392t,392y,3939,393e,393p,393u,3945,394a,394l,394q,6t6,39fu,39ga,39gq,39h6,39hm,39i2,39ii,39iy,77e,39u2,39ui,39uy,39ve,39vu,39wa,39wq,39x6,7lm,3a8a,3a8q,3a96,3a9m,3aa2,3aai,86y,3atm,3au2,3aui,3auy,3ue1,3ue2,3ul4,3ul5,3ul6,3us8,3us9,3usa,3uzc,3uzd,3uze;p,5,0,38xx,38y2,38yd,38yi,38yt,38yy,38z9,38ze,38zp,3905,390l,3911,391h,391x,392d,392t,3939,393p,3945,394l,39ca,39cq;p,6,0,38xx,38yd,38yt,38z9,38zp,3905,390l,3911,391h,391x,391y,391z,3920,3921,3922,3923,3924,3925,3926,1uhr,3s12,3s13,3s14,3s16,3s18,3s1a,3s1b,3s1i,3s1m,3s1n,3s1o,3s1y,3s22,3s24,3s26,3s27,3s2e,3s2f,3s2g,3s2i,3s2j,3s2k,3s2m,boin;p,6,1,1uhc,1o5t,1o5u,391v,391w,391x,3s0w,3s0y,3s10,3s1c,3s1e,bohf,3s1g,3s1s,3s1u,7zr7,3s1w,boi8,3s2a,3s2c;q,4,0,3s0o,3s0p,3s0q,3s7s,3s7t,3s7u,3sew,3sex,3sey,3sm0,3sm1,3sm2,3st4,3st5,3st6,3t08,3t09,3t0a,3t7c,3t7d,3t7e,3teg,3teh,3tei,3tlk,3tll,3tlm,3tso,3tsp,3tsq,3tzs,3tzt,3tzu,3u6w,3u6x,3u6y,3ue0,3ue1,3ue2,8yw,3uk8,3uko,3ul4,3ul5,3ul6,3urs,3us8,3us9,3usa,3uzc,3uzd,3uze;r,4,0,3s0o,3s0p,3s0q,6lk,3s6w,3s7c,3s7s,3s7t,3s7u,6so,3se0,3seg,3sew,3sex,3sey,3sm0,3sm1,3sm2,77e,3ssq,3st4,3st5,3st6,7e5,7ei,dq5,3szu,dqy,7lb,7lm,7ln,7lo,7lp,7lq,dxb,dxm,dxn,dxo,dxp,dxq,dxr,3a8s,ql9,qla,qlb,3a98,qlp,qlq,qlr,3a9o,3a9p,3a9q,3a9r,7sq,7sr,7ss,7st,7su,7sv,e4q,e4r,e4s,e4t,e4u,e4v,3ags,3ah8,3ah9,3aha,3ahb,3ahp,3ahq,3ahr,qul,qum,qun,qv1,qv2,qv3,7zw,7zx,7zy,7zz,ebw,ebx,eby,ebz,3an0,3ang,3anw,7run,3aoc,3aod,7rv2,3aot,r1p,r25,7rwf,870,871,872,873,ej0,ej1,ej2,ej3,3au4,3auk,7s1b,3av0,3avg,3avh,3avi,3avx,7s2m,r8t,7s33,r99,8e4,8e5,8e6,8e7,eq4,eq5,eq6,eq7,rdo,7s7z,re4,3b24,3b2l,3b2m,rfh,3b32,3b33,rfx,rfy,rfz,rgd,rge,rgf,8l8,8l9,8la,8lb,ex8,ex9,exa,exb,3b8c,3b8s,3b98,3b9p,3b9q,3b9r,8sc,8sd,8se,8sf,f4c,f4d,f4e,f4f,3bfg,rrx,3bfi,rrz,3bfw,rsd,3bfy,rsf,3bgc,3bgd,3bge,3bgf;r,5,0,3abx,3aby,3abz,qot,qou,qov,qp9,qpa,qpb,qpq,qpr,3aj1,7rpq,qvx,qwd,qwu,qwv,3aq5,bgni,r31,r3h,r3y,r3z,3ax9,3axa,3axb,ra5,3axr,ral,rb2,rb3,rgu,rgv,rh9,3b4v,rhp,5usv,ri6,ri7,rny,rnz,rod,roe,rof,rot,rou,rov,rpa,rpb;r,4,1,dxc,3a8g,3a8w,3a9c,e4g,3afk,3ag0,3agg,3agw,3ahc,qu8,quo,ebk,3amo,3an4,3ank,3ao0,3aog,r1c,r1s,86o,eio,3ats,3au8,3auo,3av4,3avk,r8g,r8w,8ds,eps,3b0w,3b0x,3b1c,3b1d,3b1s,3b1t,3b28,3b29,3b2o,rfk,rg0,8kw,eww,3b81,3b8h,3b8x,3b9c,8s0,8s1,f40,3bep,3bf5,3bfl,3bg1,3bgg;r,5,1,3abk,qog,qow,3aio,qvk,qw0,3aps,r2o,r34,3aww,r9s,ra8,rgw,rhc,ro0,rog;-8,0,8,1zv,26z,27f,27v,28b,28r,297,29n,2a3,2aj,2az,2bf,2bv,2cb,2cr,2d7,2e3,2ej,2l7,2ln,2sb,2sr,2zf,2zv;-8,1,8,26j,26z,27f,27v,28b,28r,297,29n,2a3,2aj,2az,2bf,2bu,2bv,2cb,2cr,2d6,2d7;-8,2,8,26j,26y,26z,27f,27u,27v,28b,28r,296,297,29n,2a2,2a3,2aj,2ay,2az,2bf,2bv,2ca,2cb,2cr,2d6,2d7;-8,3,8,26j,26y,26z,27f,27v,28a,28b,28r,296,297,29n,2a3,2ai,2aj,2az,2be,2bf,2bv,2ca,2cb,2cr,2d7;-8,4,8,26i,26j,5cq,26z,27e,27f,27v;-7,0,8,r,17,7v,8b,ez,ff,m3,mj,t7,tn,10b,10r,17f,17v,1ej,1ez,1ln,1m3,1sr,1t7,1zv,20b,26z,27f,2e3,2ej,2l7,2ln,2sb,2sr,2zf,2zv;-6,4,4,cfj,3bwf,cmn,3c3j;-6,5,4,3bpr,3bq7,3bqn,3br3,3bwv,3bxb,3bxr,3by7;-6,4,5,998,999,99a,99b,cf4,cf5,cf6,cf7,cf8,cf9,cfa,cfb,cfc,cfd,cfe,cff,cfg,cfh,cfi,cfj,3bw0,3bw1,3bw2,3bw3,3bw4,3bw5,3bw6,3bw7,3bw8,3bw9,3bwa,3bwb,3bwc,3bwd,3bwe,3bwf,9gb,9gc,9gd,9ge,9gf,cm8,cm9,cma,cmb,cmc,cmd,cme,cmf,cmg,cmh,cmi,cmj,cmk,cml,cmm,cmn,2dbk,2dbl,2dbm,2dbn,2dbo,2dbp,2dbq,2dbr,2dbs,2dbt,2dbu,2dbv,2dbw,2dbx,2dby,2dbz;-6,5,5,3bpc,3bpd,3bpe,3bpf,3bpg,3bph,3bpi,3bpj,3bpk,3bpl,3bpm,3bpn,3bpo,3bpp,3bpq,3bpr,3bps,3bpt,3bpu,3bpv,3bpw,3bpx,3bpy,3bpz,3bq0,3bq1,3bq2,3bq3,3bq4,3bq5,3bq6,3bq7,3bq8,3bq9,3bqa,3bqb,3bqc,3bqd,3bqe,3bqf,3bqg,3bqh,3bqi,3bqj,3bqk,3bql,3bqm,3bqn,3bqo,3bqp,3bqq,3bqr,3bqs,3bqt,3bqu,3bqv,3bqw,3bqx,3bqy,3bqz,3br0,3br1,3br2,3br3,4k5d,416q,416r,416s,4k5h,4k5n,3bws,4k5p,7t3m,7t3n,7t3o,4k63,3bx8,4k6j,3bxo,7t4d,3by4,3by7;-6,4,6,98w,98x,cf4,cf5,3bw0,3bw1,9g0,9g1,cm8,cm9,2dbk,3c35;-6,5,6,2kw,2kx,3bpc,3bpd,3bps,3bpt,3bq8,3bq9,3bqo,3bqp,3bwh,3bwx,3bxd,3bxs,3bxt;-6,0,8,r,17,7v,8b,ez,ff,m3,mj,t7,tn,10b,10r,17f,17v,1ej,1ez,1ln,1m3,1sr,1t7,1zv,20b,26z,27f,2e3,2ej,2l7,2ln,2sb,2sr,2zf,2zv;-5,4,4,9nz,394v,9v3,39bz,a27,39j3,a9b,39q7,agf,39xb,7fj,alr,anj,3a4f,aun,3abj,b1r,3ain,b8v,3apr,bfz,3awv,bn3,3b3z,bu7,3bb3,c1b,3bi7,c8f,3bpb,cfj,3bwf,cmn,3c3j;-5,5,4,38y7,pb3,pbj,38zj,395b,395r,3967,396n,39cf,39cv,39db,39dr,39jj,39jz,39kf,39kv,39qn,39r3,39rj,39rz,39xr,39y7,39yn,39z3,3a4v,3a5b,3a5r,3a67,3abz,3acf,3acv,3adb,3aj3,3ajj,3ajz,3akf,3aq7,r33,r3j,3arj,3axb,3axr,3ay7,3ayn,3b4f,3b4v,3b5b,3b5r,3bbj,3bbz,3bcf,3bcv,3bin,3bj3,3bjj,3bjz,3bpr,3bq7,3bqn,3br3,3bwv,s9r,sa7,3by7;-5,0,5,17a,17q,186,18m,192,19i,19y,1ae,1au,1ba,1bq,1c6,1cm,1d2,1di,1ee,1eu,1fa,1fq,1g6,1gm,1h2,1hi,1hy,1ie,1iu,1ja,1jq,1k6,1km,1li,1ly,1mu,1o6,1pi,1qu,1sm,1t2,1zq,206,26u,27a,2dy,2ee,2l2,2li,2s6,2sm,2za,2zq;-5,1,5,16u,17a,17q,186,18m,192,19i,19y,1ae,1au,1ba,1bq,1c6,1cm,1d2,1di,1dy,1ee,1eu,1fa,1fq,1g6,1gm,1h2,1hi,1hy,1ie,1iu,1ja,1jq,1k6,1km,1l2,1me,1nq,1p2,1qe,1rq;-5,2,5,16u,17a,17q,186,18m,192,19i,19y,1ae,1au,1ba,1bq,1c6,1cm,1d2,1di,1dy,1ee,1eu,1fa,1fq,1g6,1gm,1h2,1hi,1hy,1ie,1iu,1ja,1jq,1k6,1km,1me,1nq,1p2,1qe,1ra;-5,3,5,gs,h8,ho,i4,ik,j0,jg,jw,kc,ks,l8,16u,17a,17q,186,18m,192,19i,19y,1ae,1au,1ba,1bq,1c6,1cm,1d2,1di,1dy,1ee,1eu,1fa,1fq,1g6,1gm,1h2,1hi,1hy,1ie,1iu,1ja,1jq,1k6,1km,1l2,1ly,1mu,1na,1o6,1om,1p2,1pi,1py,1qe,1qu,1ra,1rq;-5,4,5,6hn,6ho,6hp,6hq,9nk,9nl,9nm,9nn,9no,9np,9nq,9nr,9ns,9nt,9nu,9nv,9nw,9nx,9ny,9nz,2acw,2acx,2acy,2acz,2ad0,2ad1,2ad2,2ad3,2ad4,2ad5,2ad6,2ad7,2ad8,2ad9,2ada,2adb,6oq,6or,6os,6ot,6ou,9uo,9up,9uq,9ur,9us,9ut,9uu,9uv,9uw,9ux,9uy,9uz,9v0,9v1,9v2,9v3,2ak0,2ak1,2ak2,2ak3,2ak4,2ak5,2ak6,2ak7,2ak8,2ak9,2aka,2akb,2akc,2akd,2ake,2akf,ek,f0,fg,fw,gc,gs,h8,ho,i4,ik,j0,jg,jw,6vu,6vv,kc,6vx,6vy,6vz,a1s,a1t,a1u,a1v,a1w,a1x,a1y,a1z,a20,a21,a22,a23,a25,a26,a27,2ar4,2ar5,2ar6,2ar7,2ar8,2ar9,2ara,2arb,2arc,2ard,2are,2arf,2arg,2arh,2ari,2arj,72x,72y,72z,730,731,732,733,a8w,a8x,a8y,a8z,a90,a91,a92,a93,a94,a95,a96,a97,a98,a99,a9a,a9b,2ay8,2ay9,2aya,2ayb,2ayc,2ayd,2aye,2ayf,2ayg,2ayh,2ayi,2ayj,2ayk,2ayl,2aym,2ayn,7a1,7a2,7a3,7a4,7a5,7a6,7a7,ag0,ag1,ag2,ag3,ag4,ag5,ag6,ag7,ag8,ag9,aga,agb,agc,agd,age,agf,39ww,39wx,27zm,27zn,27zo,27zp,27zq,2b5j,2b5k,2b5l,2b5m,2b5n,2b5o,2b5p,2b5q,2b5r,7h5,7h6,7h7,7h8,7h9,7ha,7hb,an4,an5,an6,an7,an8,an9,ana,anb,anc,and,ane,anf,ang,anh,ani,anj,3a40,3a41,286q,286r,286s,286t,286u,2bcn,2bco,2bcp,2bcq,2bcr,2bcs,2bct,2bcu,2bcv,16u,17a,17q,186,18m,192,19i,19y,1ae,1au,7mo,1ba,asw,1bq,atc,1c6,atq,ats,7oa,7ob,7oc,7od,au6,7of,au8,au9,aua,aub,auc,aud,aue,auf,aug,auh,aui,auj,auk,aul,aum,aun,3ab4,3ab5,28du,28dv,28dw,28dx,28dy,2bjr,2bjs,2bjt,2bju,2bjv,3abg,3abh,3abi,3abj,1dy,1ee,1eu,1fa,7ts,b00,7uc,b0k,b10,7ve,7vf,7vg,7vh,b1a,7vj,b1c,b1d,b1e,b1f,b1g,b1h,b1i,b1j,b1k,b1l,b1m,b1n,b1o,b1p,b1q,b1r,3ai8,3ai9,3aia,3aib,3aic,3aid,3aie,2bqv,2bqw,2bqx,2bqy,2bqz,2br0,2br1,2br2,2br3,1l2,1qs,82i,82j,82k,82l,82m,82n,b8g,b8h,b8i,b8j,b8k,b8l,b8m,b8n,b8o,b8p,b8q,b8r,b8s,b8t,b8u,b8v,2bxs,2bxt,2bxu,2bxv,2bxw,2bxx,2bxy,2bxz,2by0,2by1,2by2,2by3,2by4,2by5,2by6,2by7,89l,89m,89n,89o,89p,89q,89r,bfk,bfl,bfm,bfn,bfo,bfp,bfq,bfr,bfs,bft,bfu,bfv,bfw,bfx,bfy,bfz,2c4w,2c4x,2c4y,2c4z,2c50,2c51,2c52,2c53,2c54,2c55,2c56,2c57,2c58,2c59,2c5a,2c5b,8f5,bld,8gp,8gq,8gr,8gs,8gt,8gu,8gv,bmo,bmp,bmq,bmr,bms,bmt,bmu,bmv,bmw,bmx,bmy,bmz,bn0,bn1,bn2,bn3,2cc0,2cc1,2cc2,2cc3,2cc4,2cc5,2cc6,2cc7,2cc8,2cc9,2cca,2ccb,2ccc,2ccd,2cce,2ccf,8ma,bsi,8nt,8nu,8nv,8nw,8nx,8ny,8nz,bts,btt,btu,btv,btw,btx,bty,btz,bu0,bu1,bu2,bu3,bu4,bu5,bu6,bu7,2cj4,2cj5,2cj6,2cj7,2cj8,2cj9,2cja,2cjb,2cjc,2cjd,2cje,2cjf,2cjg,2cjh,2cji,2cjj,2j6,8uw,8ux,8uy,8uz,8v0,8v1,8v2,8v3,c0w,c0x,c0y,c0z,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c1a,c1b,2cq8,2cq9,2cqa,2cqb,2cqc,2cqd,2cqe,2cqf,2cqg,3bi1,3bi2,3bi3,3bi4,3bi5,3bi6,3bi7,920,921,922,923,924,925,926,927,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c8a,c8b,c8c,c8d,c8e,c8f,2cxc,2cxd,2cxe,2cxf,2cxg,2cxh,2cxi,2cxj,2cxk,2cxl,2cxm,2cxn,2cxo,2cxp,2cxq,2cxr,62x,994,2xl,996,997,998,999,99a,99b,cf4,cf5,cf6,cf7,cf8,cf9,cfa,cfb,cfc,cfd,cfe,cff,cfg,cfh,cfi,cfj,2d4g,2d4h,2d4i,2d4j,2d4k,2d4l,2d4m,2d4n,2d4o,2d4p,2d4q,2d4r,2d4s,2d4t,2d4u,2d4v,6a2,9g8,9g9,34q,9gb,9ge,9gf,cm8,cm9,cma,cmb,cmc,cmd,cme,cmf,cmg,cmh,cmi,cmj,cmk,cml,cmm,cmn,2dbk,2dbl,2dbm,2dbn,2dbo,2dbp,2dbq,2dbr,2dbs,2dbt,2dbu,2dbv,2dbw,2dbx,2dby,2dbz;-5,5,5,3y82,3y83,3y84,4h6w,38y1,38y2,38y3,38y4,38y5,38y6,4h7c,38yh,38yi,38yj,38yk,38yl,38ym,4h7s,38yx,38yy,38yz,38z0,38z1,38z2,38zd,38ze,38zf,38zg,38zh,38zi,38zj,3yf6,3yf7,3yf8,4he0,3955,32tm,32tn,32to,395l,7ztm,4hew,3961,396h,4hkw,4hl4,39c9,330q,330r,330s,4hlc,4hlk,39cp,800q,4eg2,4eg3,4eg4,4hm0,39d5,39dl,39j4,39j5,39j6,39j7,39j8,39j9,39ja,39jc,39jd,4hsa,39jk,39jl,39jm,39jn,39jo,39jp,39jq,39js,39jt,39k0,39k1,39k2,39k3,39k4,39k5,39k6,39k8,39k9,39kg,39kh,39ki,39kj,39kk,39kl,39km,39ko,39kp,5af4,7qwx,5dld,5dlt,7qy9,5am8,7r41,39xi,39xl,f4lo,bvnx,cxla,b027,5dsh,39xy,39y1,5dsx,39ye,39yh,7r57,7r58,7r59,7r5a,7r5d,39yu,39yx,7r5q,7r5r,5atc,7rb5,2kub,2kuc,2kud,3a4m,3a4p,3a4q,3a4r,3a4s,3a4t,3a4u,3a4v,5dzl,7rbn,8zkk,7rbp,3a52,3a55,3a56,3a57,3a58,3a59,3a5a,3a5b,5e01,3a5i,3a5l,3a5m,3a5n,3a5o,3a5p,3a5q,3a5r,7rch,3a5y,3a61,3a62,3a63,3a64,3a65,3a66,3a67,3abk,3abl,3abm,3abn,3abo,3abp,3abq,4s22,4s23,2o7h,2o7i,2o7j,3ac0,3ac1,3ac2,3ac3,3ac4,3ac5,3ac6,4s2i,4s2j,7xul,3acg,3ach,3aci,3acj,3ack,3acl,3acm,4s2y,4s2z,3acw,3acx,3acy,3acz,3ad0,3ad1,3ad2,4irk,4flt,4flu,4flv,4iro,1l1,2oel,2oem,2oen,e8j,1lg,1lh,99gg,99gh,99gi,99gj,99gw,99gx,99gy,99gz,8h6p,1s4,3apy,3aq1,3aq2,3aq3,1sk,3aqe,3aqh,3aqi,3aqj,3aqu,3aqx,3aqy,3aqz,3ara,3ard,3are,3arf,1z5,1z6,1z7,1z8,4j5x,3ax2,3ax5,8x6y,3axi,3axl,4g11,3axy,3ay1,bgve,3aye,3ayh,3qre,268,269,26a,26b,26c,4jd1,3b46,3b49,8xe2,3b4b,4jd8,4jd9,b4em,b4en,c9hs,c9ht,c9hu,c9hv,c9hw,3b4m,3b4p,3b4r,h068,4g81,4g82,6zvo,3b52,3b55,bh2i,3b57,9a28,9a29,9a2a,9a2b,9a2c,3b5i,3b5l,3qyi,3b5n,8kse,8ksf,3bb4,3bb5,3bb6,3bb7,3bb8,3bb9,3bba,3bbd,3bbe,3bbf,3bbg,3bbh,3bbi,3bbj,3bbk,3bbl,3bbm,3bbn,3bbo,3bbp,3bbq,3bbt,3bbu,3bbv,3bbw,3bbx,3bby,3bbz,3bc0,3bc1,3bc2,3bc3,3bc4,3bc5,3bc6,3bc9,3bca,3bcb,3bcc,3bcd,3bce,3bcf,3bcg,3bch,3bci,3bcj,3bck,3bcl,3bcm,3bcp,3bcq,3bcr,3bcs,3bct,3bcu,3bcv,2kg,2kh,2ki,2kj,2kk,2ky,2le,2rk,2rl,2rm,2rn,2ro;-5,4,6,9n5,9nk,9nl,2acw,394h,9u9,9uo,9up,2ak0,39bl,6vk,6vl,a1s,a1t,2ar4,39ip,72o,72p,a8w,a8x,2ay8,39pt,79s,79t,ag0,ag1,2b5c,39wx,7gw,7gx,an4,an5,2bcg,3a41,7o0,7o1,au8,au9,3ab4,3ab5,7v4,7v5,b1c,b1d,2bqo,3ai9,828,829,b8g,b8h,2bxs,3apd,89c,89d,bfk,bfl,2c4w,3awh,8gg,8gh,bmo,bmp,2cc0,3b3l,8nk,8nl,bts,btt,2cj4,3bap,5ou,5ov,8uo,8up,2ji,2jj,c0w,c0x,3bhs,3bht,91s,91t,5w8,5w9,5wa,5wb,5wc,5wd,c80,c81,2qw,2qx,2qy,2qz,2r0,2r1,2cxc,3box,2re,98w,98x,63b,63c,63d,63e,63f,63g,63h,63i,cf4,cf5,2xz,2y0,2y1,2y2,2y3,2y4,2y5,2y6,2d4g,3bw1,2yh,2yj,2yk,9g0,9g1,6ae,6af,6ag,6ah,6ai,6aj,6ak,6al,6am,6an,cm8,cm9,352,353,354,355,356,357,358,359,35a,35b,2dbk,3c35,35i,35n,35p;-5,5,6,38xs,38xt,38y8,38y9,38yo,38yp,38z4,38z5,4hds,394x,7n68,395d,395t,3969,4hkw,39c1,7ndc,39ch,39cx,39dd,39j5,pw1,pwh,39kh,39q9,39qp,39r5,tp,39rl,b01s,39xd,39xt,39y9,7r5c,39yp,3a4g,3a4h,3a4w,3a4x,3a5c,3a5d,3a5s,3a5t,3abk,3abl,7l74,3ac1,3ach,3acx,3aio,3aip,7le8,3aj5,3ajl,3ak1,4sg0,3apt,8qog,r2p,r35,3ar5,3awx,3axd,3axt,3ay9,b4e8,3b41,3b4h,3b4x,8ks0,3b5d,3bb4,3bb5,3bbk,3bbl,3bc0,3bc1,3bcg,3bch,3bi9,3bip,3bj5,3bjl,3bpd,3bpt,3bq9,3bqp,3bwh,3bwx,3bxd,3bxt;-5,0,8,r,17,7v,8b,ez,ff,m3,mj,mz,t7,tn,10b,10r,17f,17v,1ej,1ez,1ln,1m3,1mj,1sr,1t7,1zv,20b,26z,27f,2e3,2ej,2ez,2l7,2ln,2sb,2sr,2zf,2zv;-5,4,9,6aa;-4,4,0,6q2,6qf,6qg,6qi,3l3,3l4,3l5,3l6,6x6,6xj,6xk,6xm,3s7,3s8,3s9,3sa,74a,74n,74o,74q,3zb,3zc,3zd,3ze,7be,7bq,7br,7bs,7bu,46e,46f,46g,46h,46i,7ii,7iu,7iv,7iw,7iy,4di,4dj,4dk,4dl,4dm,7pm,7py,7pz,7q2,4km,4kn,4ko,4kp,4kq,7wq,7x1,7x2,7x3,7x6,4rp,4rq,4rr,4rs,4rt,4ru,83r,845,846,847,4yt,4yu,4yv,4yw,4yx,4yy,8au,8av,8aw,8ay,8b8,8b9,8ba,8bb,8bc,8be,55w,55x,55y,55z,560,561,562,8hy,8hz,8i0,8ic,8id,8ie,8if,8ig,8ii,5d0,5d1,5d2,5d3,5d4,5d5,5d6,8p3,8pg,8ph,8pj,8pm,5k4,5k5,5k6,5k7,5k8,5k9,5ka,8w7,8w8,8wa,8wk,8wn,8wo,8wq,5r8,5r9,5ra,5rb,5rc,5rd,5re,939,93b,93e,93o,93p,93r,93u,5yc,5yd,5ye,5yf,5yg,5yh,5yi,9ad,9ai,9as,9at,9ay,9b3,65g,65h,65i,65j,65k,65l,65m,3uwb,3uwc,3uwd,3uwe,3uwf;-4,4,1,1tl,1tm,1tn,1to,208,20b,20o,20p,20q,20r,20s,215,216,21m,27f,27s,27t,27u,27v,27w,289,28a,28b,28p,28q,28r,2eg,2ej,2ek,2ew,2ex,2ey,2ez,2f0,2fd,2fe,2ff,2fu,2ll,2m0,2m1,2m2,2m3,2m4,5xk,93k,93l,93m,93n,93o,93p,93q,93r,2s8,93t,5y8,5y9,5ya,5yb,5yc,5yd,5ye,5yf,5yg,5yh,5yi,5yj,5yk,5yl,5ym,5yn,9ao,9ap,9aq,9au,9av,9aw,9ax,9ay,9az,9b0,9b1,9b2,9b3,65c,65d,65e,65i,65j,65k,65l,65m,65n,65o,65p,65q,65r,303;-4,4,2,8b8,3twk,21w,21x,21y,21z,22c,22d,22e,22f,22g,8ib,8ic,8id,3u3n,3u3o,3u3p,290,291,292,293,294,29g,29h,29i,29j,29k,29x,29y,29z,2ae,8pe,8pf,8pg,8ph,3uaq,3uar,3uas,3uat,3uau,2eu,2ey,2fa,2fq,2g4,2g5,2g6,2g7,2g8,2gk,2gl,2gm,2gn,2go,2h1,2h2,2h3,2hh,2hi,2hj,8wi,8wj,8wk,3uhu,3uhv,3uhw,3uhx,3uhy,5ri,5rj,2m1,2m2,2m3,2m5,2m6,2m7,2n8,2n9,2na,2nb,2nc,2no,2np,2nq,2nr,2ns,2o5,2o6,2om,93k,93l,93m,93n,5y8,5y9,3uoy,3uoz,3up0,3up1,3up2,5yi,5yj,5yk,5yl,5ym,5yn,2t3,2t6,2t7,2t8,2t9,2ta,2tb,2tn,2tr,2uc,2ud,2ue,2uf,2ut,2uu,2uv,2uw,9ao,9ap,9aq,65c,65d,3uw2,3uw3,3uw4,3uw5,3uw6,65k,65l,65m,65n,65o,65p,65q,65r,304,308,309,30a,30b,30c,30d,30e,30f,30t,30u,30v;-4,4,3,210,284,285,291,29h,5k6,5k7,2eu,2ev,2f8,2f9,2fa,2fb,2g5,2g6,2g7,2gm,5r4,5r5,5r6,5r7,5r8,5r9,5ra,5rb,5rc,2ls,2lt,2lu,2lv,2lw,2lx,2ly,2lz,2m0,2mc,2md,2me,2mf,5y8,5y9,5ya,5yb,5yc,5yd,5ye,5yf,5yg,5yh,2sw,2sx,2sy,2sz,2t0,2t1,2t2,2t3,2t4,2t5,5yz,5z0,2te,2tf,2tg,2th,2ti,2tj,2tk,2tl,2tn,2to,2tv,65c,65d,65e,65f,65g,65h,65i,65j,65k,65l,65m,300,301,302,303,304,305,306,307,308,309,30a,663,664,665,30g,30h,30i,30j,30k,30l,30m,30n,30o,30p,30q,30r,30s,30t;-4,4,4,9nz,394v,9v3,39bz,a27,39j3,a9b,39q7;-4,5,4,38y7,pb3,pbj,38zj,395b,pi7,pin,396n,39cf,39cv,39db,39dr,39jj,39jz,39kf,39kv;-4,0,5,m,12,7q,86,eu,fa,ly,me,t2,ti,106,10m,17a,17q,1ee,1eu,1li,1ly,1sm,1t2,1zq,206,26u,27a,2dy,2ee,2l2,2li,2s6,2sm,2za,2zq;-4,4,5,3bf,6hk,6hl,6hm,63,9ng,9nh,9ni,9nj,9nk,9nl,9nm,9nn,9no,9np,9nq,9nr,9ns,9nt,9nu,9nv,9nw,9nx,9ny,9nz,2acw,2acx,2acy,2acz,2ad0,2ad1,2ad2,2ad3,2ad4,2ad5,2ad6,2ad7,2ad8,2ad9,2ada,2adb,6oo,6op,6oq,6or,6os,6ot,6ou,6ov,9uo,9up,9uq,9ur,9us,9ut,9uu,9uv,9uw,9ux,9uy,9uz,9v0,9v1,9v2,9v3,2ak0,2ak1,2ak2,2ak3,2ak4,2ak5,2ak6,2ak7,2ak8,2ak9,2aka,2akb,2akc,2akd,2ake,2akf,6vs,6vt,6vu,6vv,6vw,6vx,6vy,6vz,a1s,a1t,a1u,a1v,a1w,a1x,a1y,a1z,a20,a21,a22,a23,a24,a25,a26,a27,2ar4,2ar5,2ar6,2ar7,2ar8,2ar9,2ara,2arb,2arc,2ard,2are,2arf,2arg,2arh,2ari,2arj,72x,72y,72z,730,732,733,a8w,a8x,a8y,a8z,a90,a91,a92,a93,a94,a95,a96,a97,a98,a99,a9a,a9b,2ay8,2ay9,2aya,2ayb,2ayc,2ayd,2aye,2ayf,2ayg,2ayh,2ayi,2ayj,2ayk,2ayl,2aym,2ayn,7a7,agf,2b5r,anj,2bcv,aun,2bjz,b1r,2br3,b8v,2by7,bfz,2c5b,bn3,2ccf,bu7,2cjj,c1b,2cqn,c8f,2cxr,cfj;-4,5,5,7g,7h,7i,7j,7v,7w,7x,7y,7z,ej,ek,el,em,en,ez,f0,f1,f2,f3,fh,fx,ln,lo,lp,lq,lr,m3,m4,m5,m6,m7,mk,ml,mm,n0,n1,n2,sr,ss,st,su,sv,t7,t8,t9,ta,tb,to,tp,tq,u5,zw,zx,zy,10c,10d,10e,10f;-4,4,6,9n4,3s29,3s2a,3s2b,3s2c,3s2d,3s2e,3s2f,3s2g,3s2h,3s2i,3s2j,3s2k,3s2l,3s2m,3s2n,9nk,9nl,6e,6f,6g,6h,6i,6j,6k,6l,6m,6n,2acw,394h,6y,71,73,6og,6oh,3s9e,3s9f,3s9g,3s9h,3s9i,3s9j,3s9k,3s9l,3s9m,3s9n,3s9o,3s9p,3s9q,3s9r,9uo,9up,di,dj,dk,dl,dm,dn,do,dp,dq,dr,2ak0,39bl,e2,e3,e5,e6,e7,ju,jv,jw,6vk,6vl,3sgj,3sgk,3sgl,3sgm,3sgn,3sgo,3sgp,3sgq,3sgr,3sgs,3sgt,3sgu,3sgv,a1s,a1t,kl,km,kn,ko,kp,kq,kr,ks,kt,ku,kv,2ar4,39ip,l2,l7,72o,72p,3sno,3snp,3snq,3snr,3sns,3snt,3snu,3snv,3snw,3snx,3sny,3snz,a8w,a8x,rr,rs,rt,ru,rv,rw,rx,ry,rz,2ay8,39pt,sa,79s,79t,3sut,3suu,3suv,3suw,3sux,3suy,3suz,3sv0,3sv1,44e,ag0,ag1,yu,yw,yx,yy,yz,z0,z1,z2,2b5c,39wx,zc,ze,3t1y,3t1z,3t20,3t21,3t22,3t23,3t24,an4,an5,161,2bcg,3a41,7nr,3t93,3t94,3t95,3t96,3t97,au8,au9,2bjk,3ab5,7uw,7ux,7uy,7uz,3tg8,3tg9,3tga,4pn,b1c,b1d,2bqo,3ai9,820,821,822,823,3tnc,3tnd,3tne,4wr,b8g,b8h,2bxs,3apd,88v,hqn,3tug,3tuh,3tui,53v,bfk,bfl,2c4w,3awh,8fz,hxr,3u1k,3u1l,3u1m,5az,bmo,bmp,2cc0,3b3l,8n3,i4v,3u8o,3u8p,3u8q,5i3,bts,btt,2cj4,3bap,8tr,ibj,ibz,3ufs,3uft,3ufu,5p7,c0w,c0x,2cq8,3bht,90v,iin,2q5,2q6,ij3,3umw,3umx,3umy,5wb,5wc,5wd,5we,5wf,c80,c81,2cxc,3box,97z,2wt,2wu,ipr,iq4,iq5,iq6,iq7,3uu0,3uu1,3uu2,63f,2xo,cf4,cf5,2y4,2d4g,3bw1,9f3,iwt,iwu,iwv,ix8,5cr1,5cr2,5cr3,3v14,3v15,3v16,6aj,34s,34t,357,358,359;-4,5,6,38xt,38y9,38yp,38z5,394x,395d,395t,3969,39c1,39ch,39cx,39dd,39j5,39jl,39k1,39kh;-4,0,7,25c,25d,25s,25t;-4,1,7,1tt,1z4,1z5,1zk,1zl,200,201,20g,20h,20w,20x,21c,21d,21s,21t,228,229,22o,22p,234,235,23k,23l,240,241,24g,24h,24w,24x,25c,25d,25s,25t;-4,2,7,1z4,1z5,1zk,1zl,200,201,20g,20h,20w,20x,21c,21d,21s,21t,228,229,22o,22p,234,235,23k,23l,240,241,24g,24h,24w,24x,25c,25d,25s,25t;-4,3,7,1z4,1z5,5bm8,1zl,5bmo,201,5bn4,20h,5bnk,20x,5bo0,21d,5bog,21t,5bow,5box,5bpc,5bpd,5bps,5bpt,5bq8,5bq9,5bqo,5bqp,5br4,5br5,5brk,5brl,5bs0,5bs1,5bsg,5bsh;-4,4,7,3s28,68,3s9c,3s9d,dc,dd,3sgg,kg,7up,4pd,81u,81v,4wi,4wj,88g,88h,88i,hq8,hq9,hqa,5bls,5blt,5bm8,5bm9,5bmo,5bmp,5bn4,5bn5,5bnk,5bnl,5bo0,5bo1,5bog,5boh,5bow,5box,5bpc,5bpd,5bps,5bpt,5bq8,5bq9,5bqo,5bqp,8fm,5br4,5br5,hxe,ffcg,ffch,5bwg,5bwh,5bww,5bwx,5bxc,5bxd,5bxs,5bxt,8mq,5by8,5by9,i4i,2g1,2gh,ffk0,ffk1,5c40,5c41,5c4g,5c4h,5c4w,5c4x,8tu,5c5c,5c5d,ibm,ffrk,ffrl,5cbk,5cbl,5cc0,5cc1,90y,5ccg,5cch,iiq,5w0,5w1,5w2,5w3,5w4,5w5,5w6,5w7,5w8,5w9,5wa,5wb,5wc,5wd,5we,5wf,grds,ffz5,97m,5cj4,5cj5,ipe,983,984,985,986,987,988,989,98a,98b,98c,98d,98e,98f,5cjk,5cjl,ipu,ipv,ipw,ipx,ipy,ipz,iq0,iq1,iq2,iq3,iq4,iq5,iq6,iq7,5ckb,5ckc,5ckd,5cke,5ckf,9eo,9ep,9eq,9er,9es,9et,9eu,9ev,9ew,9ex,9ey,9ez,9f0,9f1,9f2,9f3,fg6o,fg6p,iwi,iwj,iwk,iwl,iwm,iwn,iwo,iwp,iwq,iwr,iws,iwt,iwu,iwv,5cqo,5cqp,5cqq,5cqr,5cqs,5cqt,5cqu,5cqv,5cqw,5cqx,5cqy,5cqz,5cr0,5cr1,5cr2,5cr3,5crf,5crg,5crh,5cri,5crj;-4,0,8,r,17,7v,8b,8r,ez,ff,m3,mj,t7,tn,10b,10r,17f,17v,18b,1ej,1ez,1ln,1m3,1sr,1t7,1zv,20b,20r,26z,27f,2e3,2ej,2l7,2ln,2sb,2sr,2zf,2zv,30b;-4,4,8,5w0,5w1,5w2,5w3,5w4,5w5,5w6,5w7,5w8,5w9,5wa,5wb,5wc,5wd,5we,5wf,ip9,ipq,ips,ipt,ipu,ipv,ipw,ipx,ipy,ipz,iq0,iq1,iq2,iq3,iq4,iq5,iq6,iq7,5ck0,5ck1,5ck2,5ck3,5ck4,5ck5,5ck6,5ck7,5ck8,5ck9,5cka,5ckb,5ckc,5ckd,5cke,5ckf,2xt,2xu,2xv,2xw,2y8,2y9,2ya,2yb,9eo,9ep,9eq,9er,9es,9et,iwb,iwc,iwd,iwg,iwh,iwi,iwj,iwk,iwl,iwm,iwn,iwo,iwp,iwq,iwr,iws,iwt,iwu,iwv,5cqo,5cqp,5cqq,5cqr,5cqs,5cqt,5cqu,5cqv,5cqw,5cqx,5cqy,5cqz,5cr0,5cr1,5cr2,5cr3,5cr4,5cr5,5cr6,5cr7,5cr8,5cr9,5cra,5crb,5crc,5crd,5cre,5crf,5crg,5crh,5cri,5crj;-4,4,9,3bm,3iq,3pu,3wy,442,4b6,4ia,4pe,4wi,53m,5aq,5hu,5oy,5w0,5w1,5w2,ips,ipt,5ck0,5ck1,636,iwg,5cqo,iwx,5cr4,6aa;-3,3,0,1cw,1cx,1k0,1k1;-3,4,0,6br,6bu,6c4,6c5,6c7,6ca,6cf,36s,36t,36u,36v,36w,36x,36y,3rxn,3rxo,3rxp,3rxq,3rxr,6iv,6j8,6j9,6jb,6ji,6jj,3dw,3dx,3dy,3dz,3e0,3e1,3e2,3s4r,3s4s,3s4t,3s4u,3s4v,6pz,6q3,6qc,6qd,6qf,3sbf,6qn,3l0,3l1,3l2,3l3,3l4,3l5,3l6,3sbv,3sbw,39d9,3sby,3sbz,6x3,6x8,6xa,6xg,6xh,6xj,3sik,3sim,6xr,3s4,3s5,3s6,3s7,3s8,3s9,3sa,3siz,3sj0,39kd,3sj2,3sj3,74c,74e,74k,74l,3spo,3spq,74v,3z8,3z9,3za,3zb,3zc,3zd,3ze,3sq3,3sq4,39rh,3sq6,3sq7,7bg,7bi,7bo,7bp,7bq,3sws,3swu,7bz,46c,46d,46e,46f,46g,46h,46i,3sx7,3sx8,39yl,3sxa,3sxb,7ik,7is,7it,7iu,3t3w,7j2,7j3,4dg,4dh,4di,4dj,4dk,4dl,4dm,3t4b,3t4c,3a5p,3t4e,3t4f,7pw,7px,7py,7pz,7q3,7q4,7q5,7q6,7q7,4kk,4kl,4km,4kn,4ko,4kp,4kq,3tbf,3tbg,3tbh,3tbi,3tbj,7x1,7x2,7x3,7x4,7x5,7x6,7x7,7x8,7x9,7xa,7xb,4rp,4rq,4rr,4rs,4rt,4ru,3tij,3tik,3til,3tim,3tin,845,846,847,848,849,84a,84b,84c,84d,84e,84f,4yt,4yu,4yv,4yw,4yx,4yy,3tpn,3tpo,3tpp,3tpq,3tpr,1tg,8ba,8bb,8bc,8bd,8be,8bf,8bg,8bh,8bi,8bj,55y,55z,560,561,562,3twr,3tws,3twt,3twu,3twv,20l,8ie,8if,8ig,8ih,8ii,5d2,5d3,5d4,5d5,5d6,3u3v,3u3w,3u3x,3u3y,3u3z,3uaz,3ub0,3bcd,3ub2,3ub3,2et,2f1,3ui3,3ui4,3bjh,3ui6,3ui7,2m4,3up7,3up8,3bql,3upa,3upb,3uwb,3uwc,3bxp,3uwe,3uwf;-3,4,1,6c0,6c1,6c8,6c9,6ca,6cb,6cc,6cd,6ce,6cf,36o,36p,36w,36x,36y,36z,370,371,372,373,1f,1i,6j4,6j5,6je,6jf,6jg,6jh,6ji,6jj,3ds,3dt,3e2,3e3,3e4,3e5,3e6,3e7,8k,8n,aa,ab,ac,ad,aq,ar,as,at,6q8,6q9,6qa,3kw,3kx,3ky,ft,fy,he,hf,hg,hh,hi,hu,hv,hw,hx,hy,ic,is,6xc,6xd,6xe,3s0,3s1,3s2,3s4,ms,n8,nn,no,np,o3,o4,o5,oi,oj,ok,ol,om,oy,oz,p0,p1,p2,pf,pg,ph,pv,pw,px,74g,74h,74i,3z4,3z5,3z6,uq,ur,us,ut,uu,v6,v7,v8,v9,va,vm,vn,vo,vp,vq,w2,w3,w4,w5,w6,wj,wk,x0,7bk,7bl,7bm,7bn,468,469,46a,46b,46c,46i,46j,46k,46l,46m,46n,110,116,117,118,119,11a,11b,11g,11o,11q,11u,11v,11w,11x,11y,12a,12b,12c,12d,12e,12r,12s,12t,12u,137,138,139,13a,7io,7ip,7iq,7ir,4dc,4dd,4de,4df,4dl,4dm,4dn,4do,4dp,4dq,4dr,189,18a,18b,18c,18d,18e,18f,18s,18y,18z,190,191,192,19e,19f,19g,19h,19i,19v,19w,1ac,7ps,7pt,7pu,7pv,7pw,4kg,4kh,4ki,4kj,4kk,4kp,4kq,4kr,4ks,4kt,4ku,4kv,1fd,1fe,1ff,1fg,1fh,1fi,1fj,1fz,1g3,1g4,1g5,1g6,1gj,1gk,1gl,7ww,7wx,7wy,7wz,7x0,4rk,4rl,4rm,4rn,4ro,4rs,4rt,4ru,4rv,4rw,4rx,4ry,4rz,1mg,1mh,1mi,1mj,1mk,1ml,1mm,1mn,1mw,1n1,1n2,1n3,1ni,840,841,842,843,844,4yo,4yp,4yq,4yr,4ys,4yw,4yx,4yy,4yz,4z0,4z1,4z2,4z3,1tk,1tl,1tm,1tn,1to,1tp,1tq,1tr,1u1,1u4,1u5,1u6,1u7,1uk,8b4,8b5,8b6,8b7,55s,55t,55u,55v,560,561,562,563,564,565,566,567,20o,20p,20q,20r,20s,20t,20u,20v,217,218,219,21a,21b,21o,21r,8i8,8i9,5cw,5cx,5d4,5d5,5d6,5d7,5d8,5d9,5da,5db,27p,27s,27t,27u,27v,27w,27x,27y,27z,28b,28c,28d,28e,28f,28v,5k8,5k9,5ka,5kb,5kc,5kd,5ke,5kf,2ep,2ew,2ex,2ey,2ez,2f0,2f1,2f2,2f3,2fd,2ff,2fg,2fh,2fi,2fj,2fy,2fz,5rc,5rd,5re,5rf,5rg,5rh,5ri,5rj,2lv,2lz,2m0,2m1,2m2,2m3,2m4,2m5,2m6,2m7,2mj,2mk,2ml,2mm,2mn,2n0,2n2,2n3,2ni,2nj,5yg,5yh,5yi,5yj,5yk,5yl,5ym,5yn,2sx,2t4,2t5,2t6,2t7,2t8,2t9,2ta,2tb,2to,2tp,2tq,2tr,2u7,65k,65l,65m,65n,65o,65p,65q,65r,305,308,309,30a,30b,30c,30d,30e,30f,30s,30t,30u,30v,31b;-3,4,2,6c0,6c1,36o,36p,3rxe,3rxf,3rxg,3rxh,3rxi,36v,36w,36x,36y,36z,370,371,372,373,1j,1k,1l,1m,1n,1o,1p,1q,1r,23,24,25,26,27,2n,6j4,3ds,3s4i,3s4j,395w,3s4l,3s4m,3dz,3e0,3e1,3e2,3e3,3e4,3e5,3e6,3e7,8m,8n,8o,8p,8q,8r,8s,8t,8u,8v,94,96,97,98,99,9a,9b,9p,9q,9r,3sbm,3sbn,39d0,3sbp,3sbq,3l3,3l4,3l5,3l6,3l7,3l8,3l9,3la,fm,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,g9,ga,gb,gc,gd,ge,gf,gq,gs,gt,gu,gv,hb,39jo,3siq,3sir,39k4,3sit,3siu,3s7,3s8,3s9,3sa,3sb,3sc,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n3,nc,nd,ne,nf,ng,nh,ni,nj,nv,nw,nx,ny,nz,od,oe,of,3spu,3spv,39r8,3spx,3spy,3zb,3zc,4euh,39re,4euj,39rg,4eul,39ri,4eun,tu,tv,tw,tx,ty,tz,u0,q49,4bp6,q4b,4bp8,q4d,4bpa,q4f,uf,ug,q4p,4bpm,q4r,4bpo,q4t,4bpq,q4v,uv,q55,4bq2,q57,4bq4,q59,4bq6,q5b,4bqh,4bqi,4bqj,4bqk,4bql,4bqm,4bqn,4bqx,4bqy,4bqz,4br0,4br1,4br2,4br3,4brd,q6i,4brf,q6k,4brh,4bri,4brj,39uh,39ui,39uj,39uk,39ul,39um,39un,zt,zu,zv,zw,zx,zy,zz,36s8,109,10a,10b,10c,10d,10e,10f,468,469,3swy,3swz,39yc,3sx1,3sx2,46f,46g,39yh,4f1m,39yj,4f1o,39yl,4f1q,39yn,10w,10x,10y,10z,110,111,112,113,114,4bw9,7nzu,7nzv,7nzw,119,7nzy,7nzz,11i,11j,11k,4bwp,11m,11n,11o,11p,11q,11r,4bx5,122,123,124,125,126,127,4bxl,36ui,36uj,36uk,36ul,36um,36un,4by1,8dbu,8dbv,8dbw,131,5qim,7o1r,qdl,5nda,13j,3a1l,3w66,3a22,3a23,3a24,3a25,3a26,3a27,14p,14q,14r,14s,154,155,156,157,16x,16y,16z,170,171,172,173,36zc,17d,17e,17f,17g,17h,17i,17j,4dc,4dd,3t42,3t43,3t44,3t45,3t46,4dj,4dk,4f8p,3a5m,4f8r,3a5o,4f8t,3a5q,4f8v,180,181,182,183,184,185,186,187,188,qih,7o6y,bcxn,bcxo,18d,bcxq,bcxr,18k,18l,18m,18n,18o,qix,18q,18r,18s,18t,18u,18v,194,qjd,196,197,198,199,19a,19b,4c4p,371m,371n,371o,371p,371q,371r,4c55,8diy,bz3v,bz3w,1a5,3wce,3wcf,4c5l,3wcu,3wcv,3a8p,3wda,3wdb,3a96,3wdq,3wdr,1bs,1bt,1bu,3a9n,3a9o,3a9p,3a9q,3a9r,1c8,1c9,1ca,1cb,1cc,1cp,1cq,1cr,1d6,1e1,1e2,1e3,1e4,1e5,1e6,1e7,376g,1eh,1ei,1ej,1ek,1el,1em,1en,4kg,4kh,3tb6,3tb7,3tb8,3tb9,3tba,4kn,4ko,3acp,4ffu,3acr,4ffw,3act,4ffy,3acv,1f4,1f5,1f6,1f7,1f8,1f9,1fa,1fb,1fc,4cah,7oe2,bd4r,bd4s,1fh,bd4u,bd4v,1fk,1fl,1fm,1fn,1fo,1fp,1fq,1fr,1fs,4cax,1fu,1fv,1fw,1fx,1fy,1fz,1g0,1g7,1g8,4cbd,1ga,1gb,1gc,1gd,1ge,1gf,4cbt,378q,378r,378s,378t,378u,378v,4cc9,8dq2,bzaz,bzb0,1h9,3wji,848v,qrt,1hm,1hp,3wjy,57yn,3aft,1i2,3wke,57z3,3aga,3wku,6svj,1iw,1ix,1iy,3agr,1j0,3wla,1jc,1jd,1je,1jf,3ah8,3ah9,3aha,3ahb,1jt,1ju,1jv,1k9,1ka,1kb,1l5,1l6,1l7,1l8,1l9,1la,1lb,1ll,1lm,1ln,1lo,1lp,1lq,1lr,4rk,4rl,3tia,3tib,3tic,3tid,3tie,1lz,4fmx,3aju,4fmz,3ajw,4fn1,3ajy,4fn3,1m8,1m9,1ma,1mb,1mc,1md,1me,1mf,1mg,qwp,1mi,1mj,1mk,1ml,1mm,1mn,1mo,1mp,1mq,1mr,1ms,1mt,1mu,1mv,1mw,qx5,1my,1mz,1n0,1n1,1n2,1n3,1n7,1n9,1na,1nb,1nc,qxl,1ne,1nf,1ng,1nh,1ni,1nj,1nq,1ns,4cix,37fu,37fv,37fw,37fx,37fy,37fz,4cjd,1oa,1ob,1oc,1od,3wqm,84fz,4cjt,1os,1ot,3wr2,585r,3amx,1p8,1p9,3wri,5867,3ane,3wry,6t2n,1q0,1q1,1q2,3anv,1q4,3wse,1qg,1qh,1qi,1qj,3aoc,3wsu,1qx,1qy,3aot,3aou,3aov,1re,1s9,1sa,1sb,1sc,1sd,1se,1sf,1sp,1sq,1sr,1ss,1st,1su,1sv,4yo,4yp,3tpe,3tpf,3tpg,3tph,3tpi,3aqx,4fu2,3aqz,4fu4,3ar1,4fu6,3ar3,1tc,1td,1te,1tf,1tg,1th,1ti,1tj,1tk,4cop,1tm,1tn,1to,7osd,bdj2,7osf,1ts,1tt,1tu,1tv,1tw,1tx,1ty,1tz,1u0,4cp5,1u2,1u3,1u4,1u5,1u6,1u7,1u9,1ua,1ub,1uc,1ud,1ue,1uf,1ug,4cpl,1ui,1uj,1uk,1ul,1um,1un,1uv,1uw,4cq1,37my,37mz,37n0,37n1,37n2,37n3,4cqh,1ve,3at7,3at8,3at9,3wxq,84n3,r61,c2vf,c2vg,c2vh,3wy6,84nj,3au1,4fx7,4fx8,4fx9,3wym,3aui,8hbf,8hbg,8hbh,3wz2,6t9r,1x5,1x6,3auz,3wzi,1xk,1xl,1xm,1xn,3avg,3wzy,1y0,1y1,1y2,1y3,1y4,3avx,3x0e,3avz,3awe,1zd,1ze,1zf,1zg,1zh,1zi,1zj,1zt,1zu,1zv,1zw,1zx,1zy,1zz,55s,55t,3twi,3twj,3twk,3twl,3twm,4g15,3ay2,4g17,3ay4,4g19,3ay6,4g1b,20g,20h,20i,20j,20k,20l,20m,20n,20o,rax,20q,20r,20s,20t,7ozi,20v,20w,20x,20y,20z,210,211,212,213,214,rbd,216,217,218,219,21a,21b,21c,21d,21e,21f,21g,21h,21i,21j,21k,rbt,21m,21n,21o,21p,21q,21r,21v,21x,21y,21z,220,4cx5,37u2,37u3,37u4,37u5,37u6,37u7,22g,4cxl,5ri2,3x4r,3x4s,3x4t,3x4u,84u7,4cy1,5ocq,3x57,3x58,3x59,3x5a,233,3b15,3x5m,3x5n,3x5o,3x5p,3x5q,23j,3b1m,3x63,3x64,3x65,3x66,6tgv,3b23,3x6k,3x6l,3x6m,24o,24p,24q,24r,3b2k,3x71,3x72,254,255,256,257,258,3b31,3b32,3b33,25l,25m,25n,262,26h,26i,26j,26k,26l,26m,26n,26x,26y,26z,270,271,272,273,5cw,5cx,3u3m,3u3n,3b50,3u3p,3u3q,3b55,4g8a,3b57,4g8c,3b59,4g8e,3b5b,27k,27l,27m,27n,27o,27p,27q,27r,27s,4d2x,5rne,ezi3,bdx8,27x,27y,27z,280,281,282,283,284,285,286,287,288,4d3d,28a,28b,28c,28d,28e,28f,28g,28h,28i,28j,28k,28l,28m,28n,28o,4d3t,28q,28r,28s,28t,28u,28v,28w,28z,290,291,292,293,294,4d49,3816,3817,3818,3819,381a,381b,29j,29k,4d4p,29m,4gaj,4gak,3b7h,3xby,851b,rk9,2a2,2a3,2a4,2a5,3xce,851r,3b89,2ai,2aj,8525,3xcu,2an,3b8q,2b1,3xda,6tnz,2be,3b97,3xdq,2bs,2bt,2bu,2bv,3b9o,3b9p,3b9q,3b9r,2c8,2c9,2ca,2cb,2cc,2cp,2cq,2cr,2d5,2d6,2d7,2dl,2dm,2dn,2do,2dp,2dq,2dr,2e1,2e2,2e3,2e4,2e5,2e6,2e7,5k0,5k1,3uaq,3uar,3bc4,3uat,3uau,4gfd,3bca,4gff,3bcc,4gfh,3bce,4gfj,2eo,2ep,2eq,2er,2es,2et,2eu,2ev,2ew,rp5,2ey,2ez,be4c,7pdp,be4e,7pdr,2f4,2f5,2f6,2f7,2f8,2f9,2fa,2fb,2fc,rpl,2fe,2ff,2fg,2fh,2fi,2fj,2fk,2fl,2fm,2fn,2fo,2fp,2fq,2fr,2fs,rq1,2fu,2fv,2fw,2fx,2fy,2fz,2g0,2g3,2g4,2g5,2g6,2g7,2g8,4dbd,388a,388b,388c,388d,388e,388f,2gj,2gn,2go,4dbt,2gq,4ghn,4gho,3bel,3xj2,858f,4dc9,2h6,2h7,2h8,2h9,3xji,858v,3bfd,2hn,2ho,8599,3xjy,2hr,3bfu,3xke,6tv3,3bgb,3bgc,3bgd,3bge,3bgf,2iw,2ix,2iy,2iz,2j0,2jc,2jd,2je,2jf,2jg,2jt,2ju,2ka,2kp,2kq,2kr,2ks,2kt,2ku,2kv,2l5,2l6,2l7,2l8,2l9,2la,2lb,5r4,5r5,3uhu,3uhv,3bj8,3uhx,3uhy,3bjd,4gmi,3bjf,4gmk,3bjh,4gmm,3bjj,2ls,2lt,2lu,2lv,2lw,2lx,2ly,2lz,2m0,5s1l,2m2,2m3,gxfg,7pkt,bebi,7pkv,2m8,2m9,2ma,2mb,2mc,2md,2me,2mf,2mg,5s21,2mi,2mj,2mk,2ml,2mm,2mn,2mo,2mp,2mq,2mr,2ms,2mt,2mu,2mv,2mw,5s2h,2my,2mz,2n0,2n1,2n2,2n3,2n6,2n7,2n8,2n9,2na,2nb,2nc,4dih,38fe,38ff,38fg,38fh,38fi,38fj,2nq,2nr,2ns,4dix,2nu,2nv,2nw,4dj1,3xq6,85fj,2o7,ryh,2oa,2ob,2oc,2od,3xqm,85fz,3bmh,2os,85gd,3xr2,2ov,3bmy,3bmz,3bn0,3bn1,3bn2,3bn3,2q0,2q1,2q2,2q3,2qh,2qi,2qj,2qk,2rt,2ru,2rv,2rw,2rx,2ry,2rz,2s9,2sa,2sb,2sc,2sd,2se,2sf,5y8,5y9,3uoy,3uoz,3bqc,3up1,3up2,4gtl,3bqi,4gtn,3bqk,4gtp,3bqm,4gtr,2sw,2sx,2sy,2sz,2t0,2t1,2t2,2t3,2t4,5s8p,5s8q,s3f,4doc,s3h,4doe,s3j,2tc,2td,2te,2tf,2tg,2th,2ti,2tj,2tk,5s95,5s96,s3v,4dos,s3x,4dou,s3z,2ts,2tt,2tu,2tv,2tw,2tx,2ty,2tz,2u0,5s9l,5s9m,s4b,4dp8,s4d,4dpa,s4f,2ua,2ub,2uc,2ud,2ue,2uf,2ug,4dpl,4dpm,4dpn,4dpo,4dpp,4dpq,4dpr,2uu,2uv,2uw,4dq1,4dq2,4dq3,4dq4,4dq5,4dq6,4dq7,4dqh,s5m,4dqj,s5o,4dql,4dqm,4dqn,3btl,3btm,3btn,3bto,3btp,3btq,3btr,2we,2wl,2wm,2wn,2wo,2x0,2x1,2x2,2x3,3uv6,3uvm,3uvn,3uvo,3uvp,3uvq,38rd,65c,65d,3uw2,3uw3,3bxg,3uw5,3uw6,300,301,302,303,304,305,306,307,308,309,30a,30b,30c,30d,30e,30f,30g,30h,30i,30j,30k,30l,30m,30n,30o,30p,30q,30r,30s,30t,30u,30v,30w,30x,30y,30z,310,311,312,313,314,315,316,317,318,319,31a,31b,31e,31f,31g,31h,31i,31j,31k,31l,31m,31n,31o,31p,31q,31r,31y,31z,320,321,322,323,324,325,326,327,32g,32h,32i,32j,32k,32l,32m,32n,32z,330,331,332,333,33i,33o,33p,33q,33r,33s,344,345,346,347,348,34m,352;-3,4,3,36o,36p,36q,36r,36s,36t,36u,36v,36w,36x,36y,36z,370,1c,1d,1e,1f,1g,1h,1i,1j,1k,1l,1m,1n,1o,37h,37i,1s,1t,1u,1v,1w,1x,1y,1z,20,21,22,23,24,25,26,28,29,2a,2b,2c,2d,2e,2f,2g,2h,2i,2j,2u,3ds,3dt,3du,3dz,3e0,3e1,3e2,3e3,3e4,8g,8h,8i,8j,8k,8l,8m,8n,8o,8p,8q,8r,8s,3el,3em,8w,8x,8y,8z,90,91,92,93,94,95,96,97,98,99,9a,9c,9d,9e,9f,9g,9h,9i,9j,9k,9l,9m,9n,9o,9p,9v,9w,9x,9y,a3,3l7,3l8,3l9,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,g0,g1,g2,g3,g4,g5,g6,g7,g8,g9,ga,gb,gc,gd,gg,gh,gi,gj,gk,gl,gm,gn,go,gp,gq,gr,gs,gt,gv,gw,gx,gy,gz,h0,h1,h2,h3,h4,h5,h6,hc,hk,3sc,3sd,3se,3sf,mo,mp,mq,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,na,nb,nc,nd,ne,nf,ng,nh,ni,nj,nk,nl,nm,nn,no,np,nq,nr,ns,nt,nu,nv,nw,nx,ny,nz,o0,o1,o2,o3,o4,o5,o6,o7,o8,o9,oa,ob,og,oh,oi,oj,ok,ol,om,39r4,4eu9,39r6,4eub,ab2,ab3,4bow,q41,4boy,q43,tw,tx,ty,tz,u0,u1,u2,u3,u4,u5,u6,u7,4bpc,q4h,4bpe,q4j,uc,ud,ue,uf,ug,uh,ui,uj,uk,ul,um,un,4bps,q4x,4bpu,q4z,us,ut,uu,uv,uw,ux,uy,uz,v0,v1,v2,v3,4bq8,4bq9,4bqa,4bqb,v8,v9,va,vb,vc,vd,ve,vf,vg,vh,vi,4bqo,4bqp,4bqq,4bqr,vo,vp,vq,vr,vs,vt,4br4,4br5,4br6,4br7,39u8,39u9,39ua,39ub,zk,zl,zm,100,101,102,4f1c,39y9,5naa,39yb,ai7,7nzk,4bw1,10y,4bw3,110,111,112,113,114,115,116,117,118,119,11a,11b,11c,4bwh,11e,4bwj,11g,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11s,4bwx,11u,4bwz,11w,11x,11y,11z,120,121,122,123,124,125,126,127,36u8,36u9,5nc2,4bxf,12c,12d,12e,12f,12g,12h,12i,12j,12k,12l,12m,7o1c,7o1d,92lu,4bxv,12s,12t,12u,12v,12w,12x,12y,131,132,135,4byb,13l,3a1f,3a1s,3a1t,3a1u,16o,16p,16q,16r,174,175,176,177,3a5c,4f8h,3a5e,4f8j,7o6o,4c35,182,qib,184,185,186,187,188,189,18a,18b,18c,18d,18e,18f,18g,4c3l,18i,qir,18k,18l,18m,18n,18o,18p,18q,18r,18s,18t,18u,18v,18w,4c41,18y,qj7,190,191,192,193,194,195,196,197,198,199,19a,19b,371c,371d,371e,4c4j,19g,19h,19i,19j,19k,19l,19m,19n,19o,19p,19q,19r,3wc0,3wc1,841e,4c4z,19w,19x,19y,19z,1a0,1a1,1a2,1a3,1a4,3wcg,3wch,1aa,4c5f,1ac,1ad,1ag,1ai,1ak,3wcw,3wcx,3a8j,3wdc,3wdd,3a8y,3a9c,3a9d,1ds,1dt,1du,1dv,1e8,1e9,1ea,1eb,4ffk,3ach,4ffm,3acj,7ods,4ca9,5quq,4cab,1f8,1f9,1fa,1fb,1fc,1fd,1fe,1ff,1fg,1fh,1fi,1fj,1fk,4cap,5npe,4car,1fo,1fp,1fq,1fr,1fs,1ft,1fu,1fv,1fw,1fx,1fy,1fz,1g0,4cb5,4cb6,4cb7,1g4,1g5,1g6,1g7,1g8,1g9,1ga,1gb,1gc,1gd,1ge,1gf,378g,378h,378i,4cbn,1gk,1gl,1gm,1gn,1go,1gp,1gq,1gr,1gs,1gt,1gu,1gv,848g,848h,848i,4cc3,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,57y8,57y9,1he,4ccj,1hg,1hh,1hi,1hj,1hk,1hm,57yo,57yp,3afn,1hy,6sv4,6sv5,3ag2,3agh,3agw,1kw,1kx,1ky,1kz,1lc,1ld,1le,1lf,3ajk,4fmp,3ajm,4fmr,1m8,7okx,7oky,qwj,1mc,1md,1me,1mf,1mg,1mh,1mi,1mj,1mk,1ml,1mm,1mn,1mo,1mp,1mq,qwz,1ms,1mt,1mu,1mv,1mw,1mx,1my,1mz,1n0,1n1,1n2,1n3,1n4,1n5,1n6,qxf,1n8,1n9,1na,1nb,1nc,1nd,1ne,1nf,1ng,1nh,1ni,1nj,37fk,37fl,37fm,4cir,1no,1np,1nq,1nr,1ns,1nt,1nu,1nv,1nw,1nx,1ny,1nz,84fk,84fl,84fm,4cj7,1o4,1o5,1o6,1o7,1o8,1o9,1oa,1ob,1oc,1od,1oe,1og,1oh,1oi,4cjn,1ok,1ol,1om,1on,1oo,1op,1oq,1ow,3amr,1p4,3an6,3anl,3ao0,1s0,1s1,1s2,1s3,1sg,1sh,1si,1sj,4fts,3aqp,4ftu,3aqr,1tc,bdip,bdiq,4coj,1tg,1th,1ti,1tj,1tk,1tl,1tm,1tn,1to,1tp,1tq,1tr,1ts,1tt,1tu,4coz,1tw,1tx,1ty,1tz,1u0,1u1,1u2,1u3,1u4,1u5,1u6,1u7,1u8,1u9,1ua,4cpf,1uc,1ud,1ue,1uf,1ug,1uh,1ui,1uj,1uk,1ul,1um,1un,37mo,37mp,37mq,4cpv,1us,1ut,1uu,1uv,1uw,1ux,1uy,1uz,1v0,1v1,1v2,1v3,84mo,84mp,84mq,4cqb,1v8,1v9,1va,1vb,1vc,1vd,1ve,1vf,1vg,1vh,1vi,1vk,1vl,1vm,4cqr,1vo,1vp,1vq,1vr,1vs,1vt,1vu,1vv,1vw,1w0,3atv,1wa,1wg,3aua,3aup,3av4,1z4,1z5,1z6,1z7,1zk,1zl,1zm,1zn,3axs,4g0x,3axu,4g0z,20g,7oz5,7oz6,rar,20k,20l,20m,20n,20o,20p,20q,20r,20s,20t,20u,20v,20w,20x,20y,rb7,210,211,212,213,214,215,216,217,218,219,21a,21b,21c,21d,21e,rbn,21g,21h,21i,21j,21k,21l,21m,21n,21o,21p,21q,21r,37ts,37tt,37tu,4cwz,21w,21x,21y,21z,220,221,222,223,224,225,226,227,84ts,84tt,84tu,4cxf,22c,22d,22e,22f,22g,22h,22i,22j,22k,22l,22m,22n,22o,22p,22q,4cxv,22s,22t,22u,22v,22w,22x,22y,22z,230,234,235,3b0z,3b1e,3b1t,3b28,268,269,26a,26b,26o,26p,26q,26r,4g80,3b4x,4g82,3b4z,27k,27l,27m,4d2r,27o,27p,27q,27r,27s,27t,27u,27v,27w,27x,27y,27z,280,281,282,4d37,284,285,286,287,288,289,28a,28b,28c,28d,28e,28f,28g,28h,28i,4d3n,28k,28l,28m,28n,28o,28p,28q,28r,28s,28t,28u,28v,380w,380x,380y,4d43,290,291,292,293,294,295,296,297,298,299,29a,29b,850w,850x,850y,4d4j,29g,29h,29i,29j,29k,29l,29m,29n,29o,29p,29q,29r,29s,29t,29u,4d4z,29w,29x,29y,29z,2a0,2a1,2a2,2a3,2a4,2a5,2a8,2a9,2aa,3b83,2ae,2af,2ap,3b8i,3b8x,3b9c,2dc,2dd,2de,2df,2ds,2dt,2du,2dv,3bc0,4gf5,3bc2,4gf7,2eo,be41,7pde,roz,2es,2et,2eu,2ev,2ew,2ex,2ey,2ez,2f0,2f1,2f2,2f3,2f4,2f5,2f6,rpf,2f8,2f9,2fa,2fb,2fc,2fd,2fe,2ff,2fg,2fh,2fi,2fj,2fk,2fl,2fm,rpv,2fo,2fp,2fq,2fr,2fs,2ft,2fu,2fv,2fw,2fx,2fy,2fz,3880,3881,3882,4db7,2g4,2g5,2g6,2g7,2g8,2g9,2ga,2gb,2gc,2gd,2ge,2gf,8580,8581,8582,4dbn,2gk,2gl,2gm,2gn,2go,2gp,2gq,2gr,2gs,2gt,2gu,2gv,2gw,2gx,2gy,4dc3,2h0,2h1,2h2,2h3,2h4,2h5,2h6,2h7,2h8,2h9,2ha,2hc,2hd,2he,3bf7,2hg,2ht,3bfm,3bg0,3bg1,2kg,2kh,2ki,2kj,2kn,2kw,2kx,2ky,2kz,2l3,4gm8,3bj5,4gma,3bj7,2ls,7pkh,7pki,4dgz,2lw,2lx,2ly,2lz,2m0,2m1,2m2,2m3,2m4,2m5,2m6,2m7,2m8,2m9,2ma,4dhf,2mc,2md,2me,2mf,2mg,2mh,2mi,2mj,2mk,2ml,2mm,2mn,2mo,2mp,2mq,4dhv,2ms,2mt,2mu,2mv,2mw,2mx,2my,2mz,2n0,2n1,2n2,2n3,38f4,38f5,38f6,4dib,2n8,2n9,2na,2nb,2nc,2nd,2ne,2nf,2ng,2nh,2ni,2nj,85f4,85f5,85f6,4dir,2no,2np,2nq,2nr,2ns,2nt,2nu,2nv,2nw,2nx,2ny,2nz,85fk,85fl,85fm,4dj7,2o4,2o5,2o6,2o7,2o8,2o9,2oa,2ob,2oc,2od,2oe,2og,2oh,2oi,3bmb,2ok,2ol,2om,2on,2oo,2op,2oq,2ou,3bmo,3bmp,3bmq,2oz,2p2,2p6,2rk,2rl,2rm,2rn,2s0,2s1,2s2,2s3,2s4,2s7,2s8,c9q,3bq8,4gtd,3bqa,4gtf,ca6,ca7,4do0,s35,4do2,s37,2t0,2t1,2t2,2t3,2t4,2t5,2t6,2t7,2t8,2t9,4dog,s3l,4doi,s3n,2tg,2th,2ti,2tj,2tk,2tl,2tm,2tn,2to,2tp,4dow,s41,4doy,s43,2tw,2tx,2ty,2tz,2u0,2u1,2u2,2u3,2u4,2u5,2u6,2u7,4dpc,4dpd,4dpe,4dpf,2uc,2ud,2ue,2uf,2ug,2uh,2ui,2uj,2uk,2ul,2um,2un,4dps,4dpt,4dpu,4dpv,2us,2ut,2uu,2uv,2uw,2ux,2uy,2uz,2v0,2v1,2v2,2v3,4dq8,4dq9,4dqa,4dqb,2v8,2v9,2va,2vb,2vc,2vd,2ve,2vf,2vg,2vh,2vi,2vj,3btc,3btd,3bte,3btf,2vo,2vp,2vq,2vr,2vs,2vt,2vu,2vv,2vw,2w0,2zc,2zd,cgu,ch7,ch8,ch9,cha,chb,300,301,302,303,304,305,306,307,308,309,30a,30g,30h,30i,30j,30k,30l,30m,30n,30o,30p,30q,30w,30x,30y,30z,310,311,312,313,314,315,316,317,318,319,31c,31d,31e,31f,31g,31h,31i,31j,31k,31l,31m,31n,31o,31p,31q,31r,31s,31t,31u,31v,31w,31x,31y,31z,320,321,322,323,324,325,326,327,328,329,32a,32b,32c,32d,32e,32f,32g,32h,32i,32j,32k,32l,32m,32n,32o,32p,32q,32r,32s,32t,32u,32v,32w,32x,32y,32z,330,331,333,338,33g;-3,3,4,3toe,3tof,3tvi,3tvj,3u2m,3u2n,3u9q,3u9r;-3,4,4,3kw,3kx,fk,fl,g0,3s0,mo,n4,nl,3z4,3z5,3z6,ts,tt,tu,400,uo,468,469,10w,10x,474,11s,11u,4dc,180,18g,4e9,18w,18x,18y,4kg,4kh,1f4,1f5,1fk,1fl,4le,1g0,1g1,1g2,4rl,1m8,1m9,1mo,1mp,4si,1n4,1n5,1n6,1nk,3tor,3tos,3tot,1tc,1td,1ts,1tt,4zm,4zy,4zz,1u8,1u9,1ua,1uo,1up,3tvv,3tvw,3tvx,3tw9,3twa,20g,20h,20i,20w,20x,20y,571,572,573,21c,21d,21e,57g,21s,21t,21u,23m,23n,23o,23p,243,244,245,3u2z,3u30,3u31,3u3a,3u3b,3u3c,3u3d,3u3e,3u3q,27k,27l,27m,280,281,282,5e5,5e6,5e7,28g,28h,28i,5eh,5ei,5ej,28w,28x,28y,29d,2aq,2ar,2as,2at,2au,2b6,2b7,2b8,2b9,2ba,2bo,2bp,2c4,buu,buv,3ua3,3ua4,8p9,8pa,bva,3uaf,3uag,3uah,3uai,8pp,8pq,bvn,bvo,bvp,3uau,8q5,8q6,2eo,2ep,2eq,8ql,8qm,8qn,2f4,2f5,2f6,5l9,5la,2fk,2fl,2fm,2fn,5lg,5li,5lj,5lk,5ll,5lm,5ln,2g0,2g1,2g2,2g3,2g4,2gg,2gk,2h0,2hg,2hu,2hv,2hw,2hx,2hy,2ia,2ib,2ic,2id,2ie,2ir,2is,2it,2j7,2j8,2j9,c1y,c1z,3uh6,3uh7,3uhi,3uhj,3uhk,3uhl,3uhm,8ws,3uhp,3uhq,3uhr,c2p,c2q,c2r,c2s,c2t,3uhy,8x8,3ui5,3ui6,3ui7,2ls,c38,c39,8xo,2m7,2m8,rwk,rwl,5sc,2ml,2mm,2mn,2mo,2mp,2mq,5sk,5sl,5sm,5sn,5so,5sp,5sq,5sr,2n4,2n5,2n6,2n7,2n8,2nk,2nl,2oy,2oz,2p0,2p1,2p2,2pe,2pf,2pg,2ph,2pi,2pw,2px,2qc,c92,c93,3uo9,3uom,3uon,3uoo,3uop,3uoq,93v,3uos,3uot,3uou,c9s,c9t,c9u,c9v,c9w,c9x,3up2,94b,3up8,3up9,3upa,3upb,cac,cad,94r,2t8,2t9,2ta,2tb,s3o,s3p,5zf,2to,2tp,2tq,2tr,2ts,5zo,5zp,5zq,5zr,5zs,2u8,2u9,2ua,2ub,2uc,2ud,2uo,2up,2uq,2v5,2w3,2w4,2w5,2w6,2wj,2wk,2wl,3uvd,3uvq,3uvr,3uvs,3uvv,3uvw,cgw,cgx,cgy,cgz,ch0,ch1,3uw6,3uwb,3uwc,3uwd,3uwe,3uwf,chg,chh,30b,30c,30d,30e,30f,sas,sat,30r,30s,30t,30u,66s,66t,66u,317,319,31c,31d,31e,31f,31g,31h,31i,31s,31t,31u,31x,328;-3,0,5,m,12,7q,86,eu,fa,ly,me,t2,ti,106,10m,17a,17q,1ee,1eu,1li,1ly,1sm,1t2,1zq,206,26u,27a,2dy,2ee,2l2,2li,2s6,2sm,2za,2zq;-3,2,5,3tnr,3tns,3to7,3to8,3tt1,3tt2,3tt3,3tth,3tti,3ttj,3ttx,3tty,3ttz,3tu0,3tud,3tue,3tuf,3tug,3tut,3tuu,3tuv,3tuw,3tv9,3tva,3tvc,3u05,3u06,3u07,3u08,3u0l,3u0m,3u0n,3u0o,3u11,3u12,3u13,3u14,3u1h,3u1i,3u1j,3u1k,25h,3u20,25x,3u2g,2bp,2c5,2cl;-3,3,5,3t7q,3t84,3t85,3t8m,3t8n,1cn,1d3,1di,1dj,3tav,3taw,3tbb,3tbc,3tbr,3tbs,3tc7,3tc8,3tcm,3tcn,3tco,3tcp,3teu,3tf7,3tf8,3tf9,3tfa,3tfq,3tfr,3tg8,3tgh,3tgi,1k8,1kn,1ko,3thi,3thj,3thk,3thy,3thz,3ti0,3tid,3tif,3tig,1md,3tiw,1mt,3tjc,3tjd,3tjt,3tju,3tka,3tkb,1oa,1ob,3tlv,3tlw,3tlx,3tme,3tmu,3tmv,3tn5,3tn6,3tnc,3tnd,3tnk,3tnl,3tnm,3tnn,1rc,1rd,3to0,1rr,1rs,1rt,3tol,3too,3tp1,3tp4,1t1,3tpk,1th,3tq0,1tx,3tqg,3tqh,3tqx,3tqy,3tr9,3tre,3trf,3trg,3trp,1ve,1vf,1vg,3ts5,1vu,1vv,1vw,3tsl,1wa,1wb,1wc,3tsz,3tt0,3tt1,3tti,3tty,3tu9,3tuf,3tug,3tuh,3tuo,3tup,3tuq,3tur,3tus,1yg,1yh,3tv4,1yv,1yw,1yx,1z9,3tvs,1zp,3tw8,3two,3tx4,3txk,3txl,3ty1,3tyi,3tyj,22h,22i,22j,22x,22y,22z,3tzn,3tzo,3tzp,23d,23e,23f,23n,23o,23t,243,3u0m,24j,3u12,3u1d,3u1s,3u1t,3u1u,3u1v,3u1w,3u1x,3u1y,3u1z,3u20,3u21,3u28,25y,25z,260,261,3u5l,3u5m,3u5z,3u60,29l,29m,3u6e,29z,2a0,2a1,2a2,3u6r,3u6s,3u6t,2ae,2af,2ag,2ah,2ai,2ar,2as,2at,2au,2av,2aw,2ax,2b7,2b8,2b9,2ba,2bn,2bo,2bp,3u8x,3u8y,3u8z,3u90,3u91,3u92,3u93,3u94,3u95,3u9c,2d1,2d2,2d3,2d4,2d5,3ucp,3ud3,3ud4,2gp,2gq,3udg,3udh,3udi,2h3,2h4,2h5,2h6,2hg,2hh,2hi,2hj,2hk,2hl,2hw,2hx,2hy,2hz,2i0,2i1,2ic,2id,2ie,3ug2,3ug3,3ug4,3ug5,3ug6,3ug7,3ug8,2k2,2k3,2k4,2k5,2k6,2k7,2k8,3uk7,3uk8,3ukk,3ukl,3ukm,2o7,2o8,2ok,2ol,2om,2on,2oo,2p0,2p1,2p2,2p3,2p4,2pg,2ph,2pi,3un6,3un7,3un8,3un9,3una,3unb,2r6,2r7,2r8,2r9,2ra,2rb,3uua,3uub,3uuc,3uud,3uue,2ya,2yb,2yc,2yd,2ye;-3,4,5,16u,16v,1dy,1dz,1e0,1l2,1l3,1l4,1l5,1s6,1s7,1s8,1s9,1sn,1so,1sp,4zk,1za,1zb,1zc,1zd,1zp,1zq,1zr,1zs,1zt,56o,26d,26e,26f,26g,26h,26s,26t,26u,26v,26w,26x,277,5ds,2de,2df,2dg,2dh,2di,2dj,2dk,2du,2dv,2dw,2dx,2dy,2dz,2e0,2ea,2eb,5k7,8q5,8q6,8q7,8q8,2ev,3ubc,3ubd,3ube,3ubf,3ubg,3ubh,3ubi,3ubj,3ubp,8qu,8qv,3ubs,3ubt,3ubu,3ubv,3ubw,3ubx,3uby,3ubz,3uc5,3uc6,3uc7,3uc8,3uc9,3uca,3ucb,3ucc,3ucd,3uce,3ucf,3ucn,3uco,3ucp,3ucq,3ucr,3ucs,3uct,3ucu,3ucv,3ud5,3ud6,3ud7,3ud8,3ud9,3uda,3udb,3udn,3udo,3udp,3udq,3udr,3ue5,3ue6,3ue7,3uen,2ki,2kj,2kk,2kl,2km,2kn,3uhc,2ky,2kz,2l0,2l1,2l2,2l3,5qw,5qx,5qy,5qz,5r0,5r1,5r2,5r3,3uhs,3uht,3uhu,3uhv,3uhw,2lh,2li,2lj,2lk,2ll,2lm,2ln,2lo,2lp,2lq,2lr,2ls,2lt,3uia,3uib,3uic,3uid,3uie,2lz,2m0,2m1,2m2,2m3,2m8,2m9,2ma,2mb,3uis,3uit,3uiu,3uiv,3uj0,3uj1,3ujb,3ujc,3ujd,3ujt,3uju,3ujv,3ukb,3ukc,3ukd,2nz,3ukt,3uku,3ukv,3ulb,5xo,5xp,5xq,5xr,5xy,5xz,5y0,5y1,5y2,5y3,2sc,2sd,2se,2sf,3uow,3uox,3uoy,3uoz,3up0,3up1,2sm,2sn,2so,2sp,2sq,2sr,2ss,2st,2su,2sv,2sw,2sx,3upe,3upf,3upg,3uph,3upi,2t3,2t4,2t5,2t6,2t7,2tc,2td,2tf,3upw,3upx,3upy,3upz,2tl,2ts,3uqf,3uqg,3uqh,3uqx,3uqy,3urf,3urg,3urh,3urx,3ury,3urz,3usf,656,657,658,659,65a,65b,3uw0,3uw1,3uw2,3uw3,3uw4,3uw5,3uw6,3uw7,3uw8,3uw9,2zu,2zv,2zw,2zx,2zy,2zz,300,301,3uwi,3uwj,3uwk,3uwl,3uwm,307,308,309,30a,30h,3ux0,3ux1,3ux2,3ux3,3uxj,3uxk,3uxl,3uy1,3uy2,3uyj,3uyk,3uyl,3uz1,3uz2,3uz3,3uzj;-3,4,6,6fy,fxq,6gf,fy5,59ry,fy7,fyk,59sd,59se,59sf,3s2g,3s2h,3s2i,3bv,64,65,6k,6n2,6n3,g4u,g4v,g59,59z2,59z3,g5o,ct,cu,3s9k,3s9l,3s9m,3iz,6u6,6u7,gby,gbz,gcc,gcd,5a66,5a67,gcs,3sgo,3sgp,3sgq,3q3,71a,71b,gj2,gj3,gjg,gjh,5ada,5adb,gjw,3sns,3snt,3snu,3x7,78f,gq6,gq7,gqk,gql,5ake,5akf,gr0,3suw,3sux,3suy,44b,7f3,gwv,gxa,5ar3,gxo,gxp,5ari,5arj,gy4,3t20,3t21,3t22,4bf,7m7,h3z,h4e,5ay7,h4s,h4t,5aym,5ayn,h58,3t94,3t95,3t96,4ij,4ml,1h9,7su,7sv,ham,han,hb2,5b4v,hbi,5b5b,hbw,hbx,5b5q,5b5r,hcc,3tg8,3tg9,3tga,4pn,7zh,7zi,7zj,hh9,hha,hhb,hhq,hhr,hi6,hi7,him,hin,hj0,hj1,5bcu,5bcv,hjg,3tnc,3tnd,3tne,4wr,hpq,hpr,hq4,hq5,hq6,hq7,hqk,3tug,3tuh,3tui,53v,hwu,hwv,hx8,hx9,hxa,hxb,hxo,hxp,hxq,hxr,3u1k,3u1l,3u1m,5az,5e5,5e6,28t,28u,3u8o,3u8p,3u8q,5i3,5i4,5i5,5i6,5i7,8ps,8pt,8pv,3uas,3ub4,3ub5,3ub7,3ub8,8qd,3uba,8qf,8qg,5kp,3ubk,3ubl,3ubm,3ubn,3ubo,3ubp,3ubq,3ubr,3ubs,2fd,3uc0,3uc1,3uc2,3uc3,3uc4,3uc5,3uc6,3uc7,3uc8,2fw,3ucg,3uch,3uci,3ucj,3uck,3ucl,3ucm,3ucn,3uco,3ucw,3ucx,3ucy,3ucz,3ud0,3ud1,3ud2,3ud3,3ud4,3udc,3udd,3ude,3udf,3udg,3udh,3udi,3udj,3udk,3uds,3udt,3udu,3udv,3udw,3udx,3udy,3udz,3ue0,3ue8,3ue9,3uea,3ueb,3uec,3ued,3uee,3uef,3ueg,3uep,3ueq,3uer,3ues,3uet,3ueu,3uev,3uew,3uf7,3uf8,3uf9,3ufa,3ufb,3ufc,3ufp,3ufq,3ufr,3ufs,3uft,3ufu,5qo,5qp,5qq,5qr,5qs,5qt,5qu,5qv,5qw,5qx,5qy,5qz,5r0,5r1,5r2,2lc,2ld,2le,2lf,2lg,2lh,2li,2lj,2lk,2ll,2lm,2ln,2lo,2lp,2lq,2lt,3uid,3uie,8xj,2m0,3uit,3uiv,3ujb,3ujr,2nk,2nl,2nm,2nn,3uk7,2o0,2o1,2o2,2o3,3ukn,3ukw,3ukx,3ul3,3uld,3ule,3ulj,3ulv,3ulw,3ulx,3ulz,3umd,3ume,3umf,3umv,3umw,3umx,3umy,5xc,5xd,5xe,5xf,5xg,2s0,2s1,2s2,2s3,2s4,5xx,5xy,5xz,5y0,5y1,5y2,2sg,2sj,2sk,2sl,2sm,2sn,2so,2sp,2sq,3uph,2t2,3upj,2t4,2t5,2t6,3upx,3upz,3uqf,3uqv,3urb,3urr,3us0,3us1,3us7,3ush,3usi,3usn,3usz,3ut0,3ut1,3ut3,3uth,3uti,3utj,3utz,3uu0,3uu1,3uu2,651,652,653,654,655,2zo,2zp,2zq,2zr,2zs,2zt,3uwl,3uwn,309,3ux1,3ux3,3uxj,3uxz,3uyf,3uyv,3uz4,3uz5,3uzb,3uzl,3uzm,3uzr,3v03,3v04,3v07,3v0l,3v0m,3v0n,3v13,3v14,3v15,3v16;-3,4,7,6g0,6g1,6g2,6g3,6g4,6g5,6g6,6g7,6g8,6g9,6ga,6gb,6gc,6gd,6ge,6gf,fxs,fxt,fxu,fxv,fxw,fxx,fxy,fxz,fy0,fy1,fy2,fy3,fy4,fy5,fy6,fy7,59s0,59s1,59s2,59s3,59s4,59s5,59s6,59s7,59s8,59s9,59sa,59sb,59sc,59sd,59se,59sf,6n4,6n5,6n6,6n7,6n8,6n9,6na,6nb,6nc,6nd,6ne,6nf,6ng,6nh,6ni,6nj,g4w,g4x,g4y,g4z,g50,g51,g52,g53,g54,g55,g56,g57,g58,g59,g5a,g5b,59zf,59zg,59zh,59zi,59zj,6ts,6u2,6u3,6u4,6u5,6u6,6u7,gbk,6u9,6ua,6ub,6uc,6ud,6ue,6uf,6ug,6uh,gbu,gbv,gbw,gbx,gby,gbz,5a5s,gc1,gc2,gc3,gc4,gc5,gc6,gc7,gc8,gc9,5a62,5a63,5a64,5a65,5a66,5a67,5a6j,5a6k,5a6l,5a6m,5a6n,ko,kp,kq,kr,ks,l4,l5,l6,l7,l8,70w,70x,70y,713,714,715,716,717,718,719,71a,71b,gio,gip,giq,71f,71g,71h,71i,giv,giw,gix,giy,giz,gj0,gj1,gj2,gj3,5acw,5acx,5acy,gj7,gj8,gj9,gja,5ad3,5ad4,5ad5,5ad6,5ad7,5ad8,5ad9,5ada,5adb,5adn,5ado,5adp,5adq,5adr,rs,rt,ru,rv,rw,s8,s9,sa,sb,sc,780,781,782,783,784,785,786,787,788,789,78b,78c,78d,78e,78f,gps,gpt,gpu,gpv,gpw,gpx,gpy,gpz,gq0,gq1,gq2,gq3,gq4,gq5,gq6,gq7,5ak0,5ak1,5ak2,5ak3,5ak4,5ak5,5ak6,5ak7,5ak8,5ak9,5aka,5akb,5akc,5akd,5ake,5akf,y2,5akr,5aks,5akt,5aku,5akv,yi,yw,yx,yy,yz,z0,zc,zd,ze,zf,zg,7eo,7f2,7f3,gwg,7f5,7f6,7f7,7f8,7f9,7fa,7fb,7fc,7fd,7fe,7ff,7fg,7fh,gwu,gwv,5aqo,gwx,gwy,gwz,gx0,gx1,gx2,gx3,gx4,gx5,gx6,gx7,gx8,gx9,5ar2,5ar3,5ar4,5ar5,5ar6,5ar7,5ar8,5ar9,5ara,5arb,5arc,5ard,5are,5arf,5arg,5arh,5ari,5arj,5arv,5arw,5arx,5ary,5arz,160,161,162,163,164,16g,16h,16i,16j,16k,7ls,7lt,7lu,7lv,7lw,7lx,7m1,7m2,7m3,7m4,7m5,7m6,h3j,h3k,h3l,h3m,h3n,h3o,h3p,7me,7mf,7mg,h3t,h3u,h3v,h3w,h3x,h3y,h3z,5axs,5axt,5axu,5axv,5axw,5axx,h46,h47,h48,5ay1,5ay2,5ay3,5ay4,5ay5,5ay6,5ay7,5ay8,5ay9,5aya,5ayb,5ayc,5ayd,5aye,5ayf,5ayg,5ayh,5ayi,5ayj,5ayk,5ayl,5aym,5ayn,5ayz,5az0,5az1,5az2,5az3,1d4,1d5,1d6,1d7,1dl,1dm,1dn,1do,7sg,ha7,ha8,5b41,7sy,7sz,7t0,7t1,7t2,7t3,7t4,7t5,7t6,7t7,7t8,7t9,ham,5b4f,5b4g,5b4h,haq,har,has,hat,hau,hav,haw,hax,hay,haz,hb0,hb1,5b4u,5b4v,5b4w,5b4x,5b4y,5b4z,5b50,5b51,5b52,5b53,5b54,5b55,5b56,5b57,5b58,5b59,5b5a,5b5b,5b5c,5b5d,5b5e,5b5f,5b5g,5b5h,5b5i,5b5j,5b5k,5b5l,5b5m,5b5n,5b5o,5b5p,5b5q,5b5r,5b63,5b64,5b65,5b66,5b67,7zk,hhc,80e,hhr,hhs,1p7,hi6,hi7,hi8,hi9,hia,hib,hic,hid,hie,hif,hig,hih,hii,hij,hik,hil,him,hin,5bcg,5bch,5bci,5bcj,5bck,5bcl,5bcm,5bcn,5bco,5bcp,5bcq,5bcr,5bcs,5bct,5bcu,5bcv,5bd7,5bd8,5bd9,5bda,5bdb,1v5,hpc,hps,hpt,hpu,hpv,hpw,hpx,hpy,hpz,hq0,hq1,hq2,hq3,hq4,hq5,hq6,hq7,5bkb,5bkc,5bkd,5bke,5bkf,21s,22t,hwg,hww,hxc,hxd,hxe,hxf,hxg,hxh,hxi,hxj,hxk,hxl,hxm,hxn,hxo,hxp,hxq,hxr,5hs,5ht,5hu,5hv,5hw,5hx,5hy,5hz,5i0,5i1,5i2,5i3,5i4,5i5,5i6,5i7,5sn,5so,5sp,5sq,5sr,5ss,5st,5su,5sv,2n8,2nb,2nc,2nd,2ne,2nf,2ng,2nh,2ni,2nj,94y,4guq,4gur,5zt,5zu,5zv,5zw,5zx,5zy,5zz,2ug,2uh,2ui,2uj,2uk,2ul,2um,2un,9c3,9c4,4h1v,4h1w,66z,670,671,673,31n,31o,31p,31r;-3,5,7,ll,lm,ln,m2,sp,sq,sr,t5,t6,t7,zu,10a;-3,0,8,r,17,7v,8b,ez,ff,m3,mj,mz,t7,tn,10b,10r,5att,5atu,5atv,17f,5au9,5aua,5aub,17v,5b0x,5b0y,5b0z,1ej,5b1d,5b1e,5b1f,1ez,5b1u,5b2a,5b2q,5b36,5b3m,5b42,5b4i,5b4y,5b5e,5b5u,5b6a,5b6q,5b76,5b81,5b82,5b83,1ln,5b8h,5b8i,5b8j,1m3,1mj,1si,1sr,1sy,1t7,1zm,1zv,202,20b,26q,26z,276,27f,2du,2e3,2ea,2ej,2ez,2ky,2l7,2le,2ln,2sb,2sr,2zf,2zv;-3,1,8,5b0i,5b0y,5b1e,5b1u,5b2a,5b2q,5b36,5b3m,5b42,5b4i,5b4y,5b5e,5b5u,5b6a,5b6q,5b76;-3,2,8,5b0i,5b0y,5b1e,5b1u,5b2a,5b2q,5b36,5b3m,5b42,5b4i,5b4y,5b5e,5b5u,5b6a,5b6q,5b76;-3,3,8,5b0i,5b0y,5b1e,5b1u,5b2a,5b2q,5b36,5b3m,5b42,5b4i,5b4y,5b5e,5b5u,5b6a,5b6q,5b76;-3,4,8,6ff,6fg,6fh,6fp,6fq,6fr,6fs,6ft,6fu,fx7,fx8,fx9,6g0,6g1,6g2,6g3,6g4,fxh,fxi,fxj,fxk,fxl,fxm,59rf,59rg,fxp,fxs,fxt,fxu,fxv,fxw,59rp,59rq,59rr,59rs,59rt,59ru,59rv,59rw,59rx,fy6,fy7,59s0,59s1,59s2,59s3,59s4,59s5,59s6,59s7,59s8,59s9,59sa,59sb,59sc,59sd,59se,59sf,6mj,6mk,6ml,6mo,6mp,6mq,6mr,6ms,6mt,6mu,6mv,6mw,6mx,6my,g4b,g4c,g4d,g4g,g4h,g4i,g4j,g4k,g4l,g4m,g4n,g4o,g4p,g4q,59yj,59yk,59yl,g4u,g4v,59yo,59yp,59yq,59yr,59ys,59yt,59yu,59yv,59yw,59yx,59yy,59yz,59z0,59z1,59z2,59z3,59z4,59z5,59z6,59z7,59z8,59z9,59za,59zb,59zc,59zd,59ze,59zf,59zg,59zh,59zi,59zj,6tm,6tn,6to,6tp,6tq,6tr,6ts,6tt,6tu,6tv,6tw,6tx,6ty,6tz,6u0,6u1,gbe,gbf,gbg,gbh,gbi,gbj,gbk,gbl,gbm,gbn,gbo,gbp,gbq,gbr,gbs,gbt,5a5m,5a5n,5a5o,5a5p,5a5q,gbz,5a5s,5a5t,5a5u,5a5v,5a5w,5a5x,5a5y,5a5z,5a60,5a61,5a62,5a63,5a64,5a65,5a66,5a67,5a68,5a69,5a6a,5a6b,5a6c,5a6d,5a6e,5a6f,5a6g,5a6h,5a6i,5a6j,5a6k,5a6l,5a6m,5a6n,70f,70p,70q,70r,70s,70t,70u,gi7,70w,70x,70y,70z,710,711,712,713,714,gih,gii,gij,gik,gil,gim,gin,gio,gip,giq,gir,gis,git,giu,giv,giw,5acp,5acq,5acr,5acs,5act,5acu,gj3,5acw,5acx,5acy,5acz,5ad0,5ad1,5ad2,5ad3,5ad4,5ad5,5ad6,5ad7,5ad8,5ad9,5ada,5adb,5adc,5add,5ade,5adf,5adg,5adh,5adi,5adj,5adk,5adl,5adm,5adn,5ado,5adp,5adq,5adr,77j,77p,77q,77r,77s,77t,77u,77v,77w,77x,77y,gpb,780,781,782,783,784,gph,gpi,gpj,gpk,gpl,gpm,gpn,gpo,gpp,gpq,gpr,gps,gpt,gpu,gpv,gpw,5ajp,5ajq,5ajr,5ajs,5ajt,5aju,5ajv,5ajw,5ajx,5ajy,gq7,5ak0,5ak1,5ak2,5ak3,5ak4,5ak5,5ak6,5ak7,5ak8,5ak9,5aka,5akb,5akc,5akd,5ake,5akf,5akg,5akh,5aki,5akj,5akk,5akl,5akm,5akn,5ako,5akp,5akq,5akr,5aks,5akt,5aku,5akv,7em,7en,7eo,7ep,7eq,7er,7es,7et,7eu,7ev,7ew,7ex,7ey,7ez,7f0,7f1,gwe,gwf,gwg,gwh,gwi,gwj,gwk,gwl,gwm,gwn,gwo,gwp,gwq,gwr,gws,gwt,gwu,gwv,5aqo,5aqp,5aqq,5aqr,5aqs,5aqt,5aqu,5aqv,5aqw,5aqx,5aqy,5aqz,5ar0,5ar1,5ar2,gxb,5ar4,5ar5,5ar6,5ar7,5ar8,5ar9,5ara,5arb,5arc,5ard,5are,5arf,5arg,5arh,5ari,5arj,5ark,5arl,5arm,5arn,5aro,5arp,5arq,5arr,5ars,5art,5arv,5arw,5arx,5ary,5arz,h2a,h2p,h2q,7lp,7lq,7lr,h34,h35,h36,7lv,7lw,7lx,7ly,7lz,7m0,7m1,7m2,7m3,7m4,h3h,h3i,h3j,h3k,5axd,h3m,h3n,h3o,h3p,h3q,h3r,h3s,h3t,h3u,h3v,h3w,5axp,h3y,h3z,5axs,5axt,5axu,5axv,5axw,5axx,5axy,5axz,5ay0,5ay1,5ay2,5ay3,5ay4,5ay5,5ay6,h4f,5ay8,5ay9,5aya,5ayb,5ayc,5ayd,5aye,5ayf,5ayg,5ayh,5ayi,5ayj,5ayk,5ayl,5aym,5ayn,5ayo,5ayp,5ayq,5ayr,5ays,5ayt,5ayu,5ayv,5ayw,5ayx,5ayy,5ayz,5az0,5az1,5az2,5az3,5b0i,5b0y,5b1e,5b1u,5b2a,5b2q,h8z,h9d,5b36,h9f,h9s,5b3l,5b3m,h9v,7sr,7ss,7st,7su,7sv,5b40,5b41,5b42,hab,7t0,7t1,7t2,7t3,7t4,7t5,7t6,haj,hak,hal,ham,han,5b4g,5b4h,haq,har,has,hat,hau,hav,haw,hax,hay,5b4r,5b4s,hb1,hb2,hb3,5b4w,5b4x,5b4y,5b4z,5b50,5b51,5b52,5b53,5b54,5b55,5b56,5b57,5b58,5b59,5b5a,hbj,5b5c,5b5d,5b5e,5b5f,5b5g,5b5h,5b5i,5b5j,5b5k,5b5l,5b5m,5b5n,5b5o,5b5p,5b5q,5b5r,5b5s,5b5t,5b5u,5b5v,5b5w,5b5x,5b5y,5b5z,5b60,5b61,5b62,5b63,5b64,5b65,5b66,5b67,hgi,hgx,hgy,7zv,7zw,7zx,7zy,7zz,hhc,hhd,hhe,hhn,hho,hhp,hhq,hhr,hhs,hht,hi3,hi4,hi5,hi6,hi7,hi8,hi9,hia,hib,hic,hid,hie,hif,hig,hih,hii,hij,hik,hil,him,hin,5bcg,5bch,5bci,5bcj,5bck,5bcl,5bcm,5bcn,5bco,5bcp,5bcq,5bcr,5bcs,5bct,5bcu,5bcv,5bcw,5bcx,5bcy,5bcz,5bd0,5bd1,5bd2,5bd3,5bd4,5bd5,5bd6,5bd7,5bd8,5bd9,5bda,5bdb,86z,hor,hps,hpt,hpu,hpv,hpw,hpx,hpy,hpz,hq0,hq1,hq2,hq3,hq4,hq5,hq6,hq7,5bk0,5bk1,5bk2,5bk3,5bk4,5bk5,5bk6,5bk7,5bk8,5bk9,5bka,5bkb,5bkc,5bkd,5bke,5bkf,hxc,hxd,hxe,hxf,hxg,hxh,hxi,hxj,hxk,hxl,hxm,hxn,hxo,hxp,hxq,hxr,5hs,5ht,5hu,5hv,5hw,5hx,5hy,5hz,5i0,5i1,5i2,5i3,5i4,5i5,5i6,5i7,5sg,5sh,5si,5sj,5sk,5sl,5sm,5sn,2n4,2n5,2n6,2n7,2n8,2n9,2na,2nb,8zb,8zd,5tz,5u1,5zk,5zl,5zm,5zn,5zo,5zp,5zq,5zr,2u8,2u9,2ua,2ub,2uc,2ud,2ue,2uf,66o,66p,66r,66s,66t,66u,66v,31c,31d,31f,31g,31h,31i,31j,67q;-3,4,9,fxs,fxt,59s0,fy9,3bm,g4g,g4h,g4i,g4w,g4x,g4y,59z4,g5d,3iq,6sw,6sx,gao,gap,gc0,gc1,gc2,5a68,gch,3pu,gj4,5adc,gjl,3wy,gq8,5akg,gqp,442,gww,gxc,5ark,gxt,4b6,h40,h4g,5ayo,h4x,4ia,hb4,hbk,5b5s,hc1,4pe,hi8,hio,5bcw,hj5,4wi,4wj,hps,5bk0,hq9,53m,53n,hxc,hxd,5aq,5hs,5ht,5hu,5oy,5w2,636,6aa;-3,3,-1,1db,1kf;-2,4,0,3rxn,3rxo,38z1,3rxq,3rxr,1n,3s4r,3s4s,3s4t,3s4u,3s4v,8n,3sbw,3sbx,3sby,3sbz,3s3,3sj1,3sj2,3sj3,mr,mx,3sq6,3sq7,tz,vv,vw,vx,vy,wa,wb,wc,wd,3swz,46l,46m,3sxb,112,114,116,119,11a,11b,12y,12z,130,131,132,13e,13f,13g,13h,13i,13w,14c,4dm,4dn,4do,4dp,4dq,4dr,188,18a,18b,18c,18d,18e,18f,18s,18u,198,19o,1a2,1a3,1a4,1a5,1a6,1ai,1aj,1ak,1al,1am,1az,1b0,1b1,1bf,1bg,1bh,1h6,1h7,1h8,1h9,1ha,1hm,1hn,1ho,1hp,1hq,1i4,1ik,1ob,1oc,1od,1oe,1oq,1or,1os,1ot;-2,4,1,3rxc,36v,36w,36x,36y,36z,370,371,372,373,1f,1g,1h,1j,1k,1l,1m,1n,1o,1p,1q,1r,24,25,26,27,3s4g,3s4h,3s4i,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,3s4r,3s4s,3s4t,3s4u,3s4v,8n,8o,8p,8q,8r,8s,8t,8u,8v,96,98,99,9a,9b,3sbk,3sbl,3sbm,3sbn,3sbo,3sbp,3sbq,3sbr,3sbs,3sbt,3sbu,3sbv,3sbw,3sbx,3sby,3sbz,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,g9,gb,gc,gd,ge,gf,3sio,3sip,3siq,39k3,39k4,39k5,39k6,39k7,3siw,3six,3siy,3siz,3sj0,39kd,39ke,39kf,mp,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n3,n7,na,nc,ng,nh,ni,nj,nw,3sps,3spt,3spu,3spv,3spw,3spx,3spy,3spz,3sq0,3sq1,3sq2,3sq3,3sq4,3sq5,3sq6,3sq7,ts,tt,tu,tv,tw,tx,ty,tz,u0,u1,u2,u3,u4,u5,u6,u7,ug,uh,ui,uj,uk,ul,um,un,3sww,3swx,3swy,3swz,3sx0,3sx1,3sx2,3sx3,3sx4,3sx5,3sx6,3sx7,3sx8,3sx9,3sxa,3sxb,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11a,11b,11c,11d,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,4dc,4dd,180,181,198,4li,4lj,4lk,4ll,4lm,4ln,4lo,4lp,1g4,1g6,1g7,1g8,1g9,1ga,1gb,1gc,1gd,4sj,4sk,4sl,4sm,4sn,4so,4sp,4sq,4sr,4ss,4st,4su,4sv,1n6,1n7,1n8,1n9,1na,1nb,1nc,1nd,1ne,1nf,1ng,1nh,1ni,1nj,4zl,4zm,4zn,4zo,4zp,4zq,4zr,4zs,1u9,1ua,1ub,1uc,1ud,1ue,1uf,1ug;-2,4,2,j,m,36o,36p,3rxe,3rxf,3rxg,3rxh,3rxi,1c,1d,1e,1f,1g,1h,1i,1j,1k,1l,1m,1n,1o,1p,1q,1r,1s,1t,1u,1v,1w,1x,1y,1z,20,21,22,23,24,25,26,27,28,29,2a,2b,2c,2d,2e,2f,2g,2h,2i,2j,2k,2l,2m,2n,2r,2s,2t,2u,2v,2w,2x,2y,2z,30,31,32,33,37,39,3a,3b,3c,3d,3e,3f,3g,3h,3i,3j,3q,3r,3s,3t,3u,3v,3w,3x,3y,3z,46,4c,4d,4e,4f,4m,50,51,52,53,54,5g,5h,5i,5j,5k,5x,5y,5z,6d,6e,6f,7l,7n,7q,7r,3s4g,3s4h,3s4i,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,3s4r,3s4s,3s4t,3s4u,3s4v,8g,8h,8i,8j,8k,8l,8m,8n,8o,8p,8q,8r,8s,8t,8u,8v,8w,8x,8y,8z,90,91,92,93,94,95,96,97,98,99,9a,9b,9c,9d,9e,9f,9g,9h,9i,9j,9k,9l,9m,9n,9o,9p,9q,9r,9v,9w,9x,9y,9z,a0,a1,a2,a3,a4,a5,a6,a7,ae,af,ag,ah,ai,aj,ak,al,am,an,au,ax,ay,az,b0,b1,b2,b3,bg,bh,bi,bj,bw,bx,c4,c5,c6,c7,c8,ck,cl,cm,cn,co,d1,d2,d3,di,3sb5,er,es,ev,3sbk,3sbl,3sbm,3sbn,3sbo,3sbp,3sbq,3sbr,3sbs,3sbt,3sbu,3sbv,3sbw,3sbx,3sby,3sbz,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,g0,g1,g2,g3,g4,g5,g6,g7,g8,g9,ga,gb,gc,gd,ge,gf,gg,gh,gi,gj,gk,gl,gm,gn,go,gp,gq,gr,gs,gt,gu,gv,h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,ha,hb,hg,hj,hk,hl,hm,hn,ho,hp,hq,hr,i1,i2,i3,i4,i5,i6,i7,il,im,in,j8,j9,ja,jb,jc,jp,jq,jr,39jl,lv,lw,lz,m0,m1,m2,m3,39k0,39k1,3siq,3sir,3sis,3sit,3siu,3siv,3siw,3six,3siy,3siz,39kc,39kd,39ke,39kf,mo,mp,mq,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,na,nb,nc,nd,ne,nf,ng,nh,ni,nj,nl,nm,nn,no,np,nq,nr,ns,nt,nu,nv,nw,nx,ny,nz,o2,o3,o4,o5,o6,o7,o8,o9,oa,ob,oc,od,oe,of,on,oo,op,oq,or,os,ot,ou,ov,p6,p7,p8,p9,pa,pb,sx,sz,t0,t2,t3,t4,t5,t6,t7,3sps,3spt,3spu,3spv,3spw,3spx,3spy,3spz,3sq0,3sq1,3sq2,3sq3,3sq4,3sq5,3sq6,3sq7,ts,tt,tu,tv,tw,tx,ty,tz,u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,ua,ub,uc,ud,ue,uf,ug,uh,ui,uj,uk,ul,um,un,uq,ur,us,ut,uu,uv,uw,ux,uy,uz,v0,v1,v2,v3,v9,va,vb,vc,vd,ve,vf,vg,vh,vi,vj,vs,vt,vu,vv,vw,vx,vy,vz,wb,wc,wd,we,wf,ws,wt,101,107,108,109,10a,10b,3sww,3swx,3swy,3swz,3sx0,3sx1,3sx2,3sx3,3sx4,3sx5,3sx6,3sx7,3sx8,3sx9,3sxa,3sxb,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11a,11b,11c,11d,11e,11f,11g,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11t,11u,11v,11w,11x,11y,11z,120,121,122,123,124,125,126,127,12a,12c,12d,12e,12f,12g,12h,12i,12j,12k,12l,12m,12n,12t,12w,12x,12y,12z,130,131,132,133,13g,13h,177,3t3r,3t3s,3t3t,3t3u,3t3v,3t42,3t43,3t44,3t45,3t46,3t47,3t48,3a5l,3t4a,3t4b,182,183,184,185,186,187,188,189,18a,18b,18i,18j,18k,18l,18m,18n,18o,18p,18q,18r,18s,18t,18u,18v,18y,18z,190,191,192,193,194,195,196,197,198,199,19a,19b,19g,19i,19j,19k,19l,19m,19n,19o,19p,19q,19r,1a1,1a2,1a3,1a4,1a5,1a6,1a7,1ef,3taw,3taz,3tb7,3tb8,3tb9,4km,3tbb,3tbc,3acp,3tbe,3tbf,1f7,1f8,1f9,1fa,1fb,1fc,1fd,1fe,1ff,4lb,4ld,4le,1fn,1fo,1fp,1fq,1fr,1fs,1ft,1fu,1fv,1fw,1fx,1fy,1fz,1g0,1g1,1g2,1g3,1g4,1g5,1g6,1g7,1g8,1g9,1ga,1gb,1gc,1gd,1ge,1gf,1gm,1gn,1go,1gp,1gq,1gr,1gs,1gt,1gu,1gv,1h5,1h7,1h8,1h9,1ha,1ho,1it,1iu,1iv,1iw,1ix,1j9,1ja,1jb,1jc,1jd,3ti0,3ti3,3tib,3tic,3tid,7xi,3tif,3tig,3ajt,3tii,3tij,1mb,1mc,1md,abee,1mf,1mg,1mh,1mi,1mj,4sc,4sd,4se,4sf,4sg,4sh,4si,1mr,1ms,1mt,nra,1mv,1mw,1mx,1my,1mz,1n0,1n1,1n2,1n3,1n4,1n5,1n6,1n7,1n8,1n9,1na,1nb,1nc,1nd,1ne,1nf,1ng,1nh,1ni,1nj,1nq,1nr,1ns,1nt,1nu,1nv,1nw,1nx,1ny,1nz,1o6,1o7,1px,1py,1pz,1q0,1q1,1qd,1qe,1qf,1qg,1qh,1qv,1rb,3tp7,3tpf,3tpg,3tph,4yu,3tpj,3tpk,3aqx,3tpm,3tpn,1tf,1tg,1th,1ti,1tj,1tk,1tl,1tm,1tn,4zg,4zh,4zi,4zj,1tv,1tw,1tx,1ty,1tz,1u0,1u1,1u2,1u3,1u4,1u5,1u6,1u7,1ub,1uc,1ud,1ue,1uf,1ug,1uh,1ui,1uj,1uk,1ul,1um,1un,1us,1uu,1uv,1uw,1ux,1uy,1uz,1v0,1v1,1v2,1v3,1vb,1vc,1vf,1vj,1vr,1w7,1wn,1x1,1x2,1x3,1x4,1x5,1xh,1xi,1xj,1xk,1xl,1xy,1xz,1y0,1ye,1yf,1yg,3twb,3twj,3twk,3twl,3twn,3two,3ay1,3twq,3twr,20j,20k,20l,absm,20n,20o,20p,20q,20r,56k,56l,56m,56n,20z,210,211,o5i,213,214,215,216,217,218,219,21a,21b,21f,21g,21h,21i,21j,21k,21l,21m,21n,21o,21p,21q,21r,21y,21z,220,221,222,223,227,245,246,247,248,249,24l,24m,24n,24o,24p,253,25j,3u3n,3u3o,3u3p,5d2,3u3r,3u3s,3u3t,3u3u,3u3v,27n,27o,27p,27q,27r,27s,27t,27u,27v,5do,5dp,5dq,5dr,283,284,285,286,287,288,289,28a,28b,28c,28d,28e,28f,28j,28k,28l,28m,28n,28o,28p,28q,28r,28s,28t,28u,28v,299,29a,2b9,2ba,2bb,2bc,2bd,2bp,2bq,2br,2bs,3uar,3uas,3uat,3uav,3uaw,3uax,3uay,3uaz,2er,2es,2et,ghfa,2ev,2ew,2ex,2ey,2ez,5ks,5kt,5ku,5kv,2f7,2f8,2f9,ojq,2fb,2fc,2fd,2fe,2ff,2fg,2fh,2fi,2fj,2fn,2fo,2fp,2fq,2fr,2fs,2ft,2fu,2fv,2fw,2fx,2g7,2g8,2gd,3uhv,3uhw,3uhx,5ra,3uhz,3ui0,3ui1,3ui2,3ui3,2lv,2lw,2lx,2ly,2lz,2m0,2m1,2m2,2m3,5rw,5rx,5ry,5rz,2mb,2mc,2md,2me,2mf,2mg,2mh,2mi,2mj,2mk,2ml,2mm,2mn,2mr,2ms,2mt,2mu,2mv,2mw,2mx,2my,2n9,3uoz,3up0,3up1,3up3,3up4,3up5,3up6,3up7,2sz,2t0,2t1,i912,2t3,2t4,2t5,2t6,2t7,5z0,5z1,5z2,5z3,2tf,2tg,2th,oxy,2tj,2tk,2tl,2tm,2tn,2to,2tp,2tq,2tr,2tv,2tw,2tx,2ty,2tz,2u0,2uc,3uw3,3uw4,3uw5,65i,3uw7,3uw8,3uw9,3uwa,3uwb,303,304,305,306,307,308,309,30a,30b,664,665,30j,30k,30l,30m,30n,30o,30p,30q,30r,30s,30t,30z,310,311,312,313;-2,4,3,9ih,9ii,9ij,9ik,9il,9im,9in,1c,1d,1e,1f,1g,1h,1i,1j,1k,1s,1t,1u,1v,1w,1x,1y,1z,20,28,29,2a,2b,2c,2d,2e,2f,2g,2h,2i,2o,2p,2q,2r,2s,2t,2u,2v,2w,2x,2y,2z,30,31,32,33,34,35,36,37,38,39,3a,3b,3c,3d,3e,3f,3g,3h,3i,3j,3k,3l,3m,3n,3o,3p,3q,3r,3s,3t,3u,3v,3w,3x,3y,3z,40,41,42,43,44,45,46,47,48,49,4a,4b,4c,4d,4h,4i,4l,4r,7r,7s,3s4g,3s4h,3s4i,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,3s4r,3s4s,3s4t,3s4u,3s4v,8g,8h,8i,8j,8k,8l,8w,8x,8y,8z,90,91,9c,9d,9e,9f,9g,9h,9s,9t,9u,9v,9w,9x,9y,9z,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf,bg,bh,bk,bm,bo,bu,bv,3sbk,3sbl,3sbm,3sbn,3sbo,3sbp,3sbq,3sbr,3sbs,3sbt,3sbu,3sbv,3sbw,3sbx,3sby,3sbz,fk,fl,fm,fn,fo,g0,g1,g2,g3,gg,gh,gi,gj,gu,gv,gw,gx,gy,gz,h5,h6,h7,h8,h9,ha,hb,hc,hd,he,hf,hj,hk,hl,hm,hn,ho,hp,hq,hr,hs,ht,hu,hv,hw,hx,hy,hz,i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,ic,id,ie,if,ig,ih,ii,ij,ik,il,iu,39k0,3sip,3siq,3sir,3sis,3sit,3siu,39k7,39k8,39k9,39ka,39kb,3sj0,3sj1,3sj2,3sj3,mo,mp,mq,mr,n2,n3,n4,n5,n6,ni,nj,nk,nl,nm,nw,nx,ny,nz,o0,o1,o2,o9,oa,ob,oc,od,oe,of,og,oh,oi,oo,op,oq,or,os,ot,ou,ov,ow,ox,oy,oz,p3,p4,p5,p6,p7,p8,p9,pa,pb,pk,pl,pm,pn,po,pp,pr,q1,q2,q4,3sps,3spt,3spu,3spv,3spw,3spx,3spy,3spz,3sq0,3sq1,3sq2,3sq3,3sq4,3sq5,3sq6,3sq7,ts,tt,tu,tv,u4,u5,u6,u7,u8,u9,ua,uk,ul,um,un,uo,up,uq,uy,uz,v0,v1,v2,v3,v4,v5,v6,vd,ve,vf,vg,vh,vi,vj,vk,vl,vm,vs,vt,vu,vv,vw,vx,vy,vz,w0,w1,w2,w3,w7,w8,w9,wa,wb,wc,wd,we,wf,wg,wj,wn,wu,3sww,3swx,3swy,3swz,3sx0,3sx1,3sx2,3sx3,3sx4,3sx5,3sx6,3sx7,3sx8,3sx9,3sxa,3sxb,10w,10x,10y,10z,115,116,117,118,119,11a,11b,11c,11d,11e,11l,11m,11n,11o,11p,11q,11r,11s,11t,11u,121,122,123,124,125,126,127,128,129,12a,12g,12h,12i,12j,12k,12l,12m,12n,12o,12p,12q,12w,12x,12y,12z,130,131,132,133,136,13b,13c,13d,13e,13f,13g,13h,13i,13j,13r,13t,18g,18h,18i,18j,18n,18o,18p,18q,18r,18s,18t,18u,18v,18w,18x,18y,18z,193,194,195,196,197,198,199,19a,19b,19c,19d,19e,19f,19j,19k,19l,19m,19n,19o,19p,19q,19r,19s,19t,19u,19v,19z,1a0,1a1,1a2,1a3,1a4,1a5,1a6,1a7,1a9,1ai,1aj,1ak,1al,1am,4kw,4kx,4ky,4kz,1fk,1fl,1fm,1fn,1fo,1fp,1fq,1fr,1fs,1ft,1fu,1fv,1fw,1fx,1fy,1fz,1g0,1g1,1g2,1g3,1g4,1g5,1g6,1g7,1g8,1g9,1ga,1gb,1gc,1gd,1ge,1gf,1gg,1gh,1gi,1gj,1gk,1gl,1gm,1gn,1go,1gp,1gq,1gr,1gs,1gt,1gu,1gv,1gx,1h0,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9,1ha,1hb,1hh,1hk,1hn,1hp,4s0,4s1,4s2,4s3,4s4,4s5,4s6,4s7,1mo,1mp,1mq,1mr,1ms,1mt,1mu,1mv,1mw,1mx,1my,1mz,1n0,1n1,1n2,1n3,1n4,1n5,1n6,1n7,1n8,1n9,1na,1nb,1nc,1nd,1ne,1nf,1ng,1nh,1ni,1nj,1nk,1nl,1nm,1nn,1no,1np,1nq,1nr,1ns,1nt,1nu,1nv,1nw,1nx,1ny,1nz,1o8,1o9,1oa,1ob,1oc,1od,1oe,1of,1p3,1p4,1p5,1p6,1p7,1pk,1pl,1pm,1pn,4z4,4z5,4z6,4z7,4z8,4z9,4za,4zb,4zc,4zd,4ze,4zf,4zg,4zh,4zi,4zj,1ts,1tt,1tu,1tv,1tw,1tx,1ty,1tz,1u0,1u1,1u2,1u3,1u4,1u5,1u6,1u7,1u8,1u9,1ua,1ub,1uc,1ud,1ue,1uf,1ug,1uh,1ui,1uj,1uk,1ul,1um,1un,1us,1ut,1uu,1uv,1uw,1ux,1uy,1uz,1v0,1v1,1v2,1v3,1vh,1w7,1w8,1w9,1wa,1wb,1wn,1wo,1wp,1wq,1wr,1x4,1x5,1xl,568,569,56a,56b,56c,56d,56e,56f,56g,56h,56i,56j,56k,56l,56m,56n,20w,20x,20y,20z,210,211,212,213,214,215,216,217,218,219,21a,21b,21c,21d,21e,21f,21g,21h,21i,21j,21k,21l,21m,21n,21o,21p,21q,21r,220,221,222,223,224,225,226,227,22g,22h,22l,22x,23b,23c,23d,23e,23f,23r,23s,23t,23u,23v,248,249,24a,24o,24p,24q,5dc,5dd,5de,5df,5dg,5dh,5di,5dj,5dk,5dl,5dm,5dn,5do,5dp,5dq,5dr,280,281,282,283,284,285,286,287,288,289,28a,28b,28c,28d,28e,28f,28g,28k,28l,28m,28n,28o,28p,28q,28r,28s,28t,28u,28v,293,297,298,299,29a,29b,29q,2af,2ag,2ah,2ai,2aj,2av,2aw,2ax,2ay,2az,2bd,2be,2bt,5kg,5kh,5ki,5kj,5kk,5kl,5km,5kn,5ko,5kp,5kq,5kr,5ks,5kt,5ku,5kv,2f4,2f5,2f6,2f7,2f8,2f9,2fa,2fb,2fc,2fd,2fe,2ff,2fg,2fh,2fi,2fj,2fq,2fr,2fs,2ft,2fu,2fv,2fw,2fx,2fy,2fz,2g7,2ga,2gd,2gf,2hk,2hl,2hm,2i0,2i1,2i2,2i3,5rk,5rl,5rm,5rn,5ro,5rp,5rq,5rr,5rs,5rt,5ru,5rv,5rw,5rx,5ry,5rz,2m8,2m9,2ma,2mb,2mc,2md,2me,2mf,2mg,2mh,2mi,2mj,2mk,2ml,2mm,2mn,2mv,2mx,2my,2mz,2n0,2n1,2n2,2n3,2nh,2ni,5yu,5yv,5yw,5yx,5yy,5yz,5z0,5z1,5z2,5z3,2ti,2tj,2tk,2tl,2tm,2tn,2to,2tp,2tq,2tr,2tz,2u3,2u4,2u5,2u6,2u7,65z,660,661,662,663,664,665,666,667,30g,30m,30n,30o,30p,30q,30r,30s,30t,30u,30v;-2,4,4,k,l,3rx6,3rx7,9i8,9i9,9ia,9ib,9ic,9id,9ie,9if,3rxm,3rxn,3rxo,3rxp,3rxq,3rxr,9is,9it,9iu,9iv,1m,1n,1o,1p,1q,1r,pc4,pc5,pc6,pc7,22,23,24,25,384,385,386,2l,2o,2p,2q,2r,2s,2t,2u,34,35,36,37,3a,3k,7q,3s4g,3s4h,3s4i,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,3s4r,3s4s,3s4t,3s4u,3s4v,8k,8l,8m,8n,8o,8p,8q,8r,8s,8t,8u,8v,90,91,92,93,94,95,96,97,98,9d,9e,9f,9g,9h,9i,9j,9k,9l,9m,9s,9t,9u,9v,9w,9x,9y,a8,a9,aa,ab,ae,ao,b4,eu,3sbk,3sbl,3sbm,3sbn,3sbo,3sbp,3sbq,3sbr,3sbs,3sbt,3sbu,3sbv,3sbw,3sbx,3sby,3sbz,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,g1,g2,g3,g4,g5,g6,g7,g8,g9,ga,gb,gf,gg,gh,gi,gj,gk,gl,gm,gn,go,gw,gx,gy,gz,h0,h1,h2,hc,hd,he,hf,hh,hs,ht,ly,3sio,39k1,39k2,39k3,39k4,39k5,3siu,3siv,3siw,3six,3siy,39kb,39kc,39kd,39ke,39kf,mo,mp,mq,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n4,n5,n6,n7,n8,n9,na,nb,nc,nd,ne,nf,nh,nk,nl,nm,nn,no,np,nq,nr,ns,o0,o1,o2,o3,o4,o5,o6,og,oh,oi,oj,ok,ow,ox,t2,3spn,3sps,3spt,3spu,3spv,3spw,3spx,3spy,3spz,3sq0,3sq1,3sq2,3sq3,3sq4,3sq5,3sq6,3sq7,ts,tt,tu,tv,tw,tx,ty,tz,u0,u1,u2,u3,u4,u5,u8,u9,ua,ub,uc,ud,ue,uf,ug,uh,ui,ul,uo,up,uq,ur,us,ut,uu,uv,uw,ux,v4,v5,v6,v7,v8,v9,va,vk,vl,vm,vn,w0,wg,xg,xh,xi,xj,xw,xx,xy,3swb,106,3swr,3sww,3swx,3swy,3swz,3sx0,3sx1,3sx2,3sx3,3sx4,3sx5,3sx6,3sx7,3sx8,3sx9,3sxa,3sxb,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11b,11c,11d,11e,11f,11g,11h,11i,11j,11k,11l,11m,11s,11t,11u,11v,11w,11x,11y,11z,120,128,129,12a,12b,12c,12d,12e,12o,12p,12q,12r,134,136,14j,14k,14l,14m,14n,14z,150,151,152,153,15g,15h,15i,15x,17m,4dw,18g,18h,18i,18j,18k,4ed,4ee,4ef,18w,18x,18y,18z,190,191,192,193,19c,19d,19e,19f,19g,19h,19i,19s,19t,19u,19v,19x,1a8,1ad,1at,1b9,1bn,1bo,1bp,1bq,1br,1c3,1c4,1c5,1c6,1c7,1ck,1cl,1cm,1d0,1d1,1d2,4kz,1fk,1fl,1fm,1fn,4lg,4lh,4li,1g0,1g1,1g2,1g3,1g4,1g5,1g6,1gg,1gh,1gi,1gj,1gk,1gl,1gn,1gw,1gx,1gy,1hd,1ir,1is,1it,1iu,1iv,1j7,1j8,1j9,1ja,1jb,1jp,1jq,1k5,4s2,1mo,1mp,1mq,4sj,4sk,4sl,4sm,4sn,4so,1n4,1n5,1n6,1n7,1n8,1n9,1na,1nb,1nc,1nk,1nl,1nm,1nn,1no,1np,1o0,1o1,1pv,1pw,1px,1py,1pz,1qc,1qd,1qe,1qf,4z4,4z5,4z6,4z7,4z8,4z9,4za,4zb,4zc,1ts,1tt,1tu,1tv,1tw,1tx,1ty,1tz,1u0,1u8,1u9,1ua,1ub,1uc,1ud,1ue,1uf,1ug,1uo,1up,1uq,1ur,1us,1ut,1v6,1v8,568,569,56a,56b,56c,56d,20w,20x,20y,20z,210,211,56u,56v,56w,21c,21d,21e,21f,21g,21h,21i,21j,21k,21s,21t,21u,21v,21w,21z,5dc,5dd,5de,5dg,280,281,282,5dv,284,5dx,5dy,5dz,5e0,28g,28h,28i,28j,28k,28l,28m,28n,28o,28x,5kg,5kh,5ki,5kj,5kk,5kl,5km,5kn,2f4,2f5,2f6,2f7,2f8,2f9,2fa,2fb,5l4,2fk,2fl,2fm,2fn,2fo,2fp,2fq,2fr,2fs,2g2,5rk,5rl,5rm,5rn,5ro,5rp,5rq,5rr,5rs,2m8,2m9,2ma,2mb,2mc,2md,2me,2mf,2mg,2mo,2mp,2mq,2mr,2ms,2mt,2mu,2mv,2mw,2n7,5yo,5yp,5yq,5yr,5ys,5yt,5yu,5yv,5yw,5yx,2tc,2td,2te,2tf,2tg,2th,2ti,2tj,2tk,2tl,2ty,65s,65t,65u,65v,65w,65x,65y,65z,660,661,30g,30h,30i,30j,30k,30l,30m,30n,30o,30p;-2,0,5,m,12,7q,86,eu,fa,ly,me,t2,ti,106,10m,17a,17q,1c3,1ee,1eu,1j7,1j8,1li,1ly,1qb,1qc,1sm,1t2,1zq,206,26u,27a,2dy,2ee,2l2,2li,2s6,2sm,2t2,2ti,2ty,2ue,2uu,2va,2vq,2w6,2wm,2x2,2xi,2xy,2ye,2za,2zq;-2,1,5,2rq,2s6,2sm,2t2,2ti,2ty,2ue,2uu,2va,2vq,2w6,2wm,2x2,2xi,2xy,2ye;-2,2,5,2rq,2s6,2sm,2t2,2ti,2ty,2ue,2uu,2va,2vq,2w6,2wm,2x2,2xi,2xy,2ye;-2,3,5,2py,2qd,2qe,2qt,2qu,2r9,2rq,2s6,2sm,2t2,2ti,2ty,2ue,2uu,2va,2vq,2w6,2wm,2x2,639,2xi,2xx,2xy,2yd,2ye,6at,5050,35h,6ba;-2,4,5,36j,36k,36l,36m,3rxc,3rxd,3rxe,3rxf,3rxg,3rxh,3rxi,3rxj,3rxk,3rxl,3rxm,17,18,19,1a,1c,3rxt,3rxu,3rxv,3rxw,3rxx,3rxy,3rxz,3ry0,3ry1,3ry2,3ry3,3ry4,3ry5,3ry6,3ry7,3rya,3ryb,3ryc,3ryd,3rye,3ryf,3ryg,3ryh,3ryi,3ryj,3ryk,3ryl,3rym,3ryn,3rys,3ryt,3ryu,3ryv,3ryw,3ryx,3ryy,3ryz,3rz0,3rz1,3rz2,3rz3,3rza,3rzb,3rzc,3rzd,3rze,3rzf,3rzg,3rzh,3rzi,3rzj,3rzt,3rzu,3rzv,3rzw,3rzx,3rzy,3rzz,3s0b,3s0c,3s0d,3s0e,3s0f,3s0t,3s0u,3s0v,3s1b,6jj,3s4g,3s4h,3s4i,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,3s4r,3s4s,3s4t,3s4u,3s4v,8g,8h,8o,9x,9y,9z,a0,a1,a4,a5,a6,a7,ad,ae,af,ag,ak,al,am,an,b1,b2,bi,6qn,3sbk,3sbl,3sbm,3sbn,3sbo,3sbp,3sbq,3sbr,3sbs,3sbt,3sbu,3sbv,3sbw,3sbx,3sby,3sbz,fp,fu,fv,fy,ge,gu,h1,h2,h3,h4,h5,h8,h9,ha,hb,hh,hi,hj,hk,hl,ho,hp,hq,hr,hy,hz,i5,i6,i7,if,il,im,in,6xr,3sio,3sip,3siq,3sir,3sis,3sit,39k6,39k7,39k8,39k9,39ka,39kb,3sj0,3sj1,3sj2,3sj3,mv,nb,nr,o5,o6,o7,o8,o9,oc,od,oe,of,ol,om,on,oo,op,os,ot,ou,ov,p2,p3,p4,pa,pi,pj,pk,pq,74i,74j,74k,74l,74m,74v,3sps,3spt,3spu,3spv,3spw,3spx,3spy,3spz,3sq0,3sq1,3sq2,3sq3,3sq4,3sq5,3sq6,3sq7,v9,va,vb,vc,vd,vg,vh,vi,vj,vp,vq,vr,vs,vt,vw,vx,vy,vz,w6,w7,wn,7bl,7bm,7bn,7bo,7bp,7bq,7br,7bs,7bz,3sww,3swx,3swy,3swz,3sx0,3sx1,3sx2,3sx3,3sx4,3sx5,3sx6,3sx7,3sx8,3sx9,3sxa,3sxb,11t,11u,11v,11w,11x,12c,12d,12e,12f,12g,12h,12t,12u,12v,12w,12x,7ji,4e6,7jz,4en,7q7,7qm,7qn,4la,7r3,4lr,7xb,7xq,7xr,4se,7y7,4sv,84d,84f,4z1,84u,84v,4zi,85b,4zz,8bh,565,8by,8bz,56m,8cf,573,8il,5d9,8j2,8j3,5dq,8jj,5e7,8pp,5kd,8q6,5ku,5lb,8wt,8wu,5rh,8xa,5ry,5sf,2rp,2rq,93x,93y,5yl,94e,5z2,5zj,2yt,2yu,9b1,65p,666,66n;-2,4,6,6c6,3rxi,3rxj,3rxk,3rxl,4e22,3rxs,3rxt,3rxu,3rxv,3rxw,3rxx,3rxy,3rxz,3ry0,4e2h,4e2i,4e2j,4e2k,4e2l,4e2m,4e2n,3ry8,3ry9,3rya,3ryb,3ryc,3ryd,3rye,3ryf,3ryg,4e2x,4e2y,4e2z,4e30,4e31,4e32,4e33,3ryo,3ryp,3ryq,3ryr,3rys,3ryt,3ryu,3ryv,3ryw,4e3d,4e3e,4e3f,4e3g,4e3h,4e3i,4e3j,3rz4,3rz5,3rz6,3rz7,3rz8,3rz9,3rza,3rzb,3rzc,4e3t,4e3u,4e3v,4e3w,4e3x,4e3y,4e3z,3rzk,3rzl,3rzm,3rzn,3rzo,3rzp,3rzq,3rzr,3rzs,3s00,3s01,3s02,3s03,3s04,3s05,3s06,3s07,3s08,3s0g,3s0h,3s0i,3s0j,3s0k,3s0l,3s0m,3s0n,3s0o,3s0w,3s0x,3s0y,3s0z,3s10,3s11,3s12,3s13,3s14,3s1d,3s1e,3s1f,3s1g,3s1h,3s1i,3s1j,3s1k,3s1v,3s1w,3s1x,3s1y,3s1z,3s20,3s2d,3s2e,3s2f,3s2g,3s2h,3s2i,3d5,6j4,6j5,6j6,6j7,6j8,6j9,6ja,6jb,7t,3s4g,3s4h,3s4i,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,3s4r,3s4s,3s4t,3s4u,3s4v,8s,8t,8u,8v,98,9a,9s,a8,6lw,4eb9,4eba,4ebb,4ebc,4ebd,4ebe,4ebf,4ebg,4ebh,4ebi,4ebj,6mc,6ms,3hg,3hx,3ie,3iv,3s9k,3s9l,3s9m,3iz,3j0,3j1,3j2,3j3,3k9,6q8,6q9,6qa,6qb,6qc,6qd,6qe,6qf,ex,3sbk,3sbl,3sbm,3sbn,3sbo,3sbp,3sbq,3sbr,3sbs,3sbt,3sbu,3sbv,3sbw,3sbx,3sby,3sbz,fw,fx,fy,fz,gd,gf,gw,hc,6tg,4eit,4eiu,4eiv,4eiw,4eix,4eiy,4eiz,4ej0,4ej1,4ej2,4ej3,6tw,3ok,3p1,3pi,3pz,3sgo,3sgp,3sgq,3q3,3q4,3q5,3q6,3q7,3rd,6xc,6xd,6xe,6xf,6xg,6xh,6xi,6xj,3sig,m1,3sio,3sip,39k2,39k3,39k4,39k5,39k6,39k7,3siw,3six,3siy,3siz,3sj0,39kd,39ke,39kf,mz,n0,n1,n2,n3,o0,og,710,4eqd,4eqe,4eqf,4eqg,4eqh,4eqi,4eqj,4eqk,4eql,4eqm,4eqn,3vo,3w5,3wm,3x3,3sns,3snt,3snu,3x7,3x8,3x9,3xa,3xb,3yh,74g,74h,74i,74j,74k,74l,74m,74n,74o,t5,3sps,3spt,3spu,3spv,3spw,3spx,3spy,3spz,3sq0,3sq1,3sq2,3sq3,3sq4,3sq5,3sq6,3sq7,u4,u5,u6,u7,un,vk,77o,4ex1,4ex2,4ex3,4ex4,4ex5,4ex6,4ex7,4ex8,4ex9,4exa,4exb,784,42s,439,43q,447,3suw,3sux,3suy,44b,44c,44d,44e,44f,45l,7bk,7bl,7bm,7bn,7bo,7bp,7bq,7br,7bs,109,3sww,3swx,3swy,3swz,3sx0,3sx1,3sx2,3sx3,3sx4,3sx5,3sx6,3sx7,3sx8,3sx9,3sxa,3sxb,118,119,11a,11b,11q,7ec,4f3p,4f3q,4f3r,4f3s,4f3t,4f3u,4f3v,4f3w,4f3x,4f3y,4f3z,7es,7f8,49w,4ad,4au,4bb,3t20,3t21,3t22,4bf,4bg,4bh,4bi,4bj,7io,7ip,7iq,7ir,7is,7it,7iu,7iv,7j4,7j5,7j6,7j7,7j8,7j9,7ja,7jb,7jc,7jd,7je,7jf,7jk,7jl,7jm,7jn,7jo,4f91,4f92,4f93,4f94,4f95,4f96,4f97,4f98,4f99,4f9a,4f9b,7k0,7k1,7k2,7k3,7k4,4f9h,4f9i,4f9j,4f9k,4f9l,4f9m,4f9n,4f9o,4f9p,4f9q,4f9r,4eo,7kh,7ki,7kj,7kk,4f9x,4f9y,4f9z,4fa0,4fa1,4fa2,4fa3,4fa4,4fa5,4fa6,4fa7,4f5,7ky,7kz,7l0,4fad,4fae,4faf,4fag,4fah,4fai,4faj,4fak,4fal,4fam,4fan,4fm,7lf,7lg,4fat,4fau,4fav,4faw,4fax,4fay,4faz,4fb0,4fb1,4fb2,4fb3,4g3,7lw,7mc,4h0,4hh,4hy,4if,3t94,3t95,3t96,4ij,4ik,4il,4im,4in,4ls,4m9,4mq,4n7,7tg,4fj1,4o4,4fjh,4ol,4fju,4fjx,4p2,4fka,4pj,3tg8,3tg9,3tga,4pn,4po,4pp,4pq,4pr,4sw,4td,4tu,4ub,80k,4v8,4vp,4fr1,4w6,4frh,4wn,3tnc,3tnd,3tne,4wr,4ws,4wt,4wu,4wv,840,4yo,500,4fv5,4fv6,50h,50y,51f,87o,52c,52t,53a,3tu1,4fyi,4fyl,53r,3tug,3tuh,3tui,53v,53w,53x,53y,53z,574,57l,582,58j,8es,59g,4g4l,59x,5ae,3u15,5av,3u1k,3u1l,3u1m,5az,5b0,5b1,5b2,5b3,5e8,5ep,5f6,5fn,8lw,5gk,5h1,5hi,3u89,5hz,3u8o,3u8p,3u8q,3xej,5i4,5i5,5i6,5i7,8pz,5kn,5lc,5lt,5ma,5mr,8t0,5no,5o5,8ty,5om,3ufd,5p3,3ufs,3uft,3ufu,3xln,3xlo,5p9,5pa,5pb,5sg,5sx,5te,5tv,904,5us,5v9,912,5vq,3umh,5w7,3umw,3umx,3umy,3xsr,3xss,3xst,5we,5wf,940,5yo,5zk,601,60i,60z,978,61w,62d,62u,63b,3uu0,3uu1,3uu2,63f,3xzw,3xzx,3xzy,63j,66o,675,67m,683,9ec,690,69h,69y,6af,3v14,3v15,3v16,6aj,6ak,3y71,3y72,3y73;-2,4,7,4e28,4e29,4e2a,4e2b,4e2c,4e2d,4e2e,4e2f,4e2g,4e2h,4e2i,4e2j,4e2k,4e2l,4e2m,4e2n,4e2o,4e2p,4e2q,4e2r,4e2s,4e2t,4e2u,4e2v,4e2w,4e2x,4e2y,4e2z,4e30,4e31,4e32,4e33,4e34,4e35,4e36,4e37,4e38,4e39,4e3a,4e3b,4e3c,4e3d,4e3e,4e3f,4e3g,4e3h,4e3i,4e3j,4e3k,4e3l,4e3m,4e3n,4e3o,4e3p,4e3q,4e3r,4e3s,4e3t,4e3u,4e3v,4e3w,4e3x,4e3y,4e3z,4e4a,4e4b,4e4c,3s4g,3s4h,3s4i,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,3s4r,3s4s,3s4t,3s4u,3s4v,8g,8h,8i,8j,8k,8l,8m,8n,8o,8p,8q,8r,8s,8t,8u,8v,8x,8y,8z,90,91,92,93,94,95,96,97,98,99,9a,9b,9j,9k,9l,9m,9n,9o,9p,9q,9r,4eb4,4eb5,4eb6,4eb7,4eb8,4eb9,4eba,4ebb,4ebc,4ebd,4ebe,4ebf,4ebg,4ebh,4ebi,4ebj,3io,3ip,3iq,3ir,3is,3it,3iu,3iv,3iw,3ix,3iy,3iz,3j0,3j1,3j2,3j3,3sbk,3sbl,3sbm,3sbn,3sbo,3sbp,3sbq,3sbr,3sbs,3sbt,3sbu,3sbv,3sbw,3sbx,3sby,3sbz,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,g1,g2,g3,g4,g5,g6,g7,g8,g9,ga,gb,gc,gd,ge,gf,gj,gn,go,gp,gq,gr,gs,gt,gu,gv,h6,h7,4eio,4eip,4eiq,4eir,4eis,4eit,4eiu,4eiv,4eiw,4eix,4eiy,4eiz,4ej0,4ej1,4ej2,4ej3,3ps,3pt,3pu,3pv,3pw,3px,3py,3pz,3q0,3q1,3q2,3q3,3q4,3q5,3q6,3q7,39k0,39k1,3siq,3sir,3sis,3sit,3siu,39k7,39k8,39k9,39ka,39kb,3sj0,3sj1,3sj2,3sj3,mo,mp,mq,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n3,n5,n6,n7,n8,n9,na,nb,nc,nd,ne,nf,ng,nh,ni,nj,nl,ns,nt,nu,nv,nw,nx,ny,nz,oc,oe,of,4eq8,4eq9,4eqa,4eqb,4eqc,4eqd,4eqe,4eqf,4eqg,4eqh,4eqi,4eqj,4eqk,4eql,4eqm,4eqn,3ww,3wx,3wy,3wz,3x0,3x1,3x2,3x3,3x4,3x5,3x6,3x7,3x8,3x9,3xa,3xb,3sps,3spt,3spu,3spv,3spw,3spx,3spy,3spz,3sq0,3sq1,3sq2,3sq3,3sq4,3sq5,3sq6,3sq7,ts,tt,tu,tv,tw,tx,ty,tz,u0,u1,u2,u3,u4,u5,u6,u7,u9,ua,ub,uc,ud,ue,uf,ug,uh,ui,uj,uk,ul,um,un,uu,ux,uy,uz,v0,v1,v2,v3,vh,vi,vj,4eww,4ewx,4ewy,4ewz,4ex0,4ex1,4ex2,4ex3,4ex4,4ex5,4ex6,4ex7,4ex8,4ex9,4exa,4exb,440,441,442,443,444,445,446,447,448,449,44a,44b,44c,44d,44e,44f,3sww,3swx,3swy,3swz,3sx0,3sx1,3sx2,3sx3,3sx4,3sx5,3sx6,3sx7,3sx8,3sx9,3sxa,3sxb,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11a,11b,11d,11e,11f,11g,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11z,121,122,123,124,125,126,127,12h,12l,12m,12n,4f3k,4f3l,4f3m,4f3n,4f3o,4f3p,4f3q,4f3r,4f3s,4f3t,4f3u,4f3v,4f3w,4f3x,4f3y,4f3z,4b4,4b5,4b6,4b7,4b8,4b9,4ba,4bb,4bc,4bd,4be,4bf,4bg,4bh,4bi,4bj,175,4f8h,4f8w,4f8x,4f8y,4f8z,4f90,4f91,4f92,4f93,4f94,4f95,4f96,4f97,4f98,4f99,4f9a,4f9b,4f9c,4f9d,4f9e,4f9f,4f9g,4f9h,4f9i,4f9j,4f9k,4f9l,4f9m,4f9n,4f9o,4f9p,4f9q,4f9r,4f9s,4f9t,4f9u,4f9v,4f9w,4f9x,4f9y,4f9z,4fa0,4fa1,4fa2,4fa3,4fa4,4fa5,4fa6,4fa7,4fa8,4fa9,4faa,4fab,4fac,4fad,4fae,4faf,4fag,4fah,4fai,4faj,4fak,4fal,4fam,4fan,4fao,4fap,4faq,4far,4fas,4fat,4fau,4fav,4faw,4fax,4fay,4faz,4fb0,4fb1,4fb2,4fb3,4fbd,4i8,4i9,4ia,4ib,4ic,4id,4ie,4if,4ig,4ih,4ii,4ij,4ik,4il,4im,4in,4l5,4fgn,4fgo,1ft,4lo,1gc,4pc,4pd,4pe,e6r,e6s,e6t,e6u,e6v,e6w,e6x,e6y,e6z,e70,e71,e72,e73,2i1v,2i1w,2i1x,2i1y,2i1z,2i20,2i21,2i22,2i23,2i24,2i25,2i26,2i27,2i2b,qus,2i2d,quu,quv,2i2g,qux,quy,2i2j,qv0,qv1,2i2m,qv3,4wg,4wh,4wi,edv,edw,edx,edy,edz,ee0,ee1,ee2,ee3,ee4,ee5,ee6,ee7,2i8z,4fs9,i4tm,i4tn,i4to,i4tp,i4tq,i4tr,2i9f,53k,53l,53m,ekz,el0,el1,el2,el3,el4,el5,el6,el7,el8,el9,ela,elb,2ig3,4fz8,4fz9,4fzd,8hd6,8hd7,8hd8,8hd9,8hda,8hdb,2igj,5ao,5ap,5aq,es3,es4,es5,es6,es7,es8,es9,esa,esb,esc,esd,ese,esf,2in7,e3tw,8hk5,rg3,5hs,5ht,5hu,ez7,ez8,ez9,eza,ezb,ezc,ezd,eze,ezf,ezg,ezh,ezi,ezj,2iub,4gdg,4gdh,rn7,f59,f5a,f5b,f5p,f5q,f5r,f65,f66,f67,5ow,5ox,5oy,f6b,f6c,f6d,f6e,f6f,f6g,f6h,f6i,f6j,f6k,f6l,f6m,f6n,2j1f,2j1v,fcd,fct,fd9,5w0,5w1,5w2,fdf,fdg,fdh,fdi,fdj,fdk,fdl,fdm,fdn,fdo,fdp,fdq,fdr,2j8j,s1f,fjh,fjx,fkd,634,635,636,fkj,fkk,fkl,fkm,fkn,fko,fkp,fkq,fkr,fks,fkt,fku,fkv,2jfn,3bvq,3bvr,3bvs,3bvt,3bvu,3bvv,3bvw,3bvx,3bvy,3bvz,s8j,c3y2,c3y3,c3y4,c3y5,c3y6,c3y7,fql,fr1,frh,6a8,6a9,6aa,frn,fro,frp,frq,frr,frs,frt,fru,frv,frw,frx,fry,frz,2jmr,2jmu,2jmv,2jmw,2jmx,2jmy,2jmz,2jn0,2jn1,2jn2,2jn3,2jn7,2jna,2jnb,2jnc,2jnd,2jne,2jnf,2jng,2jnh,2jni,2jnj;-2,5,7,2hvn,qo4,2hvp,qo6,qo7,2hvs,qo9,qoa,2hvv,qoc,qod,2hvy,qof,2hw3,2hw4,2hw5,2hw6,2hw7,2hw8,2hw9,2hwa,2hwb,2hwc,2hwd,2hwe,2hwf,2hwj,2hwk,2hwl,2hwm,2hwn,2hwo,2hwp,2hwq,2hwr,2hws,2hwt,2hwu,2hwv,2hwz,2hx0,2hx1,2hx2,2hx3,2hx4,2hx5,2hx6,2hx7,2hx8,2hx9,2hxa,2hxb,2hxf,qpw,2hxh,qpy,qpz,2hxk,2hxl,2hxm,2hxn,2hxo,2hxp,2hxq,qq7,2hxv,qqc,2hxx,qqe,qqf,2hy0,2hy1,2hy2,2hy3,2hy4,2hy5,2hy6,qqn,2hyb,2hyc,2hyd,2hye,2hyf,2hyg,2hyh,2hyi,2hyj,2hyk,2hyl,2hym,2hyn,3aer,3aes,3aet,3aeu,3aev,3aew,3aex,3aey,3aez,3af0,3af1,3af2,3af3,2i2r,2i37,2i3n,e90,e91,e92,e93,e94,e95,e96,e97,e98,e99,e9a,e9b,2i43,2i49,2i4c,2i4j,2i4p,2i4s,2i4z,2i55,2i58,2i5f,eas,eat,eau,eav,eaw,eax,eay,eaz,eb0,eb1,eb2,eb3,2i5v,3alw,3amb,3amc,3amd,3ame,3amf,3amg,3amh,3ami,3amj,3amk,3aml,3amm,3amn,2i9v,2iab,2iar,eg4,eg5,eg6,eg7,eg8,eg9,ega,egb,egc,egd,ege,egf,2ib7,2ibd,2ibn,2ibt,2ic3,2ic9,2icj,ehw,ehx,ehy,ehz,ei0,ei1,ei2,ei3,ei4,ei5,ei6,ei7,2icz,3at0,2idf,3atg,3atv,3atw,3atx,3aty,3atz,3au0,3au1,3au2,3au3,3au4,3au5,3au6,3au7,r9f,2ihf,2ihv,en8,en9,ena,enb,enc,end,ene,enf,eng,enh,eni,enj,2iib,2iih,rb7,2iix,rbn,2ijd,2ijn,ep0,ep1,ep2,ep3,ep4,ep5,ep6,ep7,ep8,ep9,epa,epb,3b04,2ikj,3b0k,2ikz,3b10,3b1f,3b1g,3b1h,3b1i,3b1j,3b1k,3b1l,3b1m,3b1n,3b1o,3b1p,3b1q,3b1r,rgj,2ioj,2ioz,euc,eud,eue,euf,eug,euh,eui,euj,euk,eul,eum,eun,2ipf,2ipl,2ipo,rib,2iq1,2iq4,rir,2iqh,2iqk,2iqr,ew4,ew5,ew6,ew7,ew8,ew9,ewa,ewb,ewc,ewd,ewe,ewf,3b78,3b7o,2is3,3b84,2isj,3b8k,3b8z,3b90,3b91,3b92,3b93,3b94,3b95,3b96,3b97,3b98,3b99,3b9a,3b9b,2iv7,2ivn,2iw3,f1g,f1h,f1i,f1j,f1k,f1l,f1m,f1n,f1o,f1p,f1q,f1r,2iwj,2iwk,5rud,2iwm,2iwn,2iwo,2iwp,2iwq,2iwr,2iws,5rul,2iwu,2iwv,2iwz,2ix0,5op1,2ix2,2ix3,2ix4,2ix5,2ix6,2ix7,2ix8,5op9,2ixa,2ixb,2ixf,2ixg,2ixh,2ixi,2ixj,2ixk,2ixl,2ixm,2ixn,2ixo,2ixp,2ixq,2ixr,2ixv,f38,f39,f3a,f3b,f3c,f3d,f3e,f3f,f3g,f3h,f3i,f3j,3bec,3bes,3bf8,2izn,3bfo,2j03,3bg4,3bgj,3bgk,3bgl,3bgm,3bgn,3bgo,3bgp,3bgq,3bgr,3bgs,3bgt,3bgu,3bgv,rur,2j2r,2j37,f8k,f8l,f8m,f8n,f8o,f8p,f8q,f8r,f8s,f8t,f8u,f8v,2j3n,2j3w,rwj,2j4c,rwz,2j4s,2j4z,fac,fad,fae,faf,fag,fah,fai,faj,fak,fal,fam,fan,3blg,3blw,3bmc,3bms,2j77,3bn8,2j7n,3bno,3bo3,3bo4,3bo5,3bo6,3bo7,3bo8,3bo9,3boa,3bob,3boc,3bod,3boe,3bof,s1v,4gsq,4gsr,4gss,4gst,4gsu,4gsv,2j9v,8i6y,8i6z,8i70,8i71,8i72,8i73,2jab,ffo,ffp,ffq,ffr,ffs,fft,ffu,ffv,ffw,ffx,ffy,ffz,2jar,s3n,s43,2jbw,2jc3,fhg,fhh,fhi,fhj,fhk,fhl,fhm,fhn,fho,fhp,fhq,fhr,3bsk,3bt0,3btg,3btw,3buc,2jer,3bus,2jf7,3bv8,3bvn,3bvo,3bvp,3bvq,3bvr,3bvs,3bvt,3bvu,3bvv,3bvw,3bvx,3bvy,3bvz,2jgj,2jgm,2jgn,2jgo,2jgp,2jgq,2jgr,2jgs,2jgt,2jgu,2jgv,2jgz,2jh2,2jh3,2jh4,2jh5,2jh6,2jh7,2jh8,2jh9,2jha,2jhb,2jhf,fms,fmt,fmu,fmv,fmw,fmx,fmy,fmz,fn0,fn1,fn2,fn3,2jhv,2ji7,2jib,2jin,2jir,2jj0,2jj3,2jj7,fok,fol,fom,fon,foo,fop,foq,for,fos,fot,fou,fov,3bzo,3c04,3c0k,3c10,3c1g,3c1w,2jmb,3c2c,2jmr,3c2s,3c37,3c38,3c39,3c3a,3c3b,3c3c,3c3d,3c3e,3c3f,3c3g,3c3h,3c3i,3c3j;-2,0,8,r,17,7v,8b,8r,ez,ff,m3,mj,t7,tn,10b,10r,117,17f,17v,1ej,1ez,1ln,1m3,1sr,1t7,1zv,20b,20r,26z,27f,2e3,2ej,2l7,2ln,2sb,2sr,2t7,2zf,2zv;-2,3,8,3sog;-2,4,8,x,y,z,10,11,12,13,14,4e28,4e29,4e2a,4e2b,4e2c,4e2d,4e2e,4e2f,4e2g,4e2h,4e2i,4e2j,4e2k,4e2l,4e2m,4e2n,4e2o,4e2p,4e2q,4e2r,4e2s,4e2t,4e2u,4e2v,4e2w,4e2x,4e2y,4e2z,4e30,4e31,4e32,4e33,4e34,4e35,4e36,4e37,4e38,4e39,4e3a,4e3b,4e3c,4e3d,4e3e,4e3f,4e3g,4e3h,4e3i,4e3j,4e3k,4e3l,4e3m,4e3n,4e3o,4e3p,4e3q,4e3r,4e3s,4e3t,4e3u,4e3v,4e3w,4e3x,4e3y,4e3z,392,3br,3s4g,3s4h,3s4i,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,3s4r,3s4s,3s4t,3s4u,3s4v,8g,8h,8i,8j,8k,8l,8m,8n,8o,8p,8q,8r,8s,8t,8u,8v,8w,8x,8y,8z,90,91,92,93,94,95,96,97,98,99,9a,9b,9c,9d,9e,9f,9g,9h,9i,9j,9k,9l,9m,9n,9o,9p,9q,9r,9s,9t,9u,9v,9w,9x,9y,9z,a0,a1,a2,a3,a4,a5,a6,a7,4eb4,4eb5,4eb6,4eb7,4eb8,4eb9,4eba,4ebb,4ebc,4ebd,4ebe,4ebf,4ebg,4ebh,4ebi,4ebj,3io,3ip,3iq,3ir,3is,3it,3iu,3iv,3iw,3ix,3iy,3iz,3j0,3j1,3j2,3j3,3sbk,3sbl,3sbm,3sbn,3sbo,3sbp,3sbq,3sbr,3sbs,3sbt,3sbu,3sbv,3sbw,3sbx,3sby,3sbz,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,g0,g1,g2,g3,g4,g5,g6,g7,g8,g9,ga,gb,gc,gd,ge,gf,gg,gh,gi,gj,gk,gl,gm,gn,go,gp,gq,gr,gs,gt,gu,gv,gw,gx,gy,gz,h1,4eio,4eip,4eiq,4eir,4eis,4eit,4eiu,4eiv,4eiw,4eix,4eiy,4eiz,4ej0,4ej1,4ej2,4ej3,3ps,3pt,3pu,3pv,3pw,3px,3py,3pz,3q0,3q1,3q2,3q3,3q4,3q5,3q6,3q7,3shs,3si8,3sio,39k1,39k2,39k3,39k4,39k5,3siu,3siv,3siw,3six,3siy,39kb,39kc,39kd,39ke,39kf,mo,mp,mq,mr,ms,mt,mu,mv,mw,mx,my,mz,n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,na,nb,nc,nd,ne,nf,ng,nh,ni,nj,nk,nl,nm,nn,no,np,nq,nr,ns,nt,nu,nv,nw,nx,ny,nz,o0,o1,o2,o3,ob,oi,4eq8,4eq9,4eqa,4eqb,4eqc,4eqd,4eqe,4eqf,4eqg,4eqh,4eqi,4eqj,4eqk,4eql,4eqm,4eqn,3ww,3wx,3wy,3wz,3x0,3x1,3x2,3x3,3x4,3x5,3x6,3x7,3x8,3x9,3xa,3xb,3sps,3spt,3spu,3spv,3spw,3spx,3spy,3spz,3sq0,3sq1,3sq2,3sq3,3sq4,3sq5,3sq6,3sq7,ts,tt,tu,tv,tw,tx,ty,tz,u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,ua,ub,uc,ud,ue,uf,ug,uh,ui,uj,uk,ul,um,un,uo,up,uq,ur,us,ut,uu,uv,uw,ux,uy,uz,v0,v1,v2,v3,v4,v5,v6,v9,vb,vd,vj,4eww,4ewx,4ewy,4ewz,4ex0,4ex1,4ex2,4ex3,4ex4,4ex5,4ex6,4ex7,4ex8,4ex9,4exa,4exb,440,441,442,443,444,445,446,447,448,449,44a,44b,44c,44d,44e,44f,3sww,3swx,3swy,3swz,3sx0,3sx1,3sx2,3sx3,3sx4,3sx5,3sx6,3sx7,3sx8,3sx9,3sxa,3sxb,10w,10x,10y,10z,110,111,112,113,114,115,116,117,118,119,11a,11b,11c,11d,11e,11f,11g,11h,11i,11j,11k,11l,11m,11n,11o,11p,11q,11r,11s,11t,11u,11v,11w,11x,11y,11z,120,124,125,126,127,128,129,12a,12b,12f,12l,4f3k,4f3l,4f3m,4f3n,4f3o,4f3p,4f3q,4f3r,4f3s,4f3t,4f3u,4f3v,4f3w,4f3x,4f3y,4f3z,4f45,4b4,4b5,4b6,4b7,4b8,4b9,4ba,4bb,4bc,4bd,4be,4bf,4bg,4bh,4bi,4bj,4f8w,4f8x,4f8y,4f8z,4f90,4f91,4f92,4f93,4f94,4f95,4f96,4f97,4f98,4f99,4f9a,4f9b,4f9c,4f9d,4f9e,4f9f,4f9g,4f9h,4f9i,4f9j,4f9k,4f9l,4f9m,4f9n,4f9o,4f9p,4f9q,4f9r,4f9s,4f9t,4f9u,4f9v,4f9w,4f9x,4f9y,4f9z,4fa0,4fa1,4fa2,4fa3,4fa4,4fa5,4fa6,4fa7,4fa8,4fa9,4faa,4fab,4fac,4fad,4fae,4faf,4fag,4fah,4fai,4faj,4fak,4fal,4fam,4fan,4fao,4fap,4faq,4i8,4i9,4ia,4ib,4ic,4id,4ie,4if,4ig,4ih,4ii,4ij,4ik,4il,4im,4in,e6o,e6p,e6q,e6r,e6s,e6t,e6u,4pj,4pk,4pl,4pm,4pn,4po,4pp,4pq,4pr,2i1s,2i1t,2i1u,2i1v,2i1w,2i1x,2i1y,quo,2i29,quq,qur,2i2c,qut,2i2e,eds,edt,edu,edv,edw,edx,edy,4wn,4wo,4wp,4wq,4wr,4ws,4wt,4wu,4wv,4fs0,2i92,2i9i,ekw,ekx,eky,ekz,el0,el1,el2,53r,53s,53t,53u,53v,53w,53x,53y,53z,4fz4,4j51,2ig6,4j5h,r92,es0,es1,es2,es3,es4,es5,es6,5av,5aw,5ax,5ay,5az,5b0,5b1,5b2,5b3,4jc5,2ina,4jcl,rg6,ez4,ez5,ez6,ez7,ez8,ez9,eza,5hz,5i0,5i1,5i2,5i3,5i4,5i5,5i6,5i7,2iue,2iuu,f4w,f4x,f4y,f5c,f5d,f5e,f5s,f5t,f5u,f68,f69,f6a,f6b,f6c,f6d,f6e,5p3,5p4,5p5,5p6,5p7,5p8,5p9,5pa,5pb,2j1i,rue,fc2,fci,fcy,fdc,fdd,fde,fdf,fdg,fdh,fdi,5w7,5w8,5w9,5wa,5wb,5wc,5wd,5we,5wf,2j8m,s1i,2wg,fjm,2ww,fk2,am6o,fkh,fki,fkj,fkk,fkl,fkm,63b,63c,63d,63e,63f,63g,63h,63i,63j,3bvk,3bvl,3bvm,3bvn,2jfq,2jg6,9cx,fox,fd0w,fqq,340,fr6,frl,frm,frn,fro,frp,frq,6af,6ag,6ah,6ai,6aj,6ak,6al,6am,6an,im00,2jmp,2jmq,2jmr,2jmu,2jn4,2jn5,2jn6,2jn7,sfq;-2,5,8,qo0,2hvl,qo2,qo3,2hvo,qo5,2hvq,2hw0,2hw1,2hw2,2hw3,2hw4,2hw5,2hw6,2hwg,2hwh,2hwi,2hwj,2hwk,2hwl,2hwm,2hww,2hwx,2hwy,2hwz,2hx0,2hx1,2hx2,qps,2hxd,qpu,qpv,2hxg,qpx,2hxi,qq8,2hxt,qqa,qqb,2hxw,qqd,2hxy,2hy8,2hy9,2hya,2hyb,2hyc,2hyd,2hye,3aeo,3aep,3aeq,3aer,3aes,3aet,3aeu,2i2u,2i3a,e8w,e8x,e8y,e8z,e90,e91,2i3q,2i46,2i4m,2i52,eao,eap,eaq,ear,eas,eat,2i5i,3alx,2i5y,3am8,3am9,3ama,3amb,3amc,3amd,3ame,4iyt,r2e,2iae,eg0,eg1,eg2,eg3,eg4,eg5,2iau,2iba,r46,r4m,ehs,eht,ehu,ehv,ehw,ehx,2icm,3at1,3ath,2idi,3ats,3att,3atu,3atv,3atw,3atx,3aty,4j5x,r9i,2ihi,en4,en5,en6,en7,en8,en9,2ihy,2iie,rba,rbq,eow,eox,eoy,eoz,ep0,ep1,2ijq,3b05,3b0l,3b11,2il2,3b1c,3b1d,3b1e,3b1f,3b1g,3b1h,2io6,2iom,eu8,eu9,eua,eub,euc,eud,2ip2,2ipi,2ipy,2iqe,ew0,ew1,ew2,ew3,ew4,ew5,2iqu,3b79,3b7p,3b85,3b8l,2ism,3b8w,3b8x,3b8y,3b8z,3b90,3b91,3b92,rnq,2ivq,f1c,f1d,f1e,f1f,f1g,f1h,2iw6,2iwg,2iwh,2iwi,2iwj,2iwk,2iwl,2iwm,2iww,2iwx,2iwy,2iwz,2ix0,2ix1,rpi,2ixc,2ixd,2ixe,2ixf,2ixg,2ixh,rpy,f34,f35,f36,f37,f38,f39,2ixy,3bed,3bet,3bf9,3bfp,3bg5,2j06,3bgg,3bgh,3bgi,3bgj,3bgk,3bgl,3bgm,ruu,2j2u,f8g,f8h,f8i,f8j,f8k,f8l,2j3a,2j3q,rwm,rx2,fa8,fa9,faa,fab,fac,fad,2j52,3blh,3blx,3bmd,3bmt,3bn9,3bnp,2j7q,3bo0,3bo1,3bo2,3bo3,3bo4,3bo5,3bo6,2j9i,2j9y,ffk,ffl,ffm,ffn,ffo,ffp,2jae,2jau,2jba,2jbq,fhc,fhd,fhe,fhf,fhg,fhh,2jc6,3bsl,3bt1,3bth,3btx,3bud,3but,3bv9,2jfa,3bvk,3bvl,3bvm,3bvn,3bvo,3bvp,3bvq,2jgg,2jgj,s92,2jgw,2jgx,2jgz,2jh2,fmo,fmp,fmq,fmr,fms,fmt,2jhi,2jhs,2jht,2jhu,2jhv,2jhy,2ji8,2ji9,2jia,2jib,sau,2jio,2jip,2jiq,2jir,sba,fog,foh,foi,foj,fok,fol,2jja,3bzp,3c05,3c0l,3c11,3c1h,3c1x,3c2d,3c2t,2jmu,3c34,3c35,3c36,3c37,3c38,3c39,3c3a;-2,4,9,4e28,4e29,4e2a,4e2b,4e2c,4e2d,4e2e,4e2f,4e2g,4e2h,4e2i,6d7,4e2o,4e2p,4e2q,4e2r,4e2s,4e2t,4e2u,4e2v,4e2w,4e2x,4e2y,4e2z,4e34,4e35,4e36,4e37,4e38,4e39,4e3a,4e3b,4e3c,4e3d,4e3e,4e3f,4e3k,4e3l,4e3m,4e3n,4e3o,4e3p,4e3q,4e3r,3bm,3dn,3do,3s4g,3s4h,3s4i,3s4j,3s4k,3s4l,3s4m,3s4n,3s4o,3s4p,3s4q,8b,8c,8g,8h,8i,8j,8k,8l,8m,8n,8o,8p,8q,8r,8w,8x,8y,8z,90,91,92,93,94,9c,9d,9e,9f,9g,9h,9i,9s,9t,9v,9x,4eb4,4eb5,4eb6,4eb7,4eb8,4eb9,4eba,4ebb,3io,3ip,3iq,3kd,3ke,3kr,f1,f2,3sbk,3sbl,3sbm,3sbn,3sbo,3sbp,3sbq,3sbr,3sbs,3sbt,3sbu,ff,fg,fh,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,g0,g1,g2,g3,g4,g5,g6,g7,gg,gh,gi,gj,gk,gl,gx,4eio,4eip,4eiq,4eir,4eis,4eit,4eiu,4eiv,3ps,3pt,3pu,3sio,3sip,3siq,3sir,3sis,39k5,39k6,39k7,39k8,39k9,3siy,mo,mp,mq,mr,ms,mt,mu,mv,mw,n4,n5,n6,n7,n8,n9,na,nb,nk,nl,nm,nn,no,nr,o3,4eq8,4eq9,4eqa,4eqb,4eqc,4eqd,4eqe,4eqf,3ww,3wx,3wy,3yj,74q,t7,3sps,3spt,3spu,3spv,3spw,3spx,3spy,3spz,3sq0,3sq1,3sq2,ts,tt,tu,tv,tw,tx,ty,tz,u0,u8,u9,ua,ub,uc,ud,ue,uo,up,uq,ur,uu,uw,ux,uy,uz,vd,4eww,4ewx,4ewy,4ewz,4ex0,4ex1,4ex2,4ex3,440,441,442,45j,45k,45l,45m,45n,107,108,109,10a,10b,3sww,3swx,3swy,3swz,3sx0,3sx1,3sx2,3sx3,3sx4,3sx5,3sx6,10w,10x,10y,10z,110,111,112,113,11c,11d,11e,11f,11g,11h,11s,11t,11u,11v,11w,120,4f3k,4f3l,4f3m,4f3n,4f3o,4f3p,4f3q,4f3r,4b4,4b5,4b6,4f8w,4f8x,4f8y,4f8z,4f90,4f91,4f92,4f93,4f9c,4f9d,4f9e,4f9f,4f9g,4f9h,4f9i,4f9j,4f9s,4f9t,4f9u,4f9v,4f9w,4f9x,4f9y,4f9z,4fa8,4fa9,4faa,4fab,4fac,4fad,4fae,4faf,4i8,4i9,4ia,4pc,4pd,4pe,4wg,4wh,4wi,53k,53l,53m,5ao,5ap,5aq,5hs,5ht,5hu,5ow,5ox,5oy,5w0,5w1,5w2,634,635,636,6a8,6a9,6aa;-1,0,2,4f8i,4f8j,4f8y,4f8z,4f9e,4f9f,4f9u,4f9v,4ff6,4ff7,4ffo,4fg4,4fgi,4fgk,4fgy,4fh0,4fhe,4fhf,4fhv,4fmb,4fmq,4fms,4fn6,4fn8,4fnm,4fno,4fo2,4fo4,4foi,4foj,4foz,1sj,4ftg,4ftu,4ftw,4fua,4fuc,4fuq,4fus,4fv6,4fv8,4fvm,4fvn,1zn,5es4,5es5,5es6,5es7,5es8,5es9,5esa,5esb,5esc,5esd,5ese,5esf,203,5esk,5esl,5esm,5esn,5eso,5esp,5esq,5esr,5ess,5est,5esu,5esv,4g1e,4g1f,4g1u,4g1v,4g2a,4g2b,26r,277,27n,2eb,5f77,5f7n,5feb,5fer,5ff7,5flv,5fmb,2ub,5ftf,31f,31v,32b,32r,337,33n,343,34j,34z,35f;-1,1,2,5fqr,2yr,2z7,2zn,303,30j,30z,31f,31v,32b,32r,337,33n,343,34j,34z,5fxv;-1,2,2,5fk3,5fkj,5fkz,5fr7,5frn,5fs3,5fsj;-1,4,2,3rxf,3rxg,3rxh,36u,3rxj,3rxk,38yx,3rxm,3rxn,1f,1g,1h,1i,1j,1k,1l,1m,1n,1v,1w,1x,1y,1z,20,21,22,23,26,2b,2c,2d,2e,2f,2g,2i,2u,3d7,7s,7t,7u,7v,3s4j,3s4k,3s4l,3s4n,3s4o,3961,3s4q,3s4r,8j,8k,8l,i6gm,8n,8o,8p,8q,8r,8z,90,91,mdi,93,94,95,96,9f,9g,9h,9i,3ka,3kb,ew,ex,ey,ez,3sbn,3sbo,3sbp,3l2,3sbr,3sbs,39d5,3sbu,3sbv,fn,fo,fp,fq,fr,fs,ft,fu,fv,g3,g4,g5,g6,g7,g8,g9,gj,gk,gl,gm,gz,3rd,3re,3rf,m0,m1,m2,m3,3sir,3sis,3sit,3siv,3siw,39k9,3siy,3siz,mr,ms,mt,aaeu,mv,mw,mx,my,mz,n7,n8,n9,mrq,nb,nc,ne,nn,no,np,nr,o3,o5,3yh,3yi,3yj,t4,t5,t6,t7,3spv,3spw,3spx,3za,3spz,3sq0,39rd,3sq2,3sq3,tv,tw,tx,ty,tz,u0,u1,u2,u3,ub,uc,ud,ue,uf,ug,ur,us,ut,uu,v7,3swr,3swz,3sx0,3sx1,3sx3,3sx4,3sx5,3sx6,3sx7,10z,110,111,i792,113,114,115,116,117,11f,11g,11h,n5y,11j,11k,11v,11w,11x,11y,123,12b,12d,12j,3t3v,3t43,3t44,3t45,4di,3t47,3t48,3t49,3t4a,3t4b,183,184,185,186,187,188,189,18a,18b,18j,18k,18l,18m,18n,18p,18r,18z,190,191,196,197,19f,19n,3taz,3tb7,3tb8,3tb9,3tbb,3tbc,3tbd,3tbe,3tbf,1f7,1f8,1f9,ggfq,1fb,1fc,1fd,1fe,1ff,1fn,1fo,1fp,nk6,1fr,1g3,1g4,1ga,1gb,1gj,1gq,1gr,3ti3,3tib,3tic,3tid,4rq,3tif,3tig,3tih,3tii,3tij,1mb,1mc,1md,1me,1mf,1mg,1mh,1mi,1mr,1ms,1mt,1mu,1n7,1n8,1ne,1nf,1nu,1nv,3tp7,3tpf,3tpg,3tph,3tpi,3tpj,3tpk,3tpl,3tpm,3tpn,1tf,1tg,1th,1ti,1tj,1tk,1tl,1tm,1tv,1tw,1tx,1ty,1u0,1ub,1uc,1uj,1ur,1uy,1uz,3twj,3twk,3twl,3axy,3twn,3two,3ay1,3twq,3twr,20j,20k,20l,20m,20n,20o,20p,20q,20z,210,211,212,21f,239,23a,23b,23c,23d,23p,23q,23r,23s,23t,3u3n,3u3o,3u3p,3u3q,3u3r,3u3s,3b55,3u3u,3u3v,27n,27o,27p,27q,27r,27s,27t,27u,283,284,285,286,28j,2ad,2ae,2af,2ag,2ah,2at,2au,2av,2aw,2ax,2bb,2br,2dn,3uar,3uas,3uat,3bc6,3uav,3uaw,3bc9,3uay,3uaz,2er,2es,2et,2eu,2ev,2ew,2ex,2ey,2ez,2f7,2f8,2f9,2fa,2fb,2fn,2fr,2g7,2gn,2h3,2hh,2hi,2hj,2hk,2hl,2hx,2hy,2hz,2i0,2i1,2ie,2if,2ig,2iu,2iv,2iw,2kr,2l7,3uhv,3uhw,3uhx,3uhy,3uhz,3ui0,3bjd,3ui2,3ui3,2lv,2lw,2lx,2ly,2lz,2m0,2m1,2m2,2m3,2mb,2mc,2md,2me,2mf,2mg,2mr,2ms,2n7,2ol,2om,2on,2oo,2op,2p1,2p2,2p3,2p4,2p5,2pi,2pj,2pz,2rv,2sb,3uoz,3up0,3up1,3bqe,3up3,3up4,3bqh,3up6,3up7,2sz,2t0,2t1,2t2,2t3,2t4,2t5,2t6,2t7,2tf,2tg,2th,2ti,2tj,2tk,2tl,2tm,2tn,2tv,2tw,2tx,2tz,2u0,2ud,2vq,2vr,2vs,2w5,2w6,2w7,2w8,2w9,64r,2zf,3uw3,3uw4,3uw5,3uw6,3uw7,3uw8,3uw9,3uwa,3uwb,303,304,305,306,307,308,309,30a,30b,30j,30k,30l,30m,30n,30o,30p,30z,310,311,312;-1,0,3,5es0,5es1,5es2,5es3,5es4,5es5,5es6,5es7,5es8,5es9,5esa,5esb,5esc,5esd,5ese,5esf,5esg,5esh,5esi,5esj,5esk,5esl,5esm,5esn,5eso,5esp,5esq,5esr,5ess,5est,5esu,5esv;-1,4,3,37c,37d,37e,37f,37g,37h,37i,37j,20,21,22,23,24,25,26,27,2l,3ej,3ek,3el,3em,3en,97,98,99,9a,9b;-1,0,4,5ela,5elb,5elq,5elr,5es0,5es1,5es2,5es3,1zo,1zp,1zq,5es7,5es8,5es9,5esa,5esb,5esc,5esd,5ese,5esf,5esg,5esh,5esi,5esj,5esk,5esl,5esm,5esn,5eso,5esp,5esq,5esr,5ess,5est,5esu,5esv,273,27j,2e7,2en,2lb,2lr,2sf,2sv,2zj,2zz;-1,4,4,374,375,376,377,378,379,37a,37b,37c,37d,1s,1t,1u,1v,1w,1x,1y,1z,20,21,2c,3e8,3e9,3ea,3eb,3ec,8w,8x,8y,8z,90;-1,0,5,m,12,13,7q,86,eu,fa,ly,me,t2,ti,tj,106,10m,17a,17q,1ee,1eu,1li,1ly,1sm,1t2,1t3,1zq,206,26u,27a,2dy,2ee,2l2,2li,2lj,2s6,2sm,2z4,2z5,2za,2zk,2zl,2zm,2zq,300,301,302,303,30h,30i,30j,30w,30x,30y,30z,310,31d,31e,31f,31g,31h,31u,31v,31w,31x,32b,32c,32d,32e,32r,32s,32t,32u,338,339,33a,33b,33p,33q,33r,33s,346,347,348,34k,34l,34n,34o,34p,351,352,353,354,355,356,35i,35j,35k,35l,35m;-1,1,5,2yv,2yw,2yx,2yy,2yz,2zb,2zc,2zd,2ze,2zf,2zs,2zt,2zu,2zv,2zw,309,30a,30b,30c,30d,30q,30r,30s,30t,317,318,319,31a,31o,31p,31q,31r,326,327,32n,332,333,33i,33j,33x,33y,33z,34c,34d,34e,34f,34t,34u,35a,35b;-1,3,5,4xg,4xh,4xi,54k,54l,54m,5bo,5bp,5bq,5is,5it,5iu,5pw,5px,5py,5x0,5x1,5x2,644,645,646,6b8,6b9,6ba;-1,4,5,6cd,371,37i,37z,6jh,3e5,3em,3f3,6ql,3l9,3lq,3m7,6xp,3sd,3su,3tb,74t,74u,3zh,75a,3zy,40f,7bx,46l,472,47j,7j1,4dp,4e6,4en,7q5,4kt,4la,4lr,1l0,1l1,1l2,7x9,4rx,4se,4sv,1s4,1s5,1s6,1sk,84d,5bft,4z1,4zi,4zz,1z8,1z9,1za,8bh,565,56m,573,26c,26d,26e,26s,5bu1,8j2,5dq,5e7,2dg,2dh,2di,2dw,2dy,5c11,5c14,5c15,8q6,5c1k,5c1p,5ku,5c20,5lb,5c78,2kl,2km,5c7o,2l2,5c87,8xa,5ry,5sf,2ro,2rp,2rq,2s4,2s6,94v,5zj,2ys,5clh,2yu,2z8,2z9,2za,9bz,66n;-1,1,6,328,329,32o,32p,32q,334,335,336,337,33k,33l,33m,33n,33o,340,341,342,343,344,34g,34h,34i,34j,34k,34w,34y,34z,350,35c,35d,35e,35f,35g,35h;-1,2,6,2yq,2yr,2yt,2yu,2z7,2z8;-1,4,6,6c0,6cg,374,380,38h,38y,39f,6fo,3ac,3at,3ba,3br,3s2g,3s2h,3s2i,3bv,3bw,3bx,3v8e,3v8f,3f4,3fl,3g2,3gj,6ms,3hg,3hx,3ie,3iv,3s9k,3s9l,3s9m,3iz,3j0,3j1,3vfi,3vfj,3m8,3mp,3n6,3nn,6tw,3ok,3p1,3pi,3pz,3sgo,3sgp,3sgq,3q3,3q4,3q5,3vmm,3vmn,3tc,3tt,3ua,3ur,710,3vo,3w5,3wm,3x3,3sns,3snt,3snu,3x7,3x8,3vtp,3vtq,3vtr,40g,40x,41e,41v,784,42s,439,43q,447,3suw,3sux,3suy,44b,3w0s,3w0t,3w0u,44f,47k,481,48i,48z,7f8,49w,4ad,4au,4bb,3t20,3t21,3t22,3w7v,3w7w,3w7x,4bi,4bj,4eo,4f5,4fm,4g3,7mc,4h0,4hh,7na,4hy,4if,3t94,3t95,3t96,3wez,3wf0,4il,4im,4in,4ls,4m9,4mq,4n7,7tg,4o4,4ol,7ue,4p2,4pj,3tg8,3tg9,3tga,3wm3,4po,4pp,4pq,4pr,4si,4sj,4sw,4td,4tu,4ub,80k,4v8,4vp,81i,4w6,4wn,3tnc,3tnd,3tne,4wr,4ws,4wt,4wu,4wv,84m,4za,4zm,4zn,500,50h,50y,51f,87o,52c,52t,88m,53a,893,53r,3tug,3tuh,3tui,53v,53w,53x,53y,53z,8bq,8c3,56e,56r,574,8d9,57l,57x,582,58j,8es,59g,59x,8fq,5ae,5av,3u1k,3u1l,3u1m,5az,5b0,5b1,5b2,5b3,5e8,5ep,5f6,5fn,8lw,5gk,5h1,8mu,5hi,5hz,3u8o,3u8p,3u8q,5i3,5i4,5i5,5i6,5i7,5lc,8rg,5lt,5m4,5ma,5mr,8t0,5no,5o5,5om,5p3,3ufs,3uft,3ufu,5p7,5p8,5p9,5pa,5pb,5sg,5sx,5te,5tv,904,5us,5v9,5vq,5w7,3umw,3umx,3umy,5wb,5wc,5wd,5we,5wf,5zk,601,60i,60z,978,61w,62d,62u,63b,3uu0,3uu1,3uu2,63f,63g,63h,63i,63j,66o,675,67m,683,690,69h,69y,6af,3v14,3v15,3v16,6aj,6ak,6al,6am,6an;-1,4,7,6en,cqn,cr3,4e,crj,4u,crz,eksf,csv,3v80,3bl,3bm,csz,ct0,ct1,ct2,ct3,ct4,ct5,ct6,ct7,ct8,ct9,cta,ctb,5plv,2god,4hda,5mgj,2got,8iri,6lr,cxr,cy7,cyn,cz3,czj,czz,3vf4,3ip,3iq,d03,d04,d05,d06,d07,d08,d09,d0a,d0b,d0c,d0d,d0e,d0f,5psz,2gvh,dm9a,5mnn,2gvx,6sv,d4v,d5b,d5r,d67,d6n,d73,3vm8,3pt,3pu,d77,d78,d79,d7a,d7b,d7c,d7d,d7e,d7f,d7g,d7h,d7i,d7j,5q03,2h2l,5mur,2h31,3ww,3wx,3wy,deb,dec,ded,dee,def,deg,deh,dei,dej,dek,del,dem,den,2h9f,2h9p,5q7i,2h9r,2h9v,2ha5,5n26,2ha7,440,441,442,dlf,dlg,dlh,dli,dlj,dlk,dll,dlm,dln,dlo,dlp,dlq,dlr,2hgj,q9f,4b4,4b5,4b6,dsj,dsk,dsl,dsm,dsn,dso,dsp,dsq,dsr,dss,dst,dsu,dsv,2hnn,qgj,4i8,4i9,4ia,dzn,dzo,dzp,dzq,dzr,dzs,dzt,dzu,dzv,dzw,dzx,dzy,dzz,2hur,2hus,2hut,2huu,2huv,2huw,2hux,2hv1,2hv2,2hv3,2hv7,dn90,9p15,2hvh,2hvi,2hvj,4pc,4pd,4pe,e6r,e6s,e6t,e6u,e6v,e6w,e6x,e6y,e6z,e70,e71,e72,e73,2i1v,3ahw,2i25,qur,2i2l,1qb,1qc,4wg,4wh,4wi,edv,edw,edx,edy,edz,ee0,ee1,ee2,ee3,ee4,ee5,ee6,ee7,2i8z,5884,iu3z,r1v,86a,3wxe,1xe,1xf,1xg,53k,53l,53m,ekz,el0,el1,el2,el3,el4,el5,el6,el7,el8,el9,ela,elb,2ig3,3aw4,8hda,c2y7,2igj,24j,24k,5ao,5ap,5aq,es3,es4,es5,es6,es7,es8,es9,esa,esb,esc,esd,ese,esf,2in7,3b38,h3an,2inn,5hs,5ht,5hu,ez7,ez8,ez9,eza,ezb,ezc,ezd,eze,ezf,ezg,ezh,ezi,ezj,2iub,3bac,3bad,3bae,3baf,3bag,2iuh,2cs,2iul,2cu,2iur,2iux,2iv1,5ow,5ox,5oy,f6b,f6c,f6d,f6e,f6f,f6g,f6h,f6i,f6j,f6k,f6l,f6m,f6n,2j1f,2j1g,2j1h,2j1i,2j1j,2j1k,2j1l,2j1m,2j1n,2j1o,2j1p,2j1q,2j1r,2j1v,2j1w,2j1x,2j1y,2j1z,2j20,2j21,2j22,2j23,2j24,2j25,2j26,2j27,5w0,5w1,5w2,5w3,5w4,5w5,5w6,5w7,5w8,5w9,5wa,5wb,5wc,5wd,5we,5wf,2r1,2rh,634,635,636,637,638,639,63a,63b,63c,63d,63e,63f,63g,63h,63i,63j,6a8,6a9,6aa,6ab,6ac,6ad,6ae,6af,6ag,6ah,6ai,6aj,6ak,6al,6am,6an;-1,5,7,pab,2gi5,2gib,2gil,aja6,aja7,2gir,co4,co5,co6,co7,co8,co9,coa,cob,coc,cod,coe,czsf,2gj7,2gjg,pc3,2gjw,pcj,2gkc,2gkj,cpw,cpx,cpy,cpz,cq0,cq1,cq2,cq3,cq4,cq5,cq6,cq7,3910,391g,391w,392c,392s,3938,393o,2go3,3944,2goj,394k,phf,2gp9,2gpf,2gpp,ajha,ajhb,2gpv,cv8,cv9,cva,cvb,cvc,cvd,cve,cvf,cvg,cvh,cvi,czzj,2gqb,2gqc,2gqd,2gqe,2gqf,2gqg,2gqh,2gqi,2gqj,2gqk,2gqr,2gqs,2gqt,2gqu,2gqv,2gqw,2gqx,2gqy,2gqz,2gr0,2gr7,2gr8,2gr9,2gra,2grb,2grc,2grd,2gre,2grf,2grg,2grn,cx0,cx1,cx2,cx3,cx4,cx5,cx6,cx7,cx8,cx9,cxa,cxb,3984,pl0,plg,plw,pmc,39ac,39as,39b8,2gvn,39bo,poj,2gwd,2gwj,2gwt,ajoe,ajof,2gwz,d2c,d2d,d2e,d2f,d2g,d2h,d2i,d2j,d2k,d2l,d2m,d06n,2gxf,2gxo,pqb,2gy4,pqr,2gyk,2gyr,d44,d45,d46,d47,d48,d49,d4a,d4b,d4c,d4d,d4e,d4f,39f8,ps4,psk,pt0,ptg,39hg,39hw,39ic,2h2r,39is,2h37,2h3h,2h3i,2h3j,2h3n,2h3x,2h3y,2h3z,2h43,d9g,d9h,d9i,d9j,d9k,d9l,d9m,d9n,d9o,d9p,d9q,d9r,2h4j,2h4s,2h4v,2h4z,2h58,2h5b,2h5f,2h5o,2h5r,2h5v,db8,db9,dba,dbb,dbc,dbd,dbe,dbf,dbg,dbh,dbi,dbj,39mc,39ms,39n8,39no,39o4,39ok,39p0,2h9f,39pg,2h9v,39pw,q2r,2har,2hb7,dgk,dgl,dgm,dgn,dgo,dgp,dgq,dgr,dgs,dgt,dgu,dgv,2hbn,5q9o,q4j,5n4c,q4z,2hcs,2hcz,dic,did,die,dif,dig,dih,dii,dij,dik,dil,dim,din,39tg,39tw,39uc,39us,39v8,39vo,2hg3,39w4,2hgj,39wk,39wz,39x0,39x1,39x2,39x3,39x4,39x5,39x6,39x7,39x8,39x9,39xa,39xb,q9v,2hhv,2hib,dno,dnp,dnq,dnr,dns,dnt,dnu,dnv,dnw,dnx,dny,dnz,2hir,2hj0,qbn,2hjg,qc3,2hjw,2hk3,dpg,dph,dpi,dpj,dpk,dpl,dpm,dpn,dpo,dpp,dpq,dpr,3a0k,3a10,3a1g,3a1w,3a2c,2hmr,3a2s,2hn7,3a38,3a3n,3a3o,3a3p,3a3q,3a3r,3a3s,3a3t,3a3u,3a3v,3a3w,3a3x,3a3y,3a3z,2hoj,evb8,b6kl,b6km,b6kn,b6ko,coax,2hot,2hou,2hov,2hoz,ik2c,ik2d,ik2e,ik2f,ik2g,2hp5,2hp9,2hpa,2hpb,2hpf,dus,dut,duu,duv,duw,dux,duy,duz,dv0,dv1,dv2,dv3,2hpv,2hpw,2hpx,2hpy,2hpz,2hq0,2hq1,2hq2,2hq3,2hq4,5qnx,2hq6,2hq7,2hqb,2hqc,2hqd,2hqe,2hqf,2hqg,2hqh,2hqi,2hqj,2hqk,5nil,2hqm,2hqn,2hqr,2hqs,2hqt,2hqu,2hqv,2hqw,2hqx,2hqy,2hqz,2hr0,2hr1,2hr2,2hr3,2hr7,dwk,dwl,dwm,dwn,dwo,dwp,dwq,dwr,dws,dwt,dwu,dwv,3a7o,3a84,3a8k,3a90,2htf,3a9g,2htv,3a9w,3aab,3aac,3aad,3aae,3aaf,3aag,3aah,3aai,3aaj,3aak,3aal,3aam,3aan,qo3,2hvx,2hw3,au50,c2dx,au52,c2dz,au54,2hw9,2hwd,c2e6,c2e7,2hwj,e1w,e1x,e1y,e1z,e20,e21,e22,e23,e24,e25,e26,e27,2hwz,2hxa,qpv,2hxq,b6tr,qqb,2hy6,2hyb,e3o,e3p,e3q,e3r,e3s,e3t,e3u,e3v,e3w,e3x,e3y,e3z,3aes,3af8,3afo,2i03,3ag4,2i0j,3agk,3agz,3ah0,3ah1,3ah2,3ah3,3ah4,3ah5,3ah6,3ah7,3ah8,3ah9,3aha,3ahb,qv7,2i37,c2l0,c2l1,c2l2,c2l3,c2l4,2i3d,c2la,c2lb,2i3n,e90,e91,e92,e93,e94,e95,e96,e97,e98,e99,e9a,e9b,2i43,3ak4,49bp,49bq,49br,2i4e,qwz,2i4u,qxf,2i5a,2i5f,eas,eat,eau,eav,eaw,eax,eay,eaz,eb0,eb1,eb2,eb3,3alw,3amc,2i6r,3ams,2i77,3an8,3ann,3ano,3anp,3anq,3anr,3ans,3ant,3anu,3anv,3anw,3anx,3any,3anz,2i9v,7if8,2iab,auj8,c2s5,auja,c2s7,aujc,2iah,c2se,c2sf,2iar,eg4,eg5,eg6,eg7,eg8,eg9,ega,egb,egc,egd,ege,egf,2ib7,3ar8,49it,49iu,49iv,2ibn,2ic3,2icj,ehw,ehx,ehy,ehz,ei0,ei1,ei2,ei3,ei4,ei5,ei6,ei7,3at0,2idf,3atg,2idv,3atw,3aub,3auc,3aud,3aue,3auf,3aug,3auh,3aui,3auj,3auk,3aul,3aum,3aun,2igz,7imc,2ihf,c2z8,c2z9,c2za,c2zb,c2zc,2ihl,c2zi,c2zj,2ihv,en8,en9,ena,enb,enc,end,ene,enf,eng,enh,eni,enj,2iib,3ayc,49px,49py,49pz,2iim,2iir,2ij2,2ij7,2iji,2ijn,ep0,ep1,ep2,ep3,ep4,ep5,ep6,ep7,ep8,ep9,epa,epb,2ik3,3b04,2ikj,3b0k,3b0z,3b10,3b11,3b12,3b13,3b14,3b15,3b16,3b17,3b18,3b19,3b1a,3b1b,2io3,7itg,2io9,2iod,2ioj,auxg,c36d,auxi,c36f,auxk,2iop,2iot,c36m,c36n,2ioz,euc,eud,eue,euf,eug,euh,eui,euj,euk,eul,eum,eun,2ipf,2ipq,2ipv,2iq6,b7m7,2iqb,2iqm,2iqr,ew4,ew5,ew6,ew7,ew8,ew9,ewa,ewb,ewc,ewd,ewe,ewf,2ir7,3b78,3b7n,3b7o,3b7p,3b7q,3b7r,3b7s,3b7t,3b7u,3b7v,3b7w,3b7x,3b7y,3b7z,2iv7,2iv8,2iv9,2iva,2ivb,2ivc,2ivd,2ive,2ivf,2ivg,2ivh,2ivi,2ivj,2ivn,2ivo,2ivp,2ivq,2ivr,2ivs,2ivt,2ivu,2ivv,2ivw,2ivx,2ivy,2ivz,2iw3,2iw4,2iw5,2iw6,2iw7,2iw8,2iw9,2iwa,2iwb,2iwc,2iwd,2iwe,2iwf,2iwj,2iwk,2iwl,2iwm,2iwn,2iwo,2iwp,2iwq,2iwr,2iws,2iwt,2iwu,2iwv,2iwz,2ix0,2ix1,2ix2,2ix3,2ix4,2ix5,2ix6,2ix7,2ix8,2ix9,2ixa,2ixb,2ixf,2ixg,2ixh,2ixi,2ixj,2ixk,2ixl,2ixm,2ixn,2ixo,2ixp,2ixq,2ixr,2ixv,2ixw,2ixx,2ixy,2ixz,2iy0,2iy1,2iy2,2iy3,2iy4,2iy5,2iy6,2iy7,3beb,3bec,3bed,3bee,3bef,3beg,3beh,3bei,3bej,3bek,3bel,3bem,3ben;-1,6,7,38xv,38xw,38xx,38xy,38xz,38y0,38y1,38y2,38y3,38y4,38y5,38y6,38y7,394z,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,395a,395b,39c3,39c4,39c5,39c6,39c7,39c8,39c9,39ca,39cb,39cc,39cd,39ce,39cf,39j7,39j8,39j9,39ja,39jb,39jc,39jd,39je,39jf,39jg,39jh,39ji,39jj;-1,0,8,r,17,7v,8b,ez,ff,m3,mj,mz,t7,tn,10b,10r,17f,17v,1ej,1ez,1ff,1ln,1m3,1sr,1t7,1zv,20b,26z,27f,2e3,2ej,2ez,2l7,2ln,2sb,2sr,2zf,2zv;-1,3,8,23nj,4h65,4h67,4h6l,23um,35r;-1,4,8,6e8,cq8,40,41,cr6,4g,4h,crm,4w,4x,cs2,7gsg,csi,5mfl,csy,csz,ct0,ct1,ct2,3br,3bs,3bt,3bu,3bv,3bw,3bx,3by,3bz,5pls,5plt,cte,czxf,2go6,5mgg,ctt,czxu,ph2,6lc,6ld,cxc,cxd,cxs,cxt,b4,cy9,cya,bk,bl,cyq,cz6,czk,czm,d00,d01,d02,d03,d04,d05,d06,3iv,3iw,3ix,3iy,3iz,3j0,3j1,3j2,3j3,53og,53oh,d0i,d04j,2gva,4hkg,d0x,d04y,po6,d4w,d4x,d5c,d5d,d5e,d5s,d5t,d5u,d68,d69,d6a,d6o,d6p,d6q,d74,d75,d76,d77,d78,d79,d7a,3pz,3q0,3q1,3q2,3q3,3q4,3q5,3q6,3q7,53vk,53vl,d7m,d0bn,2h2e,4hrk,d81,d0c2,2h2u,de8,de9,dea,deb,dec,ded,dee,3x3,3x4,3x5,3x6,3x7,3x8,3x9,3xa,3xb,2h9c,2h9d,2h9e,2h9f,2h9i,2h9s,2h9t,2h9u,2h9v,2h9y,dlc,dld,dle,dlf,dlg,dlh,dli,447,448,449,44a,44b,44c,44d,44e,44f,yt,5qee,yv,yw,5n92,dsg,dsh,dsi,dsj,dsk,dsl,dsm,4bb,4bc,4bd,4be,4bf,4bg,4bh,4bi,4bj,15w,15x,5qli,15z,160,5ng6,7nr,dzk,dzl,dzm,dzn,dzo,dzp,dzq,4if,4ig,4ih,4ii,4ij,4ik,4il,4im,4in,2huo,2hup,2huq,2hur,1d0,1d1,2huu,1d3,1d4,2hv4,2hv5,2hv6,2hv7,1dh,2hva,1dj,e6o,e6p,e6q,e6r,e6s,e6t,e6u,4pj,4pk,4pl,4pm,4pn,4po,4pp,4pq,4pr,8gyo,8gyq,1k4,1k5,2i1y,1k7,1k8,1kl,2i2e,1kn,eds,edt,edu,edv,edw,edx,edy,4wn,4wo,4wp,4wq,4wr,4ws,4wt,4wu,4wv,c2qo,c2qp,c2qq,iu3n,1r8,1r9,2i92,1rb,1rc,2i9i,ekw,ekx,eky,ekz,el0,el1,el2,53r,53s,53t,53u,53v,53w,53x,53y,53z,c2xs,c2xt,c2xu,c2xv,8hd0,2ig6,r92,59m,es0,es1,es2,es3,es4,es5,es6,5av,5aw,5ax,5ay,5az,5b0,5b1,5b2,5b3,c34w,c34x,c34y,h3ab,2ina,rg6,8m2,5gq,ez4,ez5,ez6,ez7,ez8,ez9,eza,5hz,5i0,5i1,5i2,5i3,5i4,5i5,5i6,5i7,8hr4,8hr6,2iue,2iuu,f68,f69,f6a,f6b,f6c,f6d,f6e,5p3,5p4,5p5,5p6,5p7,5p8,5p9,5pa,5pb,2j1c,2j1d,2j1e,2j1f,2j1g,2j1h,2j1i,2j1s,2j1t,2j1u,2j1v,2j1w,2j1x,2j1y,5w0,5w1,5w2,5w3,5w4,5w5,5w6,5w7,5w8,5w9,5wa,5wb,5wc,5wd,5we,5wf,23gv,4gtb,4gtr,634,635,636,637,638,639,63a,63b,63c,63d,63e,63f,63g,63h,63i,63j,4gzx,23ny,2z3,4h0e,2zj,4h0u,2zz,4h1b,6a8,6a9,6aa,6ab,6ac,6ad,6ae,6af,6ag,6ah,6ai,6aj,6ak,6al,6am,6an;-1,5,8,cn4,czr5,pae,czrk,2gie,co4,co5,2giu,czsj,2gja,czsy,5phf,pc6,cztd,5mc3,pcm,czts,5pi9,5pia,5pib,cpw,cpx,2gkm,3911,391h,391x,392d,392t,3939,393p,3945,394l,2gom,cu8,czy9,phi,czyo,2gpi,cv8,cv9,2gpy,cvn,2gqe,cw2,cw3,pja,cwh,cwi,cwj,pjq,cww,cwx,cwy,cwz,cx0,cx1,2grq,3985,398l,3991,399h,399x,39ad,39at,39b9,39bp,2gvq,d1c,d05d,2gw6,d05s,2gwm,d2c,d2d,2gx2,d2r,2gxi,d36,d37,2gxy,d3l,d3m,d3n,2gye,d40,d41,d42,d43,d44,d45,2gyu,39f9,39fp,39g5,39gl,39h1,39hh,39hx,39id,39it,2h2u,2h34,2h35,2h36,2h37,2h3a,2h3k,2h3l,2h3m,2h3n,2h3q,d9c,d9d,d9e,d9f,d9g,d9h,2h46,2h4g,2h4h,2h4i,2h4j,2h4m,2h4w,2h4x,2h4y,2h4z,pxi,2h5c,2h5d,2h5e,2h5f,pxy,db4,db5,db6,db7,db8,db9,2h5y,39md,39mt,39n9,39np,39o5,39ol,39p1,39ph,39px,2h9y,q2u,2hau,dgg,dgh,dgi,dgj,dgk,dgl,2hba,2hbq,q4m,q52,di8,di9,dia,dib,dic,did,2hd2,39th,39tx,39ud,39ut,39v9,39vp,39w5,39wl,2hgm,39ww,39wx,39wy,39wz,39x0,39x1,39x2,q9y,2hhy,dnk,dnl,dnm,dnn,dno,dnp,2hie,2hiu,2hja,2hjq,dpc,dpd,dpe,dpf,dpg,dph,2hk6,3a0l,3a11,3a1h,3a1x,3a2d,3a2t,3a39,2hna,3a3k,3a3l,3a3m,3a3n,3a3o,3a3p,3a3q,2hog,2hoh,2hoi,2hoj,16t,2hom,16v,2how,2hox,2hoy,2hoz,2hp2,duo,dup,duq,dur,dus,dut,2hpi,2hps,2hpt,5qnm,2hpv,2hpw,2hpx,2hpy,2hq8,2hq9,5nia,2hqb,2hqc,2hqd,qiu,2hqo,2hqp,2hqq,2hqr,2hqs,2hqt,qja,dwg,dwh,dwi,dwj,dwk,dwl,2hra,3a7p,3a85,3a8l,3a91,3a9h,3a9x,2hty,3aa8,3aa9,3aaa,3aab,3aac,3aad,3aae,2hvq,c2ds,c2dt,c2du,c2dv,c2dw,c2dx,2hw6,e1s,e1t,e1u,e1v,e1w,e1x,2hwm,2hwx,7i2b,7i2c,7i2d,2hx2,b6tc,2hxd,b6tf,b6tg,b6th,qpy,2hxt,qqe,e3k,e3l,e3m,e3n,e3o,e3p,2hye,3aet,3af9,3afp,3ag5,3agl,2i0m,3agw,3agx,3agy,3agz,3ah0,3ah1,3ah2,2i2u,c2kw,c2kx,c2ky,c2kz,c2l0,c2l1,2i3a,e8w,e8x,e8y,e8z,e90,e91,2i3q,2i41,3ak5,2i46,b70g,2i4h,3akl,2i4m,2i4x,2i52,eao,eap,eaq,ear,eas,eat,2i5i,3alx,3amd,3amt,3an9,2i7a,3ank,3anl,3anm,3ann,3ano,3anp,3anq,gdmp,r2e,c2s0,4ftd,c2s2,c2s3,c2s4,c2s5,2iae,eg0,eg1,eg2,eg3,eg4,eg5,2iau,2ib5,3ar9,2iba,b77k,2ibl,3arp,r46,2ic1,r4m,ehs,eht,ehu,ehv,ehw,ehx,2icm,3at1,3ath,3atx,2idy,3au8,3au9,3aua,3aub,3auc,3aud,3aue,r9i,c2z4,c2z5,c2z6,c2z7,c2z8,c2z9,2ihi,en4,en5,en6,en7,en8,en9,2ihy,2ii9,b7ed,2iie,b7eo,2iip,b7et,rba,2ij5,rbq,eow,eox,eoy,eoz,ep0,ep1,2ijq,3b05,3b0l,2ikm,3b0w,3b0x,3b0y,3b0z,3b10,3b11,3b12,2io6,c368,c369,c36a,c36b,c36c,c36d,2iom,eu8,eu9,eua,eub,euc,eud,2ip2,2ipd,3b5e,3b5f,3b5g,3b5h,2ipi,b7ls,2ipt,b7lu,b7lv,b7lw,b7lx,2ipy,2iq9,2iqe,ew0,ew1,ew2,ew3,ew4,ew5,2iqu,3b79,2ira,3b7k,3b7l,3b7m,3b7n,3b7o,3b7p,3b7q,2iv4,2iv5,2iv6,2iv7,2iv8,2iv9,2iva,2ivk,2ivl,2ivm,2ivn,2ivo,2ivp,2ivq,2iw0,2iw1,2iw2,2iw3,2iw4,2iw5,2iw6,2iwg,2iwh,2iwi,2iwj,2iwk,2iwl,2iwm,2iww,2iwx,2iwy,2iwz,2ix0,2ix1,2ix2,2ixc,2ixd,2ixe,2ixf,2ixg,2ixh,2ixi,2ixs,2ixt,2ixu,2ixv,2ixw,2ixx,2ixy,3be8,3be9,3bea,3beb,3bec,3bed,3bee;-1,6,8,38xs,38xt,38xu,38xv,38xw,38xx,38xy,394w,394x,394y,394z,3950,3951,3952,39c0,39c1,39c2,39c3,39c4,39c5,39c6,39j4,39j5,39j6,39j7,39j8,39j9,39ja;-1,3,9,23n4,23n5,4h5t,4h68,35d,23ua;-1,4,9,3bk,3bl,3bm,3io,3ip,3iq,3ps,3pt,3pu,3ww,3wx,3wy,440,441,442,4b4,4b5,4b6,4i8,4i9,4ia,4pc,4pd,4pe,4wg,4wh,4wi,53k,53l,53m,24b,24c,24d,5ao,5ap,5aq,2bf,2bg,2bv,5hs,5ht,5hu,2iy,2iz,5ow,5ox,5oy,5w0,5w1,5w2,23gg,23gh,4gsw,4gsx,4gtc,4gtd,4gtt,634,635,636,2yo,4gzl,23nm,2z4,2z5,4h02,2zk,2zl,4h0i,4h0w,301,4h0y,4h1d,335,6a8,6a9,6aa"//}
		
		
		
		
		
		
		
	</script>
	<script type="x-shader/vertex" id="blockVertexShader">
		attribute vec3  aVertex;
		attribute vec2  aTexture;
		attribute float aShadow;
		varying vec2  vTexture;
		varying float vShadow;
		varying float vFog;
		uniform mat4 uView;
		uniform float uDist;
		uniform vec3 uPos;

		void main(void) {
			vTexture = aTexture;
			vShadow = aShadow > 0.0 ? aShadow : 1.0;
			gl_Position = uView * vec4( aVertex, 1.0);

			float range = max(uDist / 5.0, 8.0);
			vFog = clamp((length(uPos.xz - aVertex.xz) - uDist + range) / range, 0.0, 1.0);
		}
	</script>
	<script type="x-shader/fragment" id="blockFragmentShader">
		#ifdef GL_FRAGMENT_PRECISION_HIGH
			precision highp float;
		#else
			precision mediump float;
		#endif

		uniform sampler2D uSampler;
		varying float vShadow;
		varying vec2 vTexture;
		varying float vFog;

		vec4 fog(vec4 color) {
			color.r += (0.33 - color.r) * vFog;
			color.g += (0.54 - color.g) * vFog;
			color.b += (0.72 - color.b) * vFog;
			return color;
		}

		void main(void){
			vec4 color = texture2D(uSampler, vTexture);
			gl_FragColor = fog(vec4(color.rgb * vShadow, color.a));
			if (gl_FragColor.a == 0.0) discard;
		}
	</script>
	<script type="x-shader/vertex" id="2dVertexShader">
		attribute vec2 aVertex;
		attribute vec2 aTexture;
		attribute float aShadow;
		varying vec2 vTexture;
		varying float vShadow;

		void main(void) {
			vTexture = aTexture;
			vShadow = aShadow;
			gl_Position = vec4(aVertex, 0.5, 1.0);
		}
	</script>
	<script type="x-shader/fragment" id="2dFragmentShader">
		#ifdef GL_FRAGMENT_PRECISION_HIGH
			precision highp float;
		#else
			precision mediump float;
		#endif

		uniform sampler2D uSampler;
		varying vec2 vTexture;
		varying float vShadow;

		void main(void) {
			vec4 color = texture2D(uSampler, vTexture);
			gl_FragColor = vec4(color.rgb * vShadow, color.a);
			if (gl_FragColor.a == 0.0) discard;
		}
	</script>
	<script type="application/javascript">
window.canvas = document.getElementById("overlay")
window.ctx = canvas.getContext("2d")
window.savebox = document.getElementById("savebox")
window.boxCenterTop = document.getElementById("boxcentertop")
window.saveDirections = document.getElementById("savedirections")
window.message = document.getElementById("message")
window.worlds = document.getElementById("worlds")
window.quota = document.getElementById("quota")
var hoverbox = document.getElementById("onhover")
ctx.canvas.width  = window.innerWidth
ctx.canvas.height = window.innerHeight

/* Set this text editor to max width by copying this into the JS console:
document.getElementsByClassName("_1chbfei")[0].setAttribute('style', 'max-width: 100vw !important')
*/
var MathGlob = Math
function MineKhan() {
	let Math = MathGlob
	let setPixel, getPixels
	let textures = {
		grassTop: function(n) {
			let r = 0, g = 0, b = 0, d = 0
			for (let x = 0; x < 16; x++) {
				for (let y = 0; y < 16; y++) {
					d = Math.random() * 0.25 + 0.65
					r = 0x54 * d
					g = 0xa0 * d
					b = 0x48 * d
					setPixel(n, x, y, r, g, b)
				}
			}
		},
		grassSide: function(n) {
			let r = 0, g = 0, b = 0, d = 0
			let pix = getPixels("0g0g70ordrzz0u30g730wa4vzz0xnyl8f11lrk7315qj7jz1fh47pb6553365533033636350335403653650063306333633300635163503655353653535605335031350330553500033033366333433663663535336655335055335553353530355333033503300333336635353663650660554353355635155305303053556333333366353323553060365553063030663533555365534355335530")
			for (let i = 0; i < pix.length; i += 4) {
				setPixel(n, i >> 2 & 15, i >> 6, pix[i], pix[i+1], pix[i+2], pix[i+3])
			}
			for (let x = 0; x < 16; x++) {
				let m = Math.random() * 4 + 1
				for (let y = 0; y < m; y++) {
					d = Math.random() * 0.25 + 0.65
					r = 0x54 * d
					g = 0xa0 * d
					b = 0x48 * d
					setPixel(n, x, y, r, g, b)
				}
			}
		},
		leaves: function(n) {
			let r = 0, g = 0, b = 0, a = 0
			for (let x = 0; x < 16; x++) {
				for (let y = 0; y < 16; y++) {
					r = 0
					g = Math.floor(Math.random() * 30 + 100)
					b = Math.floor(Math.random() * 30)
					if (Math.random() < 0.35) {
						a = 0
					} else {
						a = 255
					}
					setPixel(n, x, y, r, g, b, a)
				}
			}
		},
		oakPlanks: function(n) {
			let r = 0
			for (let y = 0; y < 16; y++) {
				let a = (y & 3) === 3 ? 0.7 : 1
				for (let x = 0; x < 16; x++) {
					let mid = x === 8 && (y & 7) > 3 && a === 1 ? 0.85 : 1
					let rit = x === 15 && (y & 7) < 3 && a === 1 ? 0.85 : 1
					r = (Math.random() * 0.1 + 0.9) * a * mid * rit
					setPixel(n, x, y, 190 * r, 154 * r, 96 * r)
				}
			}
		},
		hitbox: function(n) {
			for (let x = 0; x < 16; x++) {
				for (let y = 0; y < 16; y++) {
					setPixel(n, x, y, 0, 0, 0, 255)
				}
			}
		},
		dirt: "0g0g70ordrzz0u30g730wa4vzz0xnyl8f11lrk7315qj7jz1fh47pb6553365533033636350335403653650063306333633300635163503655353653535605335031350330553500033033366333433663663535336655335055335553353530355333033503300333336635353663650660554353355635155305303053556333333366353323553060365553063030663533555365534355335530",
		stone: "0g0g40sywflr0wb8hdr0zdjj0f13tzldr3333211210112222221212222220012121001110111222222233232233222111122111212333312223222222211010131223331331112222110010112211122233323223332222212232223332233332021211001212211122222332222233232111232112200101332112211122111321122222222233332222221123322122",
		logSide: "0g0g60fl1ssf0l5j1fj0qftm2n0wa7mdb14cs7wf16az8xr3143304330341432315230523034133230223052313113324032313232301342413230325232314343134131524131432313422343433143230343243342324331053324324242433315332332414303333432303231430331343230533053135133424052303323531343314231333343143340313114334314134131331432",
		logTop: "0g0g90l5j1fj0qftm2n0wa7mdb0z2esxr15quebj189da7z1cpma671f7ppfj1hzyayn1012101120110111077776768667777017334454555544811738877776777471164766666666756107576445544674601646636666466471165764655656756116576465464674610657646666566460164764434556756116576666666674610757767777787460175454444444447117776676686677711011101120110211",
		bedrock: "0g0g509gy58f0e7f7r30o8fd330rkrev31627mkf3111124324211212133434341443012110110111412224232433202422111112014111121134433112221221102211014432344323443410222122211011213234421122344344442110121213211143334134410144431102221123442334402111321134111112343420211101234433211211234421121011044312301123",
		glass: "0g0g50ybfh8f0znkiyo12rzshr1au95hb1lytipr4444444444444443411111111111111341114111111111104114111111111110413111111111111041111111111111124111111111111110411111111111111241111111111111124111111111111112411111111111111241111111111111123111111111111412411111111111411231111111111111133323222222222233",
		cobblestone: "0g0g60muaccf0r0pekf0un11q711vr5rz1a8mosf1ef1r0f2144011454313543145330554330132314342143342101321132113232134310021354131154443152453321033543234313433211243215332233213541231321542213533311021543232233121341323231101221044532211235411035532354215434213323154331432332113244323212332143111311232121135432",
		mossyCobble: "0g0gb0muaccf0mupnnj0p38xdr0r0pekf0rbmj9b0un11q70w1wkxr0y07svz11vr5rz1a8mosf1ef1r0f4199211276438a9619a8812764813858398951644251118533852182851464110531183233866642a176895308948428981498852118851988111851664158385117641484642305126244558824124185442111155214698112124761318998127651764653885847488164588511858685851588531841183352111338a984",
		stoneBricks: "0g0g70p2gyyn0rkrev30tj2nlr0xf9ou70zdjj0f12psrnj17g8flr5666666666665550645455555444445065454444445534406434554345434330632334544334324053244333345324302222222222222220110011000111111166666650566666663555544065455554544544306435354445544320634344454444343053345433332322305443344322222220222222221111110000111111",
		mossyStoneBricks: "0g0gc0mupnnj0p2gyyn0p38xdr0rbmj9b0rkrev30tj2nlr0w1wkxr0xf9ou70y07svz0zdjj0f12psrnj17g8flrab3668863b88a680b9a28683a9999332ba926363996a2931b9792a679a979721b737793993697591a72397773632297075225752332277924410441110000444886bbba1abbbb6883aaaa991ba9aaaa6a99a9971b97a7a399aa99351b797992a99997371a689a97777573371a897799755223791722757754000041110004400",
		bricks: "0g0g90vz62nz0yhavi712oqn7j13rinsv173m8lb193f4zj1b1w1rz1d7u7sv1j1u51b7742888777458777443513444435144410060033100503112256522225565222887747458777474214444315133333151341110600133105522225565522225677458887474588774435344444153444110511331106133325565222225652224777474287774745144444353444441501111106011111065222225655222566",
		coalOre: "0g0g70ehg7wf0hjr9j30j7xaf30sywflr0wb8hdr0zdjj0f13tzldr6556544543445666554536666553335454331453344511556665655105655644455443346545645556553215542143464552111065105555433556663334466661156543215455645565354100056665354514334663354455555666634106655443366412111054665105556005455554456665566544455555554655555566",
		ironOre: "0g0g80sywflr0wb8hdr0zdjj0f13tzldr1cpl2bj1gbvabj1o4exa71qwyvb33223211210112333221203333220002121005120011265223332322642322311122110013212312223220762217510131227655432542222100223330001133336523210762122312232021644423332021251001330021122222333301643322110033167666421332542223442122221123332233211122222221322222233",
		goldOre: "0g0g80sywflr0wb8hdr0zdjj0f13tzldr1x01czj1y6gem71z13ncv1z141z33223211210112333221203333220002121005120011265223332322642322311122110013212312223220762217610131227655432542222100223330001133336523210762122312232021644423332021251001330021122222333301643322110033167655421332642223442122221123332233211122222221322222233",
		diamondOre: "0g0g80h634zj0sagdtr0sywflr0wb8hdr0zdjj0f13tzldr1845xbz1ndl24f5445433432334555443425555442224343221342233461445554544604544533344332235434534445442764437632353447611054104444322445552223355556145432764344534454243600045554243413223552243344444555523605544332255367611043554604445004344443345554455433344444443544444455",
		redstoneOre: "0g0g90sywflr0wb8hdr0zdjj0f13oi67z13tzldr15wexa71b68mbj1f24cfz1yr4gsf4224211210112444221204444220002121005120011285224442422832422411122110014212412224220862218610141227655342532222100224440001144448524210862122412242021633324442021251001440021122222444401834422110044168655321442832224332122221124442244211122222221422222244",
		lapisOre: "0g0ga04hvenz04hvl6n04ihywv066fd3306r2ozj08z4sfz0sywflr0wb8hdr0zdjj0f13tzldr9889877876778999886669999886668787454386777813889889926329989977788776679867978889866428862576797861242398238888723679978767799993189872643386678998687222236258686627661237725788300799668893588779906612366339998700381039799887783339899877788888899888888899",
		emeraldOre: "0g0g7004swsf06mdmv30sywflr0wb8hdr0zdjj0f13tzldr1ohjdhb5445432232334555443445615442334343223310333422445555225555546133344361324555104445441061243255353445551054434444332232552323355555545461442244534444441053615224243433223310361344444556155551044223455103322553261334455444344441045554455433344554443544444455",
		coalBlock: "0g0g501e50xr03md24f05ul3b308mtq0v0bf3ri73322122002210012222121000210123321000122000022221001243222202210001233222100210020222221000001220132211001122222022210122343221002110123322210000012123221103200212122210002211232102112210012230002113432123322000123420023221000123210012221001222212212221000",
		ironBlock: "0g0gb1dawbnj1fj5rlr1hrdssf1m7r1mn1nlyvwf1pa4wsf1qe8xdr1s2ey9r1t6iyv31tqkz5r1ver01r32233333333222232aaaaa9998777772277777777777777105555555666444402aaaaaa999777771277777777777777105555566664444402aa9999977777771277777777777777105555555566644402aaaaaa999977771277777777777777105555556666444402aaaa9999777777127777777777777712222222112111111",
		goldBlock: "0g0g91kr8um71mphb0f1w77ain1xakkqn1ypvwu71yr43jz1yzk7pb1z0cef31z10mwv2222332223333221285577888776688125664877623324812564877462224471374777462264467137777462267762302877444667762330287444664462232037444664466222613744664466662461364667766666742032667762262776203267762332446261334462332666224132322332662264701101100011001100",
		diamondBlock: "0g0g90434min061d2in0h634zj0l2fpxb0sagdtr0vckf0f1845xbz1ndl24f1z141z33333223332222331378866777664477138445766432235713845766543335561265666543345546126666543346643203766555446643220376555445543323026555445544333412655445544443541245446644444653023446643343664302346643223554341225543223444335123233223443345601101100011001100",
		redstoneBlock: "0g0g50vx660v153407319j36671gh49a71runlz34444444444444444433433222334333443342202222232344332311001120234443211012011244443210000000042344302100000011134421100000000122442231000000111344324110210111234432110004001224443321101001110344322211111122224443124211022323443334433223333344444444444444444",
		lapisBlock: "0g0gd05lqqkf06zt0xr07js8hr07tw35r084kzr308e6ein08e99fj08yjpq708ys8ov0an2j270c0w4cf0dp94hr0fdf5kv98999989cb848484878b78736733677197b8867767623765967877377863366597687666378a63759a77776636a7736197a767676236763596763666a6233625c636636376632775c633687363332371963237873676327186672236338763619763722332677630877633332336667143766633633367708111111610220000",
		emeraldBlock: "0g0g606lfrb306mdmv307ei5fj07xmdbz0iaro5b10c5ptr0000000000000002055555454551144305000000200002430404555411114243050500000002425305050555445212130405054411421203040405451142120305040411020202130404041122120213042105410112420301212222222242030405510000441213012222222222224301011001110014532333333333333332",
		tntTop: "0g0g704qh5a70nyecxr13jyl8f14a4flr1d4tukf1otd8u71szz8jj5665566556655665622462246224622462136210012300234431403344004433566006655660566562246204121402246211120000231023443341000111403356651000000506656211020001140224621360200120112344331031140344335661560500611665621462146124612462236223622362234433443344334433",
		tntSides: "0g0ga07ipw5b0fbhzwf14a4flr1d4tukf1gwtvcv1ldqupr1otd8u71pk09vj1szz8jj1z141z38863886388638863663266326632663266326632663266326632663266326632663266326632663295775577755777799711071550711059745055115157177795717717115505479750571550550759444444444444444433223322332233226632663266326632663266326632663266326632663266323332333233323332",
		tntBottom: "0g0g413jyl8f14a4flr1d4tukf1otd8u72332233223322332300130013001300130013001300130011111111111111111233223322332233230013001300130013001300130013001111111111111111123322332233223323001300130013001300130013001300111111111111111112332233223322332300130013001300130013001300130011111111111111111",
		acaciaLogSide: "0g0g60ma181r0oi99fj0pcavi70t8nim70y9464f139ktmn3143304330341432315230523034133230223052313113324032313232301342413230325232314343134131524131432313422343433143230343243342324331053324324242433315332332414303333432303231430331343230533053135133424052303323531343314231333343143340313114334314134131331432",
		acaciaLogTop: "0g0gb0j7rlz30kvxmgv0ma2nen0o889hb0t8nim713rcxdr16jehof18hk3r31c3oo3j1fprugv1hy2osf432332211231433449999898a889999329556676777766a2395aa999989996910869888888889782197986677668968318688588886886932879868778789784487986876868968448798688887886833869866567789782287988888888968219799899999a96811976766666666691099988988a8899933412233444322114",
		acaciaPlanks: "0g0g711t8qgv13rcxdr16jehof18hk3r31c3oo3j1fprugv1hy2osf5456666656666652554423455544553345554543333445522112210011010010563666636665443545543432344555543345444255544333001121000011121056654466656666535455554333434332654433334444335300122100012110006556655366646566445533433555544443345432554333330110012221010000",
		birchLogSide: "0g0g80f1fcov0qqliwv1gxap6n1o60u7z1ptrf271uar6db1uum5mn1z141z36643366634663366346666777634443677744367666636777732100136777737366321101377631211336344363331001266344677766532343777777334556376336775577775777764455577766336336777766634477636777767777577634436633667553210026677763443100000133377761132116331677764336336",
		birchLogTop: "0g0ga0mk6h3316m5am719xxgqn1cg9ce71f8hx4v1jowirj1nv4jcv1nvimm71tgjy7z1z141z39818811001809889966665657556666816223343444433718627766665666360153655555555645106465334433563580535525555355368154653544545645995465354353563599546535555455358853653323445645115465555555563510646656666676350064343333333336016665565575566688901188999811009",
		birchPlanks: "0g0g717znmrj19xxgqn1cg9ce71f8hx4v1jowirj1nv4jcv1nvimm75456666656666652554423455544553345554543333445522112210011010010563666636665443545543432344555543345444255544333001121000011121056654466666666535455554333434332654433334444335300122100012110006356655366636566445533433554544443345432554333330110012221010000",
		darkOakLogSide: "0g0g60besef30dcwlbz0e6y70f0hj7ev30klcs8v0oho0e73143304330341432315230523034133230223052313113324032313232301342413230325232314343134131524131432313422343433143230343243342324331053324324242433315332332414303333432303231430331343230533053135133424052303323531343314231333343143340313114334314134131331432",
		darkOakLogTop: "0g0gb08ml79b0auqebj0dcmqdb0e6y70f0f117gf0g4r4730h8wirj0hj7ev30kb0idb0lz2akf0n393wf741441100140744779999898a889999419225565666655a1492aa999989995903859888888889681096985566558958408588288885885941869858668689687786985865858958778698588886885844859855256689681186988888888958109699899999a95800965655555555590399988988a8899944701144777411007",
		darkOakPlanks: "0g0g70bejy0v0dcmqdb0g4r4730h8wirj0kb0idb0lz2akf0n393wf5456666656666652554423455544553345554543333445522112210011010010563666636665443545543432344555543345444255544333001121000011121056654466666666535455554333434332654433334444335300122100012110006356655366636566445533433554544443345432554333330110012221010000",
		jungleLogSide: "0g0g90h96cxr0htdywv0m9k4xr0ne277j0orqc5b0rkbldr0sxvim70wunksf0ys83cv4688422222666444444114414441001111137510011441866644668842422224146644411143573444422235311010006646442222444886101000466412222444688411068844441122575311222100755444666664355741100112241201661144866643341111623533422111444644111004661664444664122244442222",
		jungleLogTop: "0g0g90h96cxr0htdywv0rkbldr0ys83cv160fym7188mku71batekf1f77h1b1h5ei2n3212210011213223377776768667777217444454555544812748877776777470164766666666756107576445544674620646646666466472165764655656756336576465464674633657646666566462264764444556756106576666666674600757767777787460175454444444447117776676686677722310122333211013",
		junglePlanks: "0g0g70sxkd1b0xdxkov160fym7188mku71batekf1f77h1b1h5ei2n5456666656666652554423455544553345554543333445522112210011010010563666636665443545543432344555543345444255544333001121000011121056654466666666535455554333434332654433334444335300122100012110006356655366636566445533433554544443345432554333330110012221010000",
		spruceLogSide: "0g0g60csc9vj0cskpof0dmmb5r0geuxof0lf4i670nnb4sf3243304330342431325130513034233130113051323223314031323131302341423130315131324343234232514232431323411343433243130343143341314332053314314141433325331331424303333431303132430332343130533053235233414051303313532343324132333343243340323224334324234232332431",
		spruceLogTop: "0g0g80ix87pb0nnb4sf0p1n6db0qzu7zz0v5xypr0xy569r106bshr11ueyv31012101120110111066665657556666016223343444433711627766665666361153655555555645106465334433563501535525555355361154653533545645115465353353563510546535555455350153653323445645115465555555563510646656666676350164343333333336116665565575566611011101120110211",
		sprucePlanks: "0g0g80nnb4sf0p1n6db0qzu7zz0v5xypr0xe36rj0xy569r106bshr11ueyv36567777767777762665523566655663356665643333556622112210011010010673777737776553656653532355666653356555266655333001121000011121067765577777777636566665333535332765533335555336300122100012110007367766377737677556633533665655553356532665333330110012221010000",
		sand: "0g0g61m6x62n1nb9nnj1opn5dr1r80f7j1scbi0v1u0izgf4223213232132313122121130142502432011422222121122331213133132122125213232322122321223332123122121421151211022121212212212111242112322310131232124212221120212231202321232232012311223212331112121213132145321123323230232323221223235332323203223232332321223232",
		gravel: "0g0g80rufq4f0vqwlbz0zxiprz125i9rz15rvcan1627mkf1d0twqn1dackxr0341152512122521522122312102333522103133522351352232321522512322132741122210253202140133526552213104226515530122553253522311225353521223310256122311652152322132123553102521325022533562113225212132222537415525331025232422215235323311243310351274122232321212",
		blackConcrete: "0g0g40149on3028826702882yn028dp8f1330112022012232303130022112212111032203010022012122012222321221011223213030101033110011212233120230013131003200032022012002002112233122202312230200102211312102222122132011021201223320211021220121122122321331201102120210001220112022023302312210123220102110",
		blackWool: "0g0gf0149on3028826702882yn028dp8f03cc2rj03cc3jz03chptr04gg3cv04glqf305kk3y705kpr0f06oo4jj07ss54v08ww5q70a106bj46348b45ab13993299eebb7742570367bc77dc97bcbbdeb996bc768c47cc96ec9749bb115953bb31314c414641672547eebb8879bea7eeb966eebacc45bca9ccbb35ca4657528733577b117949ee7beeccbbecbacb799839349966bb445911796611cd318b9bee92badecb9717bc77cedc97c99beb559b6424c946cd76ac44bc",
		blueConcrete: "0g0g30c98pof0c98qgv0c9ecqn1000001101000201011001000101120101211111010200000001000110100100220110011001121111001100100100010200102101101000000011110001101010101011020111110000000101121111101100100100010110111010210111001101000100000111110100101111000120000010100000110001200110010002",
		blueWool: "0g0gj0c98pof0c98qgv0c9ecqn0c9edj30ddcr270ddidbz0ddie4f0ehgrnj0ehgsfz0ehmepr0ehmfi70flkt1b0flqfb30flqg3j0flw2db0flw35r0gpugov0gq02yn0gqbd3335237c44ac12992289iidc6632460256de67ge96cebbhic985ce657e46ee85ie9648cc114942cc21214e413541562436iidc7769dia6iic955iicaee34cea9eecb24ea4546427622466d116949ii7biieecciecaed699728249955cb344911695511eg217c9bii92bahiec9617be67eigf86e99cid449b5324e935eh65ae34de",
		brownConcrete: "0g0g30pl5gqn0qp3u9r0qp9hbz0211211202222221222122211211122121011102222222212211200222112101121111211111222121222122122221201212121222112122222221220222222122221201121212022122122110221211122221211011221212121010121011111212122221121221222212122112112112211010222111121211220222221122",
		brownWool: "0g0gi0qp3u9r0qp9hbz0rt7uv30rtdh4v0sxbunz0sxbvgf0u1a8zj0u1fv9b0v5e8sf0v5e9kv0v5jvun0w9i9dr0xdgmwv0xdm9z30yhkni70yhq9rz0zloo3j0zluadb35228d45bd12aa219bhhed7721570257ef77gfa7dfccghdb95df758f47ff95hfb749dd115a52dd21214f413541571526hhed887aehb7hhda55hhdbff25dfbbffdc25fb4557518722576e117b4bhh7chhffddhfdbfe7ab82924bb55dc245b116b5511fg218dachhb1cbghfda717cf77fhgg97fabdhe55ac5214fa25fg75bf24ef",
		cyanConcrete: "0g0g305objsv05obklb05oh6v31112010122111202100121222111122012212211101111202102221210222122211111211221111011021102021212212220211021022022201210110010212210211110202101010201110112020221222112102111202212110222110211221001010211001221212202222122111221102211100222112011211120220211",
		cyanWool: "0g0ge05obklb05oh6v305omt4v05omtxb05osg7305oy2gv05p3pj305p9bsv05p9clb05peyv305pkl4v05pklxb05pq87305pq8zj242269347912662167dda95521450145ab55cb659b88cd97649b546b35bb64db7536991146419921113b312431451424dda96656ad75dd9644dd97bb249b77bb9814b73445416521454a115737dd58ddbb99db97ba56762623774498234711474411bc116968dd7187cdb965158b55bdcc65b679da44684213b624bc547b23ab",
		grayConcrete: "0g0g20ehlvr30flk9a70000000000000000000000000000000000000000000000000000000000000000000000000000100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000100000000000000000001000000010000",
		grayWool: "0g0gd0ehlvr30flk9a70flpvjz0flpwcf0flvim70gptwxr0gpzjzz0htxxj30hu3jsv0hu3klb0iy1y4f0iy7ke70iy7l6n333359337803663157cca85531350135ab55cb658b88cc87539b545b35bb53ca7535990036329930103b303330350335cc995556ac75cc8633cc87ba339b77ba8813a73435305532355a005737cc58ccab88cb87ba56753533773498333700574300ac205968cc7087cca865058b55bccc55b679ca33684313a634bc537a33ab",
		greenConcrete: "0g0g20k2mku70k2s73z0001000100111100101010100101101101101100111010010111001001011000100001100011000100101010110101111010000001011001001000100001010110101110010011010000101011110000010110101000000001010000110101011101000111110011101010011000111100001100011000000111101001101100",
		greenWool: "0g0gh0k2mku70k2s6bj0k2s73z0l6qjun0l6w64f0l71rlr0mb054v0mb5qm70mb5ren0nf9qf30nffcov0ojdq7z0ojjbpb0ojoxz30pnnbi70pnsxrz0rw0y6746447c45ab1499419aggcb8841580168ce88ee98bebbfgba96ce867e48ee96gda849cc125953cc41114e424642681546ggcc7789cga8ggb966ggbaed45ceaaedbb15da4658517843586c21894agg8bggdebbgebaec89a749449966cb445a116a6621de327c9bgga1bafgdb9828be88egee98e9acgc559b6414d946ef86ad44ce",
		lightBlueConcrete: "0g0g3090ti4f090z4e70a4xipr2120111111121222222121122112211121121211112221221111102221122212112021111111122111112111112121211222221111122121212121112021122112211121211211111121220111212121111121222001122211222221022122111011221111111021211221211211121112212111111122121111211112222111",
		lightBlueWool: "0g0gq090z4e70a4xipr0a534zj0a58r9b0b974sf0b9crun0b9ie4f0cdgrnj0cdmepr0cds0zj0dhqein0dhw0sf0dhw1kv0em01dr0em5nnj0fq9o8v0fqfain0gudou70gujb3z0hyhon30hynawv0hynbpb0j2lp8f0j2rbi70k6pptr0latpmn7b57fm89ik26ff63fippnkdd739d04benodepogdkojjppkifblodcfo8doofbpoie8fml21af95mm62428o817b81bd397cppmlffefnpidppkgbbppkioo79loiiookj4aoi8cad93fd55adcn22dh8ippejppookkpokiondfif6f68hhbcmj78ai22cicb22op51fmfjppi3jippokfd2ejoeeoppofdofilpn9agjc738og7copebio78no",
		lightGrayConcrete: "0g0g20yjgg730yjggzj1000110001001010100010000000011101100010001001011010001100101010001000000000000010100000000100010100000000001010100010001000000000100000110000100001100000011101110001001011001001001001011000000000011001001001001010000000010000000010100110000000001000001001",
		lightGrayWool: "0g0gi0yjgg730yjggzj0znkgsf0znkhkv10rohdr10roi6711vshz311vsirj11vy5tr12zwjcv12zwk5b1440jy7144670f1584kjj1584lbz16c8l4v16c8lxb17gclq745339e55bd1399329bhhfd7732570257ff78hfa7dfcchhdb95df769f57ff95hfb759ed115953ee31215f514551572537hhed9979fhb7hhda55hhdbff35dfbbgfdc25fb5657529733577f117b5bhh8chhfgddhfdbgf79b93935bb56ec355b117b6511fh319e9chhb2cbhhfd9718cf78fhhg97f9bdhf55ac6325fa36fh75bf35ff",
		limeConcrete: "0g0g30ppd5a70ppirjz0qth5331121111111100111111111110111110111010211100110111211111211101111112111111111111101110111011110211011011110111110102111110100111000110112112110211112112112111212111111111111111011111011100101111111111212111111111112010011011221111111110111120011110111101111",
		limeWool: "0g0gg0ppirjz0qth5330qtmrcv0rxl4vz0rxqr5r0t1p4ov0t1uqyn0u5t4hr0u5yqrj0v9x4an0va2qkf0we143j0xi53wf0ym3hfj0ym94hr10uh5of35237c44bb1299228affcb6632460257cd67ed96bdbbefba85bd657d46dd85fca748cb104942cc21214d403540562435ffcb7779cfb6ffb955ffbbdc34bdbaecbb24cb4546427622465c01694aff7bffcebbfdbbec69a728249955cb344a105a5501ce207c9bffa2bbefcb9607bd77dfee86d9abfc449b5324c935de75bc34cd",
		magentaConcrete: "0g0g419jw2rj1anugan1ao02kf1ao03cv2233313332221332333333233213322333223332331233333313323103121223222131233211303233130230322231223302323103002220333103232232223333313231221331233333231232212303302330122232333333332123320111033031332321233232303322232223332223231233212323332233222231230323",
		magentaWool: "0g0gs1ao02kf1ao03cv1brygvz1bs435r1bs43y71cw2hhb1cw83r31cw84jj1e06i2n1e0c4cf1e0c54v1f4ainz1f4g4xr1f4g5q71g8ej9b1g8k5j31g8k6bj1hcijun1hco64f1hco6wv1igmkfz1igs6pr1igs7i71jkw7b31jkw83j1kp08ov1lt49a71mxdwxr6945dl77ij14ff43ehrrmjba537a039cmoacqogajojjqrjhe9koa9do7booe9rnhc7elk118f74ll41317o7169719a275arrmkddcfmribrrjg99rrjion57koihonjj38ni798a72db448bam11bh7hrrcjrrnojjrojiomafhd4e47hh99lj578h11ah9911nq41dlfjrrh2jiqrnjfa1cjoccorqpebofhkrm78gj9537ng59oqc9in57mo",
		orangeConcrete: "0g0g21p59iwv1q97wfz1011110111101111111011111110000111101110100111111110011111011001001101110110111111111110111111011111101110111111110111111111111111011110111101111011101101101111010010111111110110101110010011101111111010101001101111111011111110111111111001111111101111111111",
		orangeWool: "0g0gm1q97wfz1rdbw8v1rdbx1b1rdhjb31shfwu71shfxmn1tljxfj1tljy7z1tlpkhr1upnytb1uptl331uptlvj1vtrzen1vtxlof1vtxmgv1wy1m9r1wy1n271wy79bz1wycwe71wyijgf1wyo5q71wytssf46239f55de02aa219dllhe8731570268hi79kib7eieelled96fi779i58ii96lhd859ff005a52ff20205i504650671537llgf998ahld8lleb66lledih35fiddihee25hd5757519822587h008c5dll9ellhieeliedih7ad92925cc67fe355d007d7600hk209faelld1edllhea709ei89ilkj98iadflh55be7315hb37il86dh35hi",
		pinkConcrete: "0g0g31ltks8v1mxj5rz1mxj6kf1122212121112211111211211211122112111221111111121211212111122211111112112121112111111111111112111212221121111111212211112101110212211211122111211112212111211110211211211211111111121212221211121111112212211121211111211212211111111111121112111211212122122111",
		pinkWool: "0g0gv1mxj6kf1o1hk3j1o1n6db1p5r6yn1q9v6rj1q9v7jz1rdz7cv1re4uf31si37y71si8u7z1tm78jj1tmcutb1tmcvlr1uqgven1uqmigv1uqs4qn1vuqj271vuw5bz1vuw64f1vv1se71vv7fgf1vvd1q71vvd2in1vviosf1vvipkv1vvobun1vvocn31vvtywv1vvzlz31vw588v1vw591b6a46em78jk25gg53fjuuokdc638c03adoqcesqhckqkktukjfalqcbeq7dqqfaupjd7fml219g83mm52327q716a71ac386buunleedgoujduukhaauukjqp68lqjjrpkk39pj7b9c83ed439dbo12di7juuekuuprkkuqkjrocgje5f57iiabmk679j22bjba12ps31emgkuuj3kjtupkgc1ekqdequssfdqgjluo89hkb637ph6bqtdajp67oq",
		purpleConcrete: "0g0g40qo16v30rrzke70rrzl6n0rs57gf3222322033323333333312320220233231302222232332333202332233033330333322320012333323333330233022223332223332223232323303323233332332021220323110033223333322032332312323332322322202232223033232221223233023333332022233332332233232023333233223032323332323323332",
		purpleWool: "0g0gm0rrzl6n0rs57gf0sw3kzj0sw3lrz0u01zb30u07lkv0u07mdb0v45zwf0w84dfj0w84e7z0xc8e0v0xc8etb0yg6scf0ygcem70zkasxr10o96gv10o979b10oetj311sd72711sd7un12wh8fz154uxhb47349e45ce13aa32acllfe8742570279fh79jhb7ehddkleca7eh779h48hha7lgc94aee116a52ee31214h414741771547llfe999aflc8lleb77llechg45ehcchged26gc4767519832687f118c4cll9dllgheelhechf7ac93a34cc77ed446c117c7711gj219eadllc1dcklgea719dh99hljia8hacelf56bd7424gb47hk97cg44fh",
		redConcrete: "0g0g112voa9r0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		redWool: "0g0gd12voa9r13zmnsv153l1bz167jev3167p14v17bnenz18fls7319jprzz1ano5j31ano6bj1brmjun1brs64f1f3yku7241258227712662157cc9754212401459b45bb647b77bc77548b445b25bb54ca7525881036218821112b202420441224cc8855569c75cc7644cc77ba228b77ba7713a724342155113549015627cc57ccab77cb77b946752522664487223711474401ab105867cc7177bca764057b55bcbb55b678c923674212a624bb547a229b",
		whiteConcrete: "0g0g31ktui9r1ku04jj1lxyi2n1121212211221121111221111121122111211111121112111212112211111211212222111111221112211112101110211111122211211211111111212221111112212121212222111121122211111111222111111112121222121111111111211121221112221111121222121112212122111221211212111121221211221212",
		whiteWool: "0g0gn1lxyi2n1lxyiv31ly454v1n22inz1n22jgf1n285q71o66j9b1o66k1r1o6c6bj1paajun1qeekfz1ricyrj1riil1b1smgykf1smmlmn1tqkz5r1tqqm7z1uuozr31uuumtb1vyt0cf1vyynen1x2x0xr1y711j37a56dj89hi26ee63egmmliba639a04acllacmlfailiimmigeajlaadl8blleamlgc8ejj219e94jj62429l817a81aa396ammkjddcelmhbmmifaammihll69jlhgllii49lh8a9a93db549bal12bg8gmmcimmlliimlihllaegd6e68ggaaji689g22agaa12lm41djeimmg3ihmmliea1cilcclmmmeblegjml99fia638lf6almcahl68ll",
		yellowConcrete: "0g0g41to1w5b1us09of1us5vy71us5wqn2111111122222221232021021213122222211020112110121211022201012212122222312211221122213110202011133121132211112221221211211111112120231210211111201132001211212111211102220222021102211223011100222121202222222132111211111112111112021121120222221222011012122121",
		yellowWool: "0g0gj1us5vy71usbj0f1vw9wjj1vwfitb1vwfjlr1vwl5vj1vwl6nz1vwqsxr1x0p6gv1x0utj31x10fsv1x10glb1x163nj1y54h6n1y5a48v1y5a51b1y5frb31y5fs3j1y5lf5r45239e44bc0299219biiec7731470158eg78hga7cgcchicb95dg759g47gg95ifb849ed005942ee20104g404540571436iied9989eib7iica55iicbgf34dgbbgfcc15fb4557419722576e007b4bii8ciifgccigcbge79b92924bb55ec345b006b5500fh209e9ciib1cbhifc9708cg88gihh97g9bdie45ac5314fa35gh85bf34eg",
		bookshelf: "0g0gt03fxnnj04laqdb0a0ot1b0b6j6db0c8r6db0deww730df88ov0egz6rj0gpo9330ht5kov0k20av30nf40zj0pnc1dr0qoh8fz0sy416n0w8kcn30wc5n9b0yicu0v11vb08v11vskcf13z03jz16atkvz17fehvj1as1ce71czhmv31e50qv31g6nvgf1gbtpfj1ks44qnommllhlllmmmmlmoo44477444772534oo799kk999ni9637olkffqk99gpjk631lsqffqk64gnik631soqfdqf6gcngf651ookd9kf3c7igf350mlorrsssroorrroolollmmhmllmmmllhoo77227cb7427724ooqk763gck99cb97olpj063gckq4gc10hsqk063a8fqkgcpjsoqf065a87kqgc10omkfe35ccefkcb03oorrsssroorrrrooo",
		netherBricks: "0g0g706o77cv08w9lhb0b4bzlr0dcedq70fkb4sf0gof6670iwn6kf0000000000000000556515666555165532340433333405333432133223321333000111000001110015666544155545540543333306433333143333221433243211000001110000014416641644164414330433063304330423143314321333140111011101110111464414666644166433330433344303333322033333330333",
		redNetherBricks: "0g0g70c7i51b0efew3j0fjiwov0ive1a70nbiubj0svgd1b0v3ir5r0000000000000000556515666555165532340433333405333432133223321333000111000001110015666544155545540543333306433333143333221433243211000001110000014416641644164414330433063304330423143314321333140111011101110111464414666644166433330433344303333322033333330333",
		netherQuartzOre: "0g0gc0hs27zz0m7vq4f0m81d6n0ncb0u70rsft330u2845b0v4m7sv10p0npb1bug2671e4e1vj1n1fv9b1smb9xb1312426644044643344320246610442164643068a921424676466baa866314246766ba8674662643166895678a8544641466565ba95146866310289856642b9742469b814466ab862467ba624646b952364a950268665602426852108b61623214642649a9164941364667689238976124667423804646442246624630246644",
		netherrack: "0g0g70hs27zz0m7vq4f0m81d6n0ncb0u70rsft330v4m7sv10p0npb1312425544044543344320245210442154543012432142456545423545531424565424566455254315431566554244541452054554214565531024541154246642454221445541452456540245455112354554025655200242254210254102321454254122154541354556512234565124556423204545442245524530245544",
		netherWartBlock: "0g0g60of09vj0suze9r0xana4f1539r7j1brbain1g7rcvz0122001222532010222235202110022112111222202202320122201003202242042220021211122103224300222201201022220122252002210210211223102220000221222200222022221132210202012201104100222102201012211021042230122022012022212012022002220222202202220234022205220322022302",
		quartzBlockBottom: "0g0g31sm5mv31tq9ngf1tqfbb32222221111000222121111000002222111100000012222110000001122221110001111000110000011100000110000011111222200001111222222211111111222211000112222220110012222222211222222222210000022222211000000222222110110112222111100112222221100101122222111101222222222210000",
		quartzBlockSide: "0g0g61p9z6kf1qe37y71sm5mv31tq9ngf1tqfbb31uujcov5555555555555555543333222224444153322222234444304222223344433330423333222332222153322222332222215333444422223330544444433333333054433222334444405332234444444430544444444432222154444433222222405444332332334440533322334444443042323344444333311100011111110000",
		quartzBlockTop: "0g0g61p9z6kf1qe37y71sm5mv31tq9ngf1tqfbb31uujcov5555555555555555543333222224444153322222234444304222223344433330423333222332222153322222332222215333444422223330544444433333333054433222334444405332234444444430544444444432222154444433222222405444332332334440533322334444443042323344444333311100011111110000",
		quartzPillar: "0g0g41qe37y71sm5mv31tqfbb31uujcov0202031312130212020302130313031202131313120313020313130213031313131303120302121313020312031203131302131313020303120313031303130312130303131303120213131302131212131312130202120313021213120302031302120313031303130202130303131303120313031213120212131302121202",
		quartzPillarTop: "0g0g51p9z6kf1qe37y71sm5mv31tqfbb31uujcov1021223242413020222122211221122002223434434322223123443344443211113412222221431242442344443244222243242222424423423324244142441222442424324234143244242211423322224423334432442421341222222143111123444444443213222234444443222002211222122112221203142423220200",
		chiseledQuartzBlock: "0g0g61p9z6kf1qe37y71sm5mv31tq9ngf1tqfbb31uujcov0444404333022440043331222204444003322111000444300222223004443331023011101110022103315544432202200110441100220000554444144033344544433204314444440111230011441101054044444432154104400110111004401444454005544440133321100004443002323155440333300444414444132220",
		chiseledQuartzBlockTop: "0g0g51p9z6kf1qe37y71tq9ngf1tqfbb31uujcov0334314232133420021100022000112002044203204421200204120420412021020113032020003102233304212233200000000421110000323433442223344422222222222222220000001321000001044343142143222104011204214110201302130420313020120234032023403002111003201100400222314222133420",
		chiseledStoneBricks: "0g0g70oigd8f0qqoef30sz21vj0xf6vpb0yjgikf11vskcf17g711b6666655666566562644424444224444054110000111123205206665566561530640654434442154064064322334315405205430005421630540632000643062052054300053206306215435655420630641644545432053064163232322215406421110000011530556655666655543053343234433232202000000000000000",
		smoothStone: "0g0g70wb8hdr0yjgikf12zwkxr17gcnb318kgnwf1asop331d0wq9r1011002200220121054556666553445204334454444555501666455566655442255444545666645006555555554343412556664665545550243343443434466116656545555455620555554566656661054544334454454215555666665566622444566454433452165445556555455104456665566544401022112221000121",
		soulSand: "0g0g60egz94v0ht5n270k181z30oho3jz0sxyiv30xeekfz3130033202100434433135531100234004241451321012411423432542212230032442154212211332234104322433212002314322315332220023322345513032322211233445304302332013540423202342330242132302341043213032020354044321232020431445421112202350345131123302354202432103212415",
		glowstone: "0g0g80u1fugv0v5phbz10pn01r11uj6db1kqv1tr1x1ncov1y6jzlr1y711j35420045440276423654011240346654024032201131054033034542017510033014766405664136502566552454236751004554020132450531024010352320465230213276501576442654346640335420454220452013000320356304012311354016754036520357660354215764034654201003242013154216521100013",
		andesite: "0g0g60sywflr0wb8hdr0yjgikf11vsl4v17gcnb31asolxb2114332104423221245323445330122411334410122443224410133445433231235442223333211433323243210013432324542104543333423310154332333433114143343224533143342221154333332321101544332201331254422332333443443233212331543333334533112233301244323223541321322323234432",
		diorite: "0g0g60xfchz311vskcf19of1fj1gd8su71ktouf31smgykf1222352233524355201322135345543151355101325543235255312553213225351243153532255245355541332335235332455214554102243123234555521232203255443244250155213551234541244310134335513055510144221512352542543554223223212343125454353242115521455321245235554124421255",
		granite: "0g0ga0l56fi70plgu0v0yhw0sf1424tmn17eb8cf1aqna4f1e3al8f1e3x7un1jnje2n1qczoxr7434244344046445431548244224422341444335249241464143446145532344234232113754334244255342143347242445524442555322424474302155243346344255522344245535242552464245557314243844212555415442024425030323244424324439435524312355344448553215435547245544733324244425",
		polishedAndesite: "0g0g90oilzi70sz23gf0v7a3270yjgjcv10ru60v11vyakf11w3ugv19okmwv1e4v30f7878888888788785843334442443134084444443376644307416763343446440844442456433334083344333424433318444634666554320833433332123444184562444466776608434433443344540844667633366444081444444664466208466654333134760844433334465334083333664444334406100000000110000",
		polishedDiorite: "0g0g80qqu0ov0xfi5tr11vy6m71asubcv1f94t1b1jpkttr1o60w731ri7bpb7776677777666774764556657643564166764466577434506565333565454441675334576435457176544567733456607566767655346450744765756564534063556655467534516566544565544761664334655465666075673555775644517557654375466340745654576435744072445566545654512101110001100110",
		polishedGranite: "0g0g90l56fi70plgu0v0yhw0sf1424tmn17eb8cf1aqna4f1e3al8f1e3x7un1jnje2n8888786866866565843344345444334374744554442446418444243334553342844444453344443262343344443734428345543644444431844444423445544263422344554433636444433443344442734444444464334284473344244442318455444445543341633443264434455264443444334447412111001110111100",
		flowerOftheValley: "0g0g800000000ekeqdb0mcq0hr0qtshkv0ym3u2n1o60w731smgykf1y711j30000000000000000000000000000000000000000000000000000000000000000000443000000000000760020000000000075020200000000000076020002000000657541002300000065000210330000000000011243000000000001143100000000000123200000000000013210000000000001110000000000000100000000",
		poppy: "0g0gd000000004jkcu704k17nj04k6txb05oxatb0fjd9mn0iv8e7z0qmx1q712uf5rz13ydk3j1f22ygv1lpt7nj1vpem7z0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa000000000000a78ab0000000000bb56990000000000ccb99000000000000b310000000000000004000000000000000400000000000000040000000000003404044000000000030230000000000000313000000",
		dandelion: "0g0g70000000017p88v03h660v143zt331e5azun1ktyynz1uuywvz0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000560646000000000005563000000000006643350000000000002200000000000000212100000000001221100000000000012100000000000000210000000",
		TallGrass: "0g0gb000000008yx1q70a36olb0b7lwxr0b7rj7j0cbpwqn0cbvj0f0cc15a70dfzjlr0ekke7z0gtkhz3000008000000000000000a000005000000a00300a050000100310330301030a1a033031030130033910303103133a030a10303101310a030991313331310301009131330333338300910113310113130091010141013313001901014101331000119131719131300069913175913132002219215151111202921211212221210",sheepFace: "0g0g5000006w1hdldko1heu7081wy7ri01x2x0xk4444444444444444444444444444444444222222222222444422222222222244440044222244004444004422224400444422222222222244442222222222224444222222222222444422222222222244444422333322444444442233332244444444221111224444444422111122444444444444444444444444444444444444",
			craftingTable: "0g0gd06ocs1k0dd0u0o0m8z4e00ohie480sxbxtk0v66g3c142r7js16c8mpk1f7k1rs1f94rg81jq7e2g1qe8xdk1smh054688881233218868888886813318888868868888118886888555555500555555588688884488822288882688228883838688186822888aaa8555155500555c995888188644888c99868779882286869988899b68228888c98555555500555559588886884488888c8868888622868688888888682288888865555555005555555",
        craftingTop: "0g0g3000006w1czc0l41f7k1rs0000000000000000022011111111022002011111111110200010000000000100011011011011011001101101101101100110000000000110011011011011011001101101101101100110000000000110011011011011011001101101101101100010000000000100020111111111102002201111111102200000000000000000",
			cowFace: "0g0g4000006w0fkxji011vskc81x2x0xk1111112222222211111111222222221111111122222222111111112222221111111111222222111133331122221133333333112222113333003311221111330000331122111133001111111111111111111111111111111111113333333311111111333333331111113300333300331111330033330033111133333333333311",
			chestBlock: "0g0g402881dk0qqoeew0swp7940zkqozc0000000000000000022222222332222002223223222232200223222222223220022222211222223000000001100000000222222112222220022322211222322002222222232232200222223222223220022322232223322002222222222222200222222232222220022232233222322002222222222223200000000000000000",
			chestTop: "0g0g10qoshrs0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			furnace: "0g0gf000006w02881dk04gg2k808ww4xk0k20auw0ma8c1k0qqoeew0sywflk0v74gs80znkj5k11vskc816bxcl41d0wq9k1qe8xdk1uudpmg555555555555555557c777a777a7778557766678c7c7b7755777444778787a7556744000000777755674000000007b75576402222220b77557a77cccccc7a7a55777999999997a7559eeeeeeeeeeee9559ddd755557ddd9559d5550000555d955955000000005595595012222221059559513333333315955953333333333595",
			furnacetop: "0g0g10ma8c1k0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			water: "0g0g502afj5k06s4q0o091alko0b89ol40qttk8o1111111111111111112222221111111111111133333111111000000011111111111111111144441111111222111111111111111111111111100000000001111111111333111111111444111111111111111111000000001111111113333333111122211111111111111111111111111111111144444441111111111111111111",
			netherPortal: "0g0gu0dbgv7j0dbgvzz0dbgwsf0dbgxkv0dbgydb0dbgz5r0dbgzy70dbh0qn0dbh1j30eff7y70eff8qn0efffun0effgn30fjdu670fjduyn0fjdvr30gnc9a70gnca2n0hranlr0hraoe70iv92pr0jz7h1b0l35vcv0m748vz0m749of0nb2n7j0of11j30pizfun0qn3fnj0qn3gfzjpked8bed36jh512kjjk5a8ci77h53656dj318mfpheof3ab1b418pl4662eqe014418mk311821dme1h8cpj4a67ef13crglbil3a5hkfoe12hkb1bb5677tjhrg248e47b54348bml724im8hm41322bdjh8dob46pn4a686cpj44bb616mo76bdqk3abfhq725pmccqm51bqjcor6a6lhgl43ctlbcbqm4187769bsj686ljgd8hhe88mh426",
			obsidian: "0g0gs000007300000zj013yein013yfb301442db0282fwf0282gov03c6i2n03chp1b04gainz04gajgf04gg2kf05kehof05kk4qn07smkfz08wl0cf0a0p0xr0a0p1q70a0uk1r0b4nf9b0dd12pr0egtvjz0eh53b30fks9330fks9vj0fksanz0hth5330ix9xxbc8888cec8rkcdmrq30370740l955gl9d00nog03gj970ag0c0ph99h39370047380h9990000003330c9990093336og33089939hpph31g0300c309p990900002og800ph999hh301g99eh90093hh9307473c933033393300731m093390393pog999e3pp90999ho749o7cgh734317774331fc0g3473g54770300cec8e8cemebccccci",
			fire: "0g0g500000001lpnjso1wwbuuw1wx9e601wz4tfc0000000100000000000000011000000000110001110000000011110111000000000121001110000000122110121000000012221112100000011242212221000001224421242100000124442224211100012434444422210001244333344422100122443334422110001224433422110000012243342110000000124334210000",
			lexiFace: "0g0g6009pbso06oo3qw1urv2ew1utfnco1wxln201x2x0xk3333333333333333333333333333333333332222222233333333222222223333331111222211113333111122221111333355002222005533335500222200553333550022220055333355002222005533332222222222223333222222222222333322224444222233332222444422223333332222222233333333222222223333",
			lexiTop: "0g0g11utfnco0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			lexiSide:"0g0g11utfnco0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			telei: "0g0g2000006w06oo3qw0000000000000000011111111111111101111111111111110111111111111111011111111111111101111111111111110111111111111111011111111111111101111111111111110111111111111111011111111111111101111111111111110111111111111111011111111111111101111111111111110000000000000000",
			teleii: "0g0g2000006w06oo3qw0000000000000000111111111111111011111111111111101111111111111110111111111111111011111111111111101111111111111110111111111111111011111111111111101111111111111110111111111111111011111111111111101111111111111110111111111111111011111111111111100000000000000000",
			doori: "0g0g8000006w0b546480ma8c1k0qqoeew11tlbzs11twm481cyperc1f6m5tk5777777777777775576666666666666557644444644444655764333364333365516433336433336552643333643333655766666666666665576444446444446557643333643333655764333364333365576433336433336557666666666666655766666666666665576666666666666557666666666210655166666666606665",
			doorii: "0g0g60b546480ma8c1k0sxn37c11twm481cyperc1f6m5tk3144444444444444354444444444444435444444444444443544444444444444354444444444444435444444444444443544444444444444354444444444444435444444444444443544444444444444304444444444444431444444444444443544444444444444354444444444444435444444444444442222222222222222",
			sarahFace: "0g0g6009ehh406o1hx406oo3qw1wugttk1x1114o1x2x0xk1111111111111111111111111111111111114411111111111111441111111111111122441111111111112244111111111155004444111111115500444411111111550044444411111155004444441111114444444444441111444444444444111144443333444411114444333344441111444444444444111144444444444411",
			sarahTop: "0g0g106o1hx40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			pigFace: "0g0gr000006w14172ew1hejb3s1heul881luzbw81lvx4oo1o2w1dk1qb44541qbfcoo1sj0ws81sjc3qw1sjc5bs1sjndvc1sjnfg81sjynzs1sjypko1sk9y481skl9tk1ur8we01urk6ig1urvf201urvgmw1urvi7s1us6p6g1us6qrc1ustb081x2x0xkaa669999ddddbbddaa669999ddddbbdd7766ccii99kknnnn7766ccii99kknnnn88cceeeeddddeenn88cceeeeddddeenn00qqbbbbjjjjqq0000qqbbbbjjjjqq0099ddhhppppppggdd99ddhhppppppggddcccc11ddff11llllcccc11ddff11llll999922335544oomm999922335544oommbbbbddeellffffnnbbbbddeellffffnn",
		
			sallyFace: "0g0g6000006w006lb0806oo3qw1sgim7s1wzrth41x2x0xk0000000000000000000000000000000000004444444400000000444444440000000022444422000000002244442200000000114444110000000011444411000000551144441155000055114444115500004444444444440000444444444444000044443333444400004444333344440000444444444444000044444444444400",
			sallyTop: "0g0g1000006w0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			face: "0g0g60077lrs0fkme480ohifp41unspvc1x1114o1x2x0xk1111111111111111111111111111111111114444444411111111444444441111112222444422221111222244442222111155004444005511115500444400551111550044440055111155004444005511114444444444441111444444444444111144443333444411114444333344441111444444444444111144444444444411",
			faceTop: "0g0g10fkme480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			blackGlass: "0g0g2000005416c8mns0000000000000000011111111111111001011111111111100110111111111110011111111111111001111111111111100111111111111110011111111111111001111111111111100111111111111110011111111111111001111111111011100111111111110110011111111111101001111111111111100000000000000000",
			redGlass: "0g0g21lpnjqw1wwc4ag0000000000000000011111111111111001011111111111100110111111111110011111111111111001111111111111100111111111111110011111111111111001111111111111100111111111111110011111111111111001111111111011100111111111110110011111111111101001111111111111100000000000000000",
			blueGlass: "0g0g206ozv7c06s4q0o0000000000000000011111111111111001011111111111100110111111111110011111111111111001111111111111100111111111111110011111111111111001111111111111100111111111111110011111111111111001111111111011100111111111110110011111111111101001111111111111100000000000000000",
			flowerRedTop:"0g0g100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			bars:"0g0g300000000v74gs816c8mpk1111111111111111100100100100200110020010010010011111111111111111100100100100100110010020010010011111111111111111100200100100100110010010020010011111111111111111100100100100100110010010010020011111111111111111100200100200100110010010010010011111111111111111",
			bed1:"0g0g600000000zmmgvs16az8qg16azabc1lr7yew1x2x0xk5555555544444444555555554444444455555555444444445555555544444444555555554444444455555555444444445555555544444444211111231111121111311111111311311131121112111112311000000000000011100000000000002110000000000000131000000000000011100000000000001120000000000000",
			bed2:"0g0g400000000xds1rs11u82k81lr7yew3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333311111111111111111211112111211121112111111111211111100000000001111110000000000121111000000000011121100000000001111110000000000112",
			bedTop: "0g0g11lr7yew0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			bedTop2:"0g0g21lr7yew1x2x0xk1111111100000000111111110000000011111111000000001111111100000000111111110000000011111111000000001111111100000000111111110000000011111111000000001111111100000000111111110000000011111111000000001111111100000000111111110000000011111111000000001111111100000000"


			
			




	}

	let blockData = [
		{
			name: "air",
			id: 0,
			textures: [],
			transparent: true,
			shadow: false,
		},
		{
			name: "grass",
			textures: [ "dirt", "grassTop", "grassSide" ],
		},
		{ name: "dirt" },
		{ name: "stone" },
		{ name: "bedrock" },
		{ name: "sand" },
		{ name: "gravel" },
		{
			name: "leaves",
			transparent: true,
		},
		{
			name: "glass",
			transparent: true,
			shadow: false,
		},
		{ name: "cobblestone" },
		{ name: "mossyCobble" },
		{ name: "stoneBricks" },
		{ name: "mossyStoneBricks" },
		{ name: "bricks" },
		{ name: "coalOre" },
		{ name: "ironOre" },
		{ name: "goldOre" },
		{ name: "diamondOre" },
		{ name: "redstoneOre" },
		{ name: "lapisOre" },
		{ name: "emeraldOre" },
		{ name: "coalBlock" },
		{ name: "ironBlock" },
		{ name: "goldBlock" },
		{ name: "diamondBlock" },
		{ name: "redstoneBlock" },
		{ name: "lapisBlock" },
		{ name: "emeraldBlock" },
		{ name: "oakPlanks" },
		{
			name: "oakLog",
			textures: [ "logTop", "logSide" ],
		},
		{ name: "acaciaPlanks" },
		{
			name: "acaciaLog",
			textures: [ "acaciaLogTop", "acaciaLogSide" ],
		},
		{ name: "birchPlanks" },
		{
			name: "birchLog",
			textures: [ "birchLogTop", "birchLogSide" ],
		},
		{ name: "darkOakPlanks" },
		{
			name: "darkOakLog",
			textures: [ "darkOakLogTop", "darkOakLogSide" ],
		},
		{ name: "junglePlanks" },
		{
			name: "jungleLog",
			textures: [ "jungleLogTop", "jungleLogSide" ],
		},
		{ name: "sprucePlanks" },
		{
			name: "spruceLog",
			textures: [ "spruceLogTop", "spruceLogSide" ],
		},
		{ name: "whiteWool" },
		{ name: "orangeWool" },
		{ name: "magentaWool" },
		{ name: "lightBlueWool" },
		{ name: "yellowWool" },
		{ name: "limeWool" },
		{ name: "pinkWool" },
		{ name: "grayWool" },
		{ name: "lightGrayWool" },
		{ name: "cyanWool" },
		{ name: "purpleWool" },
		{ name: "blueWool" },
		{ name: "brownWool" },
		{ name: "greenWool" },
		{ name: "redWool" },
		{ name: "blackWool" },
		{ name: "whiteConcrete" },
		{ name: "orangeConcrete" },
		{ name: "magentaConcrete" },
		{ name: "lightBlueConcrete" },
		{ name: "yellowConcrete" },
		{ name: "limeConcrete" },
		{ name: "pinkConcrete" },
		{ name: "grayConcrete" },
		{ name: "lightGrayConcrete" },
		{ name: "cyanConcrete" },
		{ name: "purpleConcrete" },
		{ name: "blueConcrete" },
		{ name: "brownConcrete" },
		{ name: "greenConcrete" },
		{ name: "redConcrete" },
		{ name: "blackConcrete" },
		{
			name: "bookshelf",
			textures: [ "oakPlanks", "bookshelf" ]
		},
		{ name: "netherrack" },
		{ name: "soulSand" },
		{ name: "glowstone" },
		{ name: "netherWartBlock" },
		{ name: "netherBricks" },
		{ name: "redNetherBricks" },
		{ name: "netherQuartzOre" },
		{
			name: "quartzBlock",
			textures: ["quartzBlockBottom", "quartzBlockTop", "quartzBlockSide"]
		},
		{
			name: "quartzPillar",
			textures: ["quartzPillarTop", "quartzPillar"]
		},
		{
			name: "chiseledQuartzBlock",
			textures: ["chiseledQuartzBlock", "chiseledQuartzBlockTop"]
		},
		{ name: "chiseledStoneBricks" },
		{ name: "smoothStone" },
		{ name: "andesite" },
		{ name: "polishedAndesite" },
		{ name: "diorite" },
		{ name: "polishedDiorite" },
		{ name: "granite" },
		{ name: "polishedGranite" },{ name: "sheepFace" },
		{ name: "craftingTable" ,
		    textures: ["craftingTop", "craftingTable"]
		},
		{ name: "cowFace" },
		{ name: "chestBlock",
		textures: ["chestTop","chestBlock"]},
		{ name: "furnace",
		textures: ["furnacetop","furnace"]},
		{ name: "water",
		solid: false,
	transparent: true	},
		{ name: "netherPortal" ,
		    solid: false,
		},
		{ name: "obsidian" },
		{ name: "fire", 
		   transparent : true
		},
		{ name: "telei" },
		{ name: "teleii"},
		{ name: "doori",
		    solid: false,
		},
		{ name: "doorii",
		    solid: false,
		},
		
{ name: "sarahFace",
    textures: ["sarahTop", "sarahFace"]
},
		{ name: "pigFace"},
{ name: "lexiFace",
textures: ["lexiTop","lexiFace"]
    
},
{ name: "sallyFace",
    textures: ["sallyTop","sallyFace"]
},
{ name: "face",
    textures: ["faceTop","face"]
},
		{ name: "flowerOftheValley",
			textures: ["flowerRedTop","flowerOftheValley"],
		    solid: false,
		    transparent: true,
		    shadow: false,
		},
		{ name: "poppy",
		textures: ["flowerRedTop","poppy"],
		    solid: false,
		    transparent: true,
		    shadow: false,
		},
		{ name: "blackGlass",
transparent: true},
{ name: "redGlass",
transparent: true},
{ name: "blueGlass",
transparent: true},


		{ name: "dandelion",
			textures: ["flowerRedTop","dandelion"],
		    solid: false,
		    transparent: true,
		    shadow: false,
		},
		{ name: "TallGrass",
			textures: ["flowerRedTop","TallGrass"],
		    solid: false,
		    transparent: true,
		    shadow: false,
		},
		{ name: "bars",
	
		transparent:true,},
	//	{ name:"bed1",
		//	textures: ["bedTop2","bed1"],
	//	transparent:true,},
			{ name:"bed2",
			textures: ["bedTop","bed2"],
		transparent:true,}
		 //{ // I swear, if y'all don't stop asking about TNT every 5 minutes!
		 //	 name: "tnt",
		 //	 textures: ["tntBottom", "tntTop", "tntSides"]
		 //},
	]
	const BLOCK_COUNT = blockData.length;

	//Set defaults on blockData
	(function() {
		for (let i = 1; i < BLOCK_COUNT; i++) {
			let data = blockData[i]
			data.id = i

			if (!data.textures) {
				data.textures = [ data.name, data.name, data.name, data.name, data.name, data.name ]
			} else if (typeof data.textures === "string") {
				let texture = data.textures
				data.textures = [ texture, texture, texture, texture, texture, texture ]
			} else if (data.textures.length === 3) {
				data.textures[3] = data.textures[2]
				data.textures[4] = data.textures[2]
				data.textures[5] = data.textures[2]
			} else if (data.textures.length === 2) {
			// Top and bottom are the first texture, sides are the second.
				data.textures[2] = data.textures[1]
				data.textures[3] = data.textures[2]
				data.textures[4] = data.textures[2]
				data.textures[5] = data.textures[2]
				data.textures[1] = data.textures[0]
			}

			data.transparent = data.transparent || false
			data.shadow = data.shadow !== undefined ? data.shadow : true
			data.solid = data.solid !== undefined ? data.solid : true
		}
	})()

	let win = window.parent
	let doc = document
	let console = win.console
	let world

	let seedHash
	let hash = (function() {
		let seed = Math.random() * 2100000000 | 0
		let PRIME32_2 = 1883677709
		let PRIME32_3 = 2034071983
		let PRIME32_4 = 668265263
		let PRIME32_5 = 374761393

		seedHash = function(s) {
			seed = s | 0
		}

		return function(x, y) {
			let h32 = 0

			h32 = seed + PRIME32_5 | 0
			h32 += 8

			h32 += Math.imul(x, PRIME32_3)
			h32 = Math.imul(h32 << 17 | h32 >> 32 - 17, PRIME32_4)
			h32 += Math.imul(y, PRIME32_3)
			h32 = Math.imul(h32 << 17 | h32 >> 32 - 17, PRIME32_4)

			h32 ^= h32 >> 15
			h32 *= PRIME32_2
			h32 ^= h32 >> 13
			h32 *= PRIME32_3
			h32 ^= h32 >> 16

			return h32 / 2147483647
		}
	})()
	let worldSeed

	//The noise and random functions are copied from the processing.js source code; these others are polyfills made by me to avoid needing to remove all the pjs draw calls
	let currentRandom = null
	function Marsaglia(i1, i2) {
	// from http://www.math.uni-bielefeld.de/~sillke/ALGORITHMS/random/marsaglia-c
		let z = (i1 | 0) || 362436069, w = i2 || hash(521288629, z) * 2147483647 | 0

		let nextInt = function() {
			z=36969*(z&65535)+(z>>>16) & 0xFFFFFFFF
			w=18000*(w&65535)+(w>>>16) & 0xFFFFFFFF
			return ((z&0xFFFF)<<16 | w&0xFFFF) & 0xFFFFFFFF
		}

		this.nextDouble = function() {
			let i = nextInt() / 4294967296
			return i < 0 ? 1 + i : i
		}
		this.nextInt = nextInt
	}
	let randomSeed = function(seed) {
		currentRandom = (new Marsaglia(seed)).nextDouble
	}
	let random = function(min, max) {
		if (!max) {
			if (min) {
				max = min
				min = 0
			} else {
				min = 0
				max = 1
			}
		}
		return currentRandom() * (max - min) + min
	}
	let noiseProfile = { generator: undefined, octaves: 4, fallout: 0.5, seed: undefined }
	function PerlinNoise(seed) {
		let rnd = seed !== undefined ? new Marsaglia(seed) : Marsaglia.createRandomized()
		let i, j
		// http://www.noisemachine.com/talk1/17b.html
		// http://mrl.nyu.edu/~perlin/noise/
		// generate permutation
		let perm = new Uint8Array(512)
		for(i=0;i<256;++i) {
			perm[i] = i
		}
		for(i=0;i<256;++i) {
			let t = perm[j = rnd.nextInt() & 0xFF]; perm[j] = perm[i]; perm[i] = t
		}
		// copy to avoid taking mod in perm[0]
		for(i=0;i<256;++i) {
			perm[i + 256] = perm[i]
		}

		function grad3d(i,x,y,z) {
			let h = i & 15; // convert into 12 gradient directions
			let u = h<8 ? x : y,
				v = h<4 ? y : h===12||h===14 ? x : z
			return ((h&1) === 0 ? u : -u) + ((h&2) === 0 ? v : -v)
		}

		function grad2d(i,x,y) {
			let v = (i & 1) === 0 ? x : y
			return (i&2) === 0 ? -v : v
		}

		function grad1d(i,x) {
			return (i&1) === 0 ? -x : x
		}

		function lerp(t,a,b) {
			return a + t * (b - a)
		}

		this.noise3d = function(x, y, z) {
			let X = Math.floor(x) & 255, Y = Math.floor(y) & 255, Z = Math.floor(z) & 255
			x -= Math.floor(x); y -= Math.floor(y); z -= Math.floor(z)
			let fx = (3-2*x)*x*x, fy = (3-2*y)*y*y, fz = (3-2*z)*z*z
			let p0 = perm[X]+Y, p00 = perm[p0] + Z, p01 = perm[p0 + 1] + Z,
				p1 = perm[X + 1] + Y, p10 = perm[p1] + Z, p11 = perm[p1 + 1] + Z
			return lerp(fz,
				lerp(fy, lerp(fx, grad3d(perm[p00], x, y, z), grad3d(perm[p10], x-1, y, z)),
					lerp(fx, grad3d(perm[p01], x, y-1, z), grad3d(perm[p11], x-1, y-1,z))),
				lerp(fy, lerp(fx, grad3d(perm[p00 + 1], x, y, z-1), grad3d(perm[p10 + 1], x-1, y, z-1)),
					lerp(fx, grad3d(perm[p01 + 1], x, y-1, z-1), grad3d(perm[p11 + 1], x-1, y-1,z-1))))
		}

		this.noise2d = function(x, y) {
			let X = Math.floor(x)&255, Y = Math.floor(y)&255
			x -= Math.floor(x); y -= Math.floor(y)
			let fx = (3-2*x)*x*x, fy = (3-2*y)*y*y
			let p0 = perm[X]+Y, p1 = perm[X + 1] + Y
			return lerp(fy,
				lerp(fx, grad2d(perm[p0], x, y), grad2d(perm[p1], x-1, y)),
				lerp(fx, grad2d(perm[p0 + 1], x, y-1), grad2d(perm[p1 + 1], x-1, y-1)))
		}

		this.noise1d = function(x) {
			let X = Math.floor(x)&255
			x -= Math.floor(x)
			let fx = (3-2*x)*x*x
			return lerp(fx, grad1d(perm[X], x), grad1d(perm[X+1], x-1))
		}
	}
	let noiseSeed = function(seed) {
		noiseProfile.seed = seed
		noiseProfile.generator = new PerlinNoise(noiseProfile.seed)
	}
	let noise = function(x, y, z) {
		let generator = noiseProfile.generator
		let effect = 1, k = 1, sum = 0
		for(let i = 0; i < noiseProfile.octaves; ++i) {
			effect *= noiseProfile.fallout
			switch (arguments.length) {
				case 1:
					sum += effect * (1 + generator.noise1d(k*x))/2; break
				case 2:
					sum += effect * (1 + generator.noise2d(k*x, k*y))/2; break
				case 3:
					sum += effect * (1 + generator.noise3d(k*x, k*y, k*z))/2; break
			}
			k *= 2
		}
		return sum
	}

	let caveNoise
	// Copied and modified from https://github.com/blindman67/SimplexNoiseJS
	function openSimplexNoise(clientSeed) {
		const SQ4 = 2
		const toNums = function(s) { return s.split(",").map(function(s) { return new Uint8Array(s.split("").map(function(v) { return Number(v) })) }) }
		const decode = function(m, r, s) { return new Int8Array(s.split("").map(function(v) { return parseInt(v, r) + m })) }
		const toNumsB32 = function(s) { return s.split(",").map(function(s) { return parseInt(s, 32) }) }
		const NORM_3D = 1.0 / 206.0
		const SQUISH_3D = 1 / 3
		const STRETCH_3D = -1 / 6
		var base3D = toNums("0000110010101001,2110210120113111,110010101001211021012011")
		const gradients3D = decode(-11, 23, "0ff7mf7fmmfffmfffm07f70f77mm7ff0ff7m0f77m77f0mf7fm7ff0077707770m77f07f70")
		var lookupPairs3D = function() { return new Uint16Array(toNumsB32("0,2,1,1,2,2,5,1,6,0,7,0,10,2,12,2,41,1,45,1,50,5,51,5,g6,0,g7,0,h2,4,h6,4,k5,3,k7,3,l0,5,l1,5,l2,4,l5,3,l6,4,l7,3,l8,d,l9,d,la,c,ld,e,le,c,lf,e,m8,k,ma,i,p9,l,pd,n,q8,k,q9,l,15e,j,15f,m,16a,i,16e,j,19d,n,19f,m,1a8,f,1a9,h,1aa,f,1ad,h,1ae,g,1af,g,1ag,b,1ah,a,1ai,b,1al,a,1am,9,1an,9,1bg,b,1bi,b,1eh,a,1el,a,1fg,8,1fh,8,1qm,9,1qn,9,1ri,7,1rm,7,1ul,6,1un,6,1vg,8,1vh,8,1vi,7,1vl,6,1vm,7,1vn,6")) }
		var p3D = decode(-1, 5, "112011210110211120110121102132212220132122202131222022243214231243124213241324123222113311221213131221123113311112202311112022311112220342223113342223311342223131322023113322023311320223113320223131322203311322203131")
		const setOf = function(count) { var a = [],i = 0; while (i < count) { a.push(i++) } return a }
		const doFor = function(count, cb) { var i = 0; while (i < count && cb(i++) !== true) {} }

		function shuffleSeed(seed,count){
			seed = seed * 1664525 + 1013904223 | 0
			count -= 1
			return count > 0 ? shuffleSeed(seed, count) : seed
		}
		const types = {
			_3D : {
				base : base3D,
				squish : SQUISH_3D,
				dimensions : 3,
				pD : p3D,
				lookup : lookupPairs3D,
			}
		}

		function createContribution(type, baseSet, index) {
			var i = 0
			const multiplier = baseSet[index ++]
			const c = { next : undefined }
			while(i < type.dimensions) {
				const axis = ("xyzw")[i]
				c[axis + "sb"] = baseSet[index + i]
				c["d" + axis] = - baseSet[index + i++] - multiplier * type.squish
			}
			return c
		}

		function createLookupPairs(lookupArray, contributions){
			var i
			const a = lookupArray()
			const res = new Map()
			for (i = 0; i < a.length; i += 2) { res.set(a[i], contributions[a[i + 1]]); }
			return res
		}

		function createContributionArray(type) {
			const conts = []
			const d = type.dimensions
			const baseStep = d * d
			var k, i = 0
			while (i < type.pD.length) {
				const baseSet = type.base[type.pD[i]]
				let previous, current
				k = 0
				do {
					current = createContribution(type, baseSet, k)
					if (!previous) { conts[i / baseStep] = current; }
					else { previous.next = current; }
					previous = current
					k += d + 1
				} while(k < baseSet.length)

				current.next = createContribution(type, type.pD, i + 1)
				if (d >= 3) { current.next.next = createContribution(type, type.pD, i + d + 2) }
				if (d === 4) { current.next.next.next = createContribution(type, type.pD, i + 11) }
				i += baseStep
			}
			const result = [conts, createLookupPairs(type.lookup, conts)]
			type.base = undefined
			type.lookup = undefined
			return result
		}

		let temp = createContributionArray(types._3D)
		const contributions3D = temp[0], lookup3D = temp[1]
		const perm = new Uint8Array(256)
		const perm3D = new Uint8Array(256)
		const source = new Uint8Array(setOf(256))
		var seed = shuffleSeed(clientSeed, 3)
		doFor(256, function(i) {
			i = 255 - i
			seed = shuffleSeed(seed, 1)
			var r = (seed + 31) % (i + 1)
			r += r < 0 ? i + 1 : 0
			perm[i] = source[r]
			perm3D[i] = (perm[i] % 24) * 3
			source[r] = source[i]
		})
		base3D = undefined
		lookupPairs3D = undefined
		p3D = undefined

		return function(x, y, z) {
			const pD = perm3D
			const p = perm
			const g = gradients3D
			const stretchOffset = (x + y + z) * STRETCH_3D
			const xs = x + stretchOffset, ys = y + stretchOffset, zs = z + stretchOffset
			const xsb = Math.floor(xs), ysb = Math.floor(ys), zsb = Math.floor(zs)
			const squishOffset	= (xsb + ysb + zsb) * SQUISH_3D
			const dx0 = x - (xsb + squishOffset), dy0 = y - (ysb + squishOffset), dz0 = z - (zsb + squishOffset)
			const xins = xs - xsb, yins = ys - ysb, zins = zs - zsb
			const inSum = xins + yins + zins
			var c = lookup3D.get(
				(yins - zins + 1) |
				((xins - yins + 1) << 1) |
				((xins - zins + 1) << 2) |
				(inSum << 3) |
				((inSum + zins) << 5) |
				((inSum + yins) << 7) |
				((inSum + xins) << 9)
			)
			var i, value = 0
			while (c !== undefined) {
				const dx = dx0 + c.dx, dy = dy0 + c.dy, dz = dz0 + c.dz
				let attn = 2 - dx * dx - dy * dy - dz * dz
				if (attn > 0) {
					i = pD[(((p[(xsb + c.xsb) & 0xFF] + (ysb + c.ysb)) & 0xFF) + (zsb + c.zsb)) & 0xFF]
					attn *= attn
					value += attn * attn * (g[i++] * dx + g[i++] * dy + g[i] * dz)
				}
				c = c.next
			}
			return value * NORM_3D + 0.5
		}
	}

	let PVector = function(x, y, z) {
		this.x = x
		this.y = y
		this.z = z
		this.set = function(x, y, z) {
			if (y === undefined) {
				this.x = x.x
				this.y = x.y
				this.z = x.z
			} else {
				this.x = x
				this.y = y
				this.z = z
			}
		}
		this.normalize = function() {
			let mag = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
			this.x /= mag
			this.y /= mag
			this.z /= mag
		}
		this.add = function(v) {
			this.x += v.x
			this.y += v.y
			this.z += v.z
		}
		this.mult = function(m) {
			this.x *= m
			this.y *= m
			this.z *= m
		}
	}
	let fill = function(r, g, b) {
		if (g === undefined) {
			g = r
			b = r
		}
		ctx.fillStyle = "rgb(" + r + ", " + g + ", " + b + ")"
	}
	let stroke = function(r, g, b) {
		if (g === undefined) {
			g = r
			b = r
		}
		ctx.strokeStyle = "rgb(" + r + ", " + g + ", " + b + ")"
	}
	let line = function(x1, y1, x2, y2) {
		ctx.moveTo(x1, y1)
		ctx.lineTo(x2, y2)
	}
	function text(txt, x, y, h) {
		h = h || 0

		let lines = txt.split("\n")
		for (let i = 0; i < lines.length; i++) {
			ctx.fillText(lines[i], x, y + h * i)
		}
	}
	function textSize(size) {
		ctx.font = size + 'px Monospace' // VT323
	}
	let strokeWeight = function(num) {
		ctx.lineWidth = num
	}
	const ARROW = "arrow"
	const HAND = "pointer"
	const CROSS = "crosshair"
	let cursor = function(type) {
		canvas.style.cursor = type
	}
	randomSeed(Math.random() * 10000000 | 0)

	async function createDatabase() {
		return await new Promise(async (resolve, reject) => {
			let request = window.indexedDB.open("MineKhan", 1)

			request.onupgradeneeded = function(event) {
				let DB = event.target.result
				// Worlds will contain and ID containing the timestamp at which the world was created, a "saved" timestamp,
				// and a "data" string that's identical to the copy/paste save string
				let store = DB.createObjectStore("worlds", { keyPath: "id" })
				store.createIndex("id", "id", { unique: true })
				store.createIndex("data", "data", { unique: false })
			}

			request.onsuccess = function(e) {
				resolve(request.result)
			}

			request.onerror = function(e) {
				console.error(e)
				reject(e)
			}
		})
	}
	async function loadFromDB(id) {
		return await new Promise(async (resolve, reject) => {
			let db = await createDatabase()
			let trans = db.transaction("worlds", "readwrite")
			let store = trans.objectStore("worlds")
			let req = id ? store.get(id) : store.getAll()
			req.onsuccess = function(e) {
				resolve(req.result)
				db.close()
			}
			req.onerror = function(e) { 
				resolve(null)
				db.close()
			}
		})
	}
	async function saveToDB(id, data) {
		return new Promise(async (resolve, reject) => {
			let db = await createDatabase()
			let trans = db.transaction("worlds", "readwrite")
			let store = trans.objectStore("worlds")
			let req = store.put({ id: id, data: data })
			req.onsuccess = function() {
				resolve(req.result)
			}
			req.onerror = function(e) {
				reject(e)
			}
		})
	}
	async function deleteFromDB(id) {
		return new Promise(async (resolve, reject) => {
			let db = await createDatabase()
			let trans = db.transaction("worlds", "readwrite")
			let store = trans.objectStore("worlds")
			let req = store.delete(id)
			req.onsuccess = function() {
				resolve(req.result)
			}
			req.onerror = function(e) {
				reject(e)
			}
		})
	}

	function save() {
		saveToDB(world.id, {
			id: world.id,
			edited: Date.now(),
			name: world.name,
			version: version,
			code: world.getSaveString()
		}).then(() => world.edited = Date.now()).catch(e => console.error(e))
	}

	// Expose these functions to the global scope for debugging
	win.saveToDB = saveToDB
	win.loadFromDB = loadFromDB
	win.createDatabase = createDatabase
	win.deleteFromDB = deleteFromDB

	//globals
	//{
	let version = "Alpha 0.7.1"
	let reach = 30 // Max distance player can place or break blocks
	let sky = [0.33, 0.54, 0.72] // 0 to 1 RGB color scale
	let superflat = false
	let trees = true
	let caves = true

	let blockIds = {}
	blockData.forEach(block => blockIds[block.name] = block.id)
	win.blockData = blockData
	win.blockIds = blockIds

	let currentFov

	// Configurable and savable settings
	let settings = {
		renderDistance: 4,
		fov: 70, // Field of view in degrees
		mouseSense: 100 // Mouse sensitivity as a percentage of the default
	}
	let locked = true
	let generatedChunks
	let mouseX, mouseY, mouseDown
	let width = window.innerWidth
	let height = window.innerHeight

	if (height === 400) alert("ALERT!!! ALERT!!! The canvas is too small. Click the \"Settings\" button to the left of the \"Vote Up\" button under the editor and change the height to 600. Thank you!")

	let generator = {
		height: 80, // Height of the hills
		smooth: 0.01, // Smoothness of the terrain
		extra: 30, // Extra height added to the world.
		caveSize: 0.00 // Redefined right above where it's used
	}
	let maxHeight = 255
	let blockOutlines = false
	let blockFill = true
	let updateHUD = true
	const CUBE     = 0
	const SLAB     = 0x100 // 9th bit
	const STAIR    = 0x200 // 10th bit
	const FLOWER   = 0x300
	const FLIP     = 0x400 // 11th bit
	const NORTH    = 0 // 12th and 13th bits for the 4 directions
	const SOUTH    = 0x800
	const EAST     = 0x1000
	const WEST     = 0x1800
	const ROTATION = 0x1800 // Mask for the direction bits
	let blockMode  = CUBE
	let tex
	let textureMap
	let dirtBuffer
	let dirtTexture
	let textureCoords
	let texCoordsBuffers
	let mainbg, dirtbg // Background images
	let bigArray = win.bigArray || new Float32Array(600000)
	win.bigArray = bigArray

	// Callback functions for all the screens; will define them further down the page
	let drawScreens = {
		"main menu": () => {},
		"options": () => {},
		"play": () => {},
		"pause": () => {},
		"creation menu": () => {},
		"inventory": () => {},
		"multiplayer menu": () => {},
		"comingsoon menu": () => {},
		"loadsave menu": () => {},
	}
	let html = {
		pause: {
			enter: [window.message],
			exit: [window.savebox, window.saveDirections, window.message]
		},
		"loadsave menu": {
			enter: [window.worlds, window.boxCenterTop, window.quota],
			exit: [window.worlds, window.boxCenterTop, window.quota],
			onenter: () => {
				window.boxCenterTop.placeholder = "Enter Save String (Optional)"
				if (navigator && navigator.storage && navigator.storage.estimate) {
					navigator.storage.estimate().then(data => {
						window.quota.innerText = `${data.usage.toLocaleString()} / ${data.quota.toLocaleString()} bytes (${(100 * data.usage / data.quota).toLocaleString(undefined, { maximumSignificantDigits: 2 })}%) of your quota used`
					}).catch(console.error)
				}
				window.boxCenterTop.onmousedown = e => {
					let elem = document.getElementsByClassName("selected")
					if (elem && elem[0]) {
						elem[0].classList.remove("selected")
					}
					selectedWorld = 0
					Button.draw()
				}
			},
			onexit: () => {
				window.boxCenterTop.onmousedown = null
			}
		},
		"creation menu": {
			enter: [window.boxCenterTop],
			exit: [window.boxCenterTop],
			onenter: () => {
				window.boxCenterTop.placeholder = "Enter World Name"
				window.boxCenterTop.value = ""
			}
		},
		loading: {
			onenter: startLoad
		},
		editworld: {
			enter: [window.boxCenterTop],
			exit: [window.boxCenterTop],
			onenter: () => {
				window.boxCenterTop.placeholder = "Enter World Name"
				window.boxCenterTop.value = ""
			}
		}
	}

	let screen = "main menu"
	let previousScreen = screen
	function changeScene(newScene) {
		if (screen === "options") {
			saveToDB("settings", settings).catch(e => console.error(e))
		}

		if (html[screen] && html[screen].exit) {
			for (let element of html[screen].exit) {
				element.classList.add("hidden")
			}
		}

		if (html[newScene] && html[newScene].enter) {
			for (let element of html[newScene].enter) {
				element.classList.remove("hidden")
			}
		}

		if (html[newScene] && html[newScene].onenter) {
			html[newScene].onenter()
		}
		if (html[screen] && html[screen].onexit) {
			html[screen].onexit()
		}

		previousScreen = screen
		screen = newScene
		mouseDown = false
		drawScreens[screen]()
		Button.draw()
		Slider.draw()
	}
	let hitBox = {}
	let holding = 0
	let Key = {}
	let modelView = win.modelView || new Float32Array(16)
	win.modelView = modelView
	let glCache
	let worlds, selectedWorld = 0
	let freezeFrame = 0
	let p
	let vec1 = new PVector(), vec2 = new PVector(), vec3 = new PVector()
	let move = {
		x: 0,
		y: 0,
		z: 0,
		ang: Math.sqrt(0.5),
	}
	let p2 = {
		x: 0,
		y: 0,
		z: 0,
	}
	let place
	let inventory = {
		hotbar: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
		main: [],
		hotbarSlot: 0,
		size: 40 * Math.min(width, height) / 600,
		holding: 0,
	}
	//}

	function play() {
		canvas.onblur()
		p.lastBreak = Date.now()
		updateHUD = true
		use3d()
		gl.clearColor(sky[0], sky[1], sky[2], 1.0)
		getPointer()
		fill(255, 255, 255)
		textSize(10)
		changeScene("play")
	}

	let gl
	function getPointer() {
		if (canvas.requestPointerLock) {
			canvas.requestPointerLock()
		}
	}
	function releasePointer() {
		if (doc.exitPointerLock) {
			doc.exitPointerLock()
		}
	}

	let Block = {
		top: 0x4,
		bottom: 0x8,
		north: 0x20,
		south: 0x10,
		east: 0x2,
		west: 0x1,
	}
	let Sides = {
		top: 0,
		bottom: 1,
		north: 2,
		south: 3,
		east: 4,
		west: 5,
	}

	// GLSL Shader code (written in script tags at the top of the file)
	let vertexShaderSrc3D = document.getElementById("blockVertexShader").text
	let fragmentShaderSrc3D = document.getElementById("blockFragmentShader").text
	let vertexShaderSrc2D = document.getElementById("2dVertexShader").text
	let fragmentShaderSrc2D = document.getElementById("2dFragmentShader").text

	function createProgramObject(curContext, vetexShaderSource, fragmentShaderSource) {
		let vertexShaderObject = curContext.createShader(curContext.VERTEX_SHADER)
		curContext.shaderSource(vertexShaderObject, vetexShaderSource)
		curContext.compileShader(vertexShaderObject)
		if (!curContext.getShaderParameter(vertexShaderObject, curContext.COMPILE_STATUS)) {
			throw curContext.getShaderInfoLog(vertexShaderObject)
		}

		let fragmentShaderObject = curContext.createShader(curContext.FRAGMENT_SHADER)
		curContext.shaderSource(fragmentShaderObject, fragmentShaderSource)
		curContext.compileShader(fragmentShaderObject)
		if (!curContext.getShaderParameter(fragmentShaderObject, curContext.COMPILE_STATUS)) {
			throw curContext.getShaderInfoLog(fragmentShaderObject)
		}

		let programObject = curContext.createProgram()
		curContext.attachShader(programObject, vertexShaderObject)
		curContext.attachShader(programObject, fragmentShaderObject)
		curContext.linkProgram(programObject)
		if (!curContext.getProgramParameter(programObject, curContext.LINK_STATUS)) {
			throw "Error linking shaders."
		}

		return programObject
	}

	let program3D, program2D

	function objectify(x, y, z, width, height, textureX, textureY) {
		return {
			x: x,
			y: y,
			z: z,
			w: width,
			h: height,
			tx: textureX,
			ty: textureY
		}
	}
	let shapes = {
		/*
			[
				[(-x, -z), (+x, -z), (+x, +z), (-x, +z)], // minX = 0,  minZ = 2,  maxX = 6, maxZ = 8
				[(-x, +z), (+x, +z), (+x, -z), (-x, -z)], // minX = 9,  minZ = 10, maxX = 3, maxZ = 4
				[(+x, +y), (-x, +y), (-x, -y), (+x, -y)], // minX = 6,  minY = 7,  maxX = 0, maxY = 1
				[(-x, +y), (+x, +y), (+x, -y), (-x, -y)], // minX = 9,  minY = 10, maxX = 3, maxY = 4
				[(+y, -z), (+y, +z), (-y, +z), (-y, -z)], // minY = 10, minZ = 11, maxY = 4, maxZ = 5
				[(+y, +z), (+y, -z), (-y, -z), (-y, +z)]  // minY = 7,  minZ = 8,  maxY = 1, maxZ = 2
			]
			*/
		cube: {
			verts: [
				// x, y, z, width, height, textureX, textureY
				// 0, 0, 0 is the corner on the top left of the texture
				[objectify( 0,  0,  0, 16, 16, 0, 0)], //bottom
				[objectify( 0, 16, 16, 16, 16, 0, 0)], //top
				[objectify(16, 16, 16, 16, 16, 0, 0)], //north
				[objectify( 0, 16,  0, 16, 16, 0, 0)], //south
				[objectify(16, 16,  0, 16, 16, 0, 0)], //east
				[objectify( 0, 16, 16, 16, 16, 0, 0)]  //west
			],
			cull: {
				top: 3,
				bottom: 3,
				north: 3,
				south: 3,
				east: 3,
				west: 3
			},
			texVerts: [],
			varients: [],
			buffer: null,
			size: 6
		},
		slab: {
			verts: [
				[objectify( 0, 0,  0, 16, 16, 0, 0)], //bottom
				[objectify( 0, 8, 16, 16, 16, 0, 0)], //top
				[objectify(16, 8, 16, 16, 8, 0, 0)], //north
				[objectify( 0, 8,  0, 16, 8, 0, 0)], //south
				[objectify(16, 8,  0, 16, 8, 0, 0)], //east
				[objectify( 0, 8, 16, 16, 8, 0, 0)]  //west
			],
			cull: {
				top: 0,
				bottom: 3,
				north: 1,
				south: 1,
				east: 1,
				west: 1
			},
			texVerts: [],
			buffer: null,
			size: 6,
			varients: [],
			flip: true,
			rotate: false
		},
		flower: {
			verts: [
				// x, y, z, width, height, textureX, textureY
				// 0, 0, 0 is the corner on the top left of the texture
				[objectify( 0,  0,  0, 0, 0, 0, 0)], //bottom
				[objectify( 0, 16, 16, 0, 0, 0, 0)], //top
				[objectify(12, 16, 11, 16, 16, 0, 0)], //north
				[objectify( -4, 16,  11, 16, 16, 0, 0)], //south
				[objectify(4, 16,  3, 16, 16, 0, 0)], //east
				[objectify( 4, 16, 19, 16, 16, 0, 0)]  //west
			],
			cull: {
				top: 3,
				bottom: 3,
				north: 0,
				south: 0,
				east: 0,
				west: 0
			},
			texVerts: [],
			varients: [],
			buffer: null,
			size: 6,
			rotate: true
		},
		stair: {
			verts: [
				[objectify( 0, 0,  0, 16, 16, 0, 0)], //bottom
				[objectify( 0, 8,  8, 16, 8, 0, 8), objectify( 0, 16,  16, 16, 8, 0, 0)], //top
				[objectify(16, 16, 16, 16, 16, 0, 0)], //north
				[objectify( 0, 8,  0, 16, 8, 0, 0), objectify( 0, 16,  8, 16, 8, 0, 0)], //south
				[objectify(16, 8, 0, 8, 8, 8, 0), objectify(16, 16, 8, 8, 16, 0, 0)], //east
				[objectify( 0, 8, 8, 8, 8, 0, 0), objectify( 0, 16, 16, 8, 16, 8, 0)]  //west
			],
			cull: {
				top: 0,
				bottom: 3,
				north: 3,
				south: 0,
				east: 0,
				west: 0
			},
			texVerts: [],
			buffer: null,
			size: 10,
			varients: [],
			flip: true,
			rotate: true
		},
	}
	win.shapes = shapes

	function compareArr(arr, out) {
		let minX = 1000
		let maxX = -1000
		let minY = 1000
		let maxY = -1000
		let minZ = 1000
		let maxZ = -1000
		let min = Math.min
		let max = Math.max
		let num = 0
		for (let i = 0; i < arr.length; i += 3) {
			num = arr[i]
			minX = minX > num ? num : minX
			maxX = maxX < num ? num : maxX
			num = arr[i + 1]
			minY = minY > num ? num : minY
			maxY = maxY < num ? num : maxY
			num = arr[i + 2]
			minZ = minZ > num ? num : minZ
			maxZ = maxZ < num ? num : maxZ
		}
		out[0] = minX
		out[1] = minY
		out[2] = minZ
		out[3] = maxX
		out[4] = maxY
		out[5] = maxZ
		return out
	}

	function initShapes() {
		function mapCoords(rect, face) {
			let x = rect.x
			let y = rect.y
			let z = rect.z
			let w = rect.w
			let h = rect.h
			let tx = rect.tx
			let ty = rect.ty
			let tex = [tx+w,ty, tx,ty, tx,ty+h, tx+w,ty+h]
			let pos = null
			switch(face) {
				case 0: // Bottom
					pos = [x,y,z, x+w,y,z, x+w,y,z+h, x,y,z+h]
					break
				case 1: // Top
					pos = [x,y,z, x+w,y,z, x+w,y,z-h, x,y,z-h]
					break
				case 2: // North
					pos = [x,y,z, x-w,y,z, x-w,y-h,z, x,y-h,z]
					break
				case 3: // South
					pos = [x,y,z, x+w,y,z, x+w,y-h,z, x,y-h,z]
					break
				case 4: // East
					pos = [x,y,z, x,y,z+w, x,y-h,z+w, x,y-h,z]
					break
				case 5: // West
					pos = [x,y,z, x,y,z-w, x,y-h,z-w, x,y-h,z]
					break
			}
			pos = pos.map(c => c / 16 - 0.5)
			let minmax = compareArr(pos, [])
			pos.max = minmax.splice(3, 3)
			pos.min = minmax
			tex = tex.map(c => c / 16 / 16)
			
			return {
				pos: pos,
				tex: tex
			}
		}
		
		// 90 degree clockwise rotation; returns a new shape object
		function rotate(shape) {
			let verts = shape.verts
			let texVerts = shape.texVerts
			let cull = shape.cull
			let pos = []
			tex = []
			for (let i = 0; i < verts.length; i++) {
				let side = verts[i]
				pos[i] = []
				tex[i] = []
				for (let j = 0; j < side.length; j++) {
					let face = side[j]
					let c = []
					pos[i][j] = c
					for (let k = 0; k < face.length; k += 3) {
						c[k] = face[k + 2]
						c[k + 1] = face[k + 1]
						c[k + 2] = -face[k]
					}
					
					tex[i][j] = texVerts[i][j].slice() // Copy texture verts exactly
					if (i === 0) {
						// Bottom
						c.push(...c.splice(0, 3))
						tex[i][j].push(...tex[i][j].splice(0, 2))
					}
					if (i === 1) {
						// Top
						c.unshift(...c.splice(-3, 3))
						tex[i][j].unshift(...tex[i][j].splice(-2, 2))
					}

					let minmax = compareArr(c, [])
					c.max = minmax.splice(3, 3)
					c.min = minmax
				}
			}
			let temp = tex[2] // North
			tex[2] = tex[5] // North = West
			tex[5] = tex[3] // West = South
			tex[3] = tex[4] // South = East
			tex[4] = temp // East = North

			temp = pos[2] // North
			pos[2] = pos[5] // North = West
			pos[5] = pos[3] // West = South
			pos[3] = pos[4] // South = East
			pos[4] = temp // East = North

			let cull2 = {
				top: cull.top,
				bottom: cull.bottom,
				north: cull.west,
				west: cull.south,
				south: cull.east,
				east: cull.north
			}

			let buffer = gl.createBuffer()
			gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(pos.flat(2)), gl.STATIC_DRAW)

			return {
				verts: pos,
				texVerts: tex,
				cull: cull2,
				rotate: true,
				flip: shape.flip,
				buffer: buffer,
				size: shape.size,
				varients: shape.varients
			}
		}

		// Reflect over the y plane; returns a new shape object
		function flip(shape) {
			let verts = shape.verts
			let texVerts = shape.texVerts
			let cull = shape.cull
			let pos = []
			tex = []
			for (let i = 0; i < verts.length; i++) {
				let side = verts[i]
				pos[i] = []
				tex[i] = []
				for (let j = 0; j < side.length; j++) {
					let face = side[j].slice().reverse()
					let c = []
					pos[i][j] = c
					for (let k = 0; k < face.length; k += 3) {
						c[k] = face[k + 2]
						c[k + 1] = -face[k + 1]
						c[k + 2] = face[k]
					}
					let minmax = compareArr(c, [])
					c.max = minmax.splice(3, 3)
					c.min = minmax

					tex[i][j] = texVerts[i][j].slice() // Copy texture verts exactly
				}
			}
			let temp = pos[0] // Bottom
			pos[0] = pos[1] // Bottom = Top
			pos[1] = temp // Top = Bottom

			temp = tex[0] // Bottom
			tex[0] = tex[1] // Bottom = Top
			tex[1] = temp // Top = Bottom

			let cull2 = {
				top: cull.bottom,
				bottom: cull.top,
				north: (cull.north & 1) << 1 | (cull.north & 2) >> 1,
				west: (cull.west & 1) << 1 | (cull.west & 2) >> 1,
				south: (cull.south & 1) << 1 | (cull.south & 2) >> 1,
				east: (cull.east & 1) << 1 | (cull.east & 2) >> 1
			}

			let buffer = gl.createBuffer()
			gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(pos.flat(2)), gl.STATIC_DRAW)

			return {
				verts: pos,
				texVerts: tex,
				cull: cull2,
				rotate: shape.rotate,
				flip: shape.flip,
				buffer: buffer,
				size: shape.size,
				varients: shape.varients
			}
		}

		for (let shape in shapes) {
			let obj = shapes[shape]
			let verts = obj.verts
			
			// Populate the vertex coordinates
			for (let i = 0; i < verts.length; i++) {
				let side = verts[i]
				let texArr = []
				obj.texVerts.push(texArr)
				for (let j = 0; j < side.length; j++) {
					let face = side[j]
					let mapped = mapCoords(face, i)
					side[j] = mapped.pos
					texArr.push(mapped.tex)
				}
			}

			if (obj.rotate) {
				let v = obj.varients
				let east = rotate(obj)
				let south = rotate(east)
				let west = rotate(south)
				v[0] = obj
				v[2] = south
				v[4] = east
				v[6] = west
			}
			if (obj.flip) {
				let v = obj.varients
				v[1] = flip(obj)
				if (obj.rotate) {
					v[3] = flip(v[2])
					v[5] = flip(v[4])
					v[7] = flip(v[6])
				}
			}

			obj.buffer = gl.createBuffer()
			gl.bindBuffer(gl.ARRAY_BUFFER, obj.buffer)
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verts.flat(2)), gl.STATIC_DRAW)
		}

		for (let i = 0; i < BLOCK_COUNT; i++) {
			let baseBlock = blockData[i]
			let slabBlock = Object.create(baseBlock)
			let flowerBlock = Object.create(baseBlock)
			let stairBlock = Object.create(baseBlock)
			slabBlock.shape = shapes.slab
			flowerBlock.shape = shapes.flower
			baseBlock.shape = shapes.cube
			stairBlock.shape = shapes.stair
			blockData[i | SLAB] = slabBlock
			blockData[i | STAIR] = stairBlock
			blockData[i | FLOWER] = flowerBlock
			let v = slabBlock.shape.varients
			for (let j = 0; j < v.length; j++) {
				if (v[j]) {
					let block = Object.create(baseBlock)
					block.shape = v[j]
					blockData[i | SLAB | j << 10] = block
				}
			}
			v = flowerBlock.shape.varients
			for (let j = 0; j < v.length; j++) {
				if (v[j]) {
					let block = Object.create(baseBlock)
					block.shape = v[j]
					blockData[i | FLOWER | j << 10] = block
				}
			}
			v = stairBlock.shape.varients
			for (let j = 0; j < v.length; j++) {
				if (v[j]) {
					let block = Object.create(baseBlock)
					block.shape = v[j]
					blockData[i | STAIR | j << 10] = block
				}
			}
		}
	}
	let indexOrder;
	(function() {
		let arr = []
		for (let i = 0; i < 100000; i++) {
			arr.push(0 + i * 4, 1 + i * 4, 2 + i * 4, 0 + i * 4, 2 + i * 4, 3 + i * 4)
		}
		indexOrder = new Uint32Array(arr)
	})()

	let hexagonVerts
	let slabIconVerts
	let flowerIconVerts
	let stairIconVerts
	let blockIcons
	{
		let side = Math.sqrt(3) / 2
		let s = side
		let q = s / 2
		hexagonVerts = new Float32Array([
			0, 1, 1, side, 0.5, 1, 0, 0, 1, -side, 0.5, 1,
			0, 0, 1, side, 0.5, 1, side, -0.5, 1, 0, -1, 1,
			-side, 0.5, 1, 0, 0, 1, 0, -1, 1, -side, -0.5, 1,
		])
		
		slabIconVerts = new Float32Array([
			0, 0.5, 1, side, 0, 1, 0, -0.5, 1, -side, 0, 1,
			0, -0.5, 1, side, 0, 1, side, -0.5, 1, 0, -1, 1,
			-side, 0, 1, 0, -0.5, 1, 0, -1, 1, -side, -0.5, 1,
		])

		flowerIconVerts = new Float32Array([
			0, 0.5, 1, side, 0, 1, 0, -0.5, 1, -side, 0, 1,
			0, -0.5, 1, side, 0, 1, side, -0.5, 1, 0, -1, 1,
			-side, 0, 1, 0, -0.5, 1, 0, -1, 1, -side, -0.5, 1,
		])

		stairIconVerts = [
			-s,0.5,0,0,1,         0,1,1,0,1,         q,0.75,1,0.5,1,    -q,0.25,0,0.5,1,    // top of the top step
			-q,-0.25,0,0,1,       q,0.25,1,0,1,      s,0,1,0.5,1,        0,-0.5,0,0.5,1,    // top of the bottom step
			-q,0.25,0,0,0.6,      q,0.75,1,0,0.6,    q,0.25,1,0.5,0.6,  -q,-0.25,0,0.5,0.6, // front of the top step
			0,-0.5,0,0,0.6,       s,0,1,0,0.6,       s,-0.5,1,0.5,0.6,   0,-1,0,0.5,0.6,    // front of the bottom step
			-s,0.5,0,0,0.8,      -q,0.25,0.5,0,0.8, -q,-0.75,0.5,1,0.8, -s,-0.5,0,1,0.8,    // side of the top step
			-q,-0.25,0.5,0.5,0.8, 0,-0.5,1,0.5,0.8,  0,-1,1,1,0.8,      -q,-0.75,0.5,1,0.8, // side of the bottom step
		]
	}
	function genIcons() {
		blockIcons = [null]
		blockIcons.lengths = []
		let texOrder = [ 1, 2, 3 ]
		let shadows = [ 1, 0.4, 0.7 ]
		let scale = 0.16 / height * inventory.size
		for (let i = 1; i < BLOCK_COUNT; i++) {
			let data = []
			let block = blockData[i]
			for (let j = 11; j >= 0; j--) {
				data.push(-hexagonVerts[j * 3 + 0] * scale)
				data.push(hexagonVerts[j * 3 + 1] * scale)
				data.push(0.1666666)
				data.push(textureCoords[textureMap[block.textures[texOrder[Math.floor(j / 4)]]]][(j * 2 + 0) % 8])
				data.push(textureCoords[textureMap[block.textures[texOrder[Math.floor(j / 4)]]]][(j * 2 + 1) % 8])
				data.push(shadows[Math.floor(j / 4)])
			}
			let buffer = gl.createBuffer()
			gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW)
			blockIcons[i] = buffer
			blockIcons.lengths[i] = 6 * 3

			data = []
			for (let j = 11; j >= 0; j--) {
				let tex = textureCoords[textureMap[block.textures[texOrder[Math.floor(j / 4)]]]]

				data.push(-slabIconVerts[j * 3 + 0] * scale)
				data.push(slabIconVerts[j * 3 + 1] * scale)
				data.push(0.1666666)
				data.push(tex[(j * 2 + 0) % 8])
				data.push(tex[(j * 2 + 1) % 8])
				data.push(shadows[Math.floor(j / 4)])
			}

			data = []
			for (let j = 11; j >= 0; j--) {
				let tex = textureCoords[textureMap[block.textures[texOrder[Math.floor(j / 4)]]]]

				data.push(-flowerIconVerts[j * 3 + 0] * scale)
				data.push(flowerIconVerts[j * 3 + 1] * scale)
				data.push(0.1666666)
				data.push(tex[(j * 2 + 0) % 8])
				data.push(tex[(j * 2 + 1) % 8])
				data.push(shadows[Math.floor(j / 4)])
			}
			buffer = gl.createBuffer()
			gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW)
			blockIcons[i | FLOWER] = buffer
			blockIcons.lengths[i | FLOWER] = 6 * 3

			data = []
			let v = stairIconVerts
			for (let j = 23; j >= 0; j--) {
				let num = Math.floor(j / 8)
				let tex = textureCoords[textureMap[block.textures[texOrder[num]]]]
				let tx = tex[0]
				let ty = tex[1]
				data.push(-v[j * 5 + 0] * scale)
				data.push(v[j * 5 + 1] * scale)
				data.push(0.1666666)
				data.push(tx + v[j * 5 + 2] / 16)
				data.push(ty + v[j * 5 + 3] / 16)
				data.push(shadows[num])
			}
			buffer = gl.createBuffer()
			gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW)
			blockIcons[i | STAIR] = buffer
			blockIcons.lengths[i | STAIR] = 6 * 6
		}
	}

	function uniformMatrix(cacheId, programObj, vrName, transpose, matrix) {
		let vrLocation = glCache[cacheId]
		if(vrLocation === undefined) {
			vrLocation = gl.getUniformLocation(programObj, vrName)
			glCache[cacheId] = vrLocation
		}
		gl.uniformMatrix4fv(vrLocation, transpose, matrix)
	}
	function vertexAttribPointer(cacheId, programObj, vrName, size, VBO) {
		let vrLocation = glCache[cacheId]
		if(vrLocation === undefined) {
			vrLocation = gl.getAttribLocation(programObj, vrName)
			glCache[cacheId] = vrLocation
		}
		if (vrLocation !== -1) {
			gl.enableVertexAttribArray(vrLocation)
			gl.bindBuffer(gl.ARRAY_BUFFER, VBO)
			gl.vertexAttribPointer(vrLocation, size, gl.FLOAT, false, 0, 0)

		}
	}

	//Generate buffers for every block face and store them
	let sideEdgeBuffers
	let indexBuffer

	function cross(v1, v2, result) {
		let x = v1.x,
			y = v1.y,
			z = v1.z,
			x2 = v2.x,
			y2 = v2.y,
			z2 = v2.z
		result.x = y * z2 - y2 * z
		result.y = z * x2 - z2 * x
		result.z = x * y2 - x2 * y
	}

	let matrix = new Float32Array(16); // A temperary matrix that may store random data.
	let projection = new Float32Array(16)
	let defaultModelView = new Float32Array([ -10,0,0,0,0,10,0,0,0,0,-10,0,0,0,0,1 ])
	class Matrix {
		constructor(arr) {
			this.elements = new Float32Array(arr || 16)
		}
		translate(x, y, z) {
			let a = this.elements
			a[3] += a[0] * x + a[1] * y + a[2] * z
			a[7] += a[4] * x + a[5] * y + a[6] * z
			a[11] += a[8] * x + a[9] * y + a[10] * z
			a[15] += a[12] * x + a[13] * y + a[14] * z
		}
		rotX(angle) {
			let elems = this.elements
			let c = Math.cos(angle)
			let s = Math.sin(angle)
			let t = elems[1]
			elems[1] = t * c + elems[2] * s
			elems[2] = t * -s + elems[2] * c
			t = elems[5]
			elems[5] = t * c + elems[6] * s
			elems[6] = t * -s + elems[6] * c
			t = elems[9]
			elems[9] = t * c + elems[10] * s
			elems[10] = t * -s + elems[10] * c
			t = elems[13]
			elems[13] = t * c + elems[14] * s
			elems[14] = t * -s + elems[14] * c
		}
		rotY(angle) {
			let c = Math.cos(angle)
			let s = Math.sin(angle)
			let elems = this.elements
			let t = elems[0]
			elems[0] = t * c + elems[2] * -s
			elems[2] = t * s + elems[2] * c
			t = elems[4]
			elems[4] = t * c + elems[6] * -s
			elems[6] = t * s + elems[6] * c
			t = elems[8]
			elems[8] = t * c + elems[10] * -s
			elems[10] = t * s + elems[10] * c
			t = elems[12]
			elems[12] = t * c + elems[14] * -s
			elems[14] = t * s + elems[14] * c
		}
		transpose() {
			let matrix = this.elements
			let temp = matrix[4]
			matrix[4] = matrix[1]
			matrix[1] = temp

			temp = matrix[8]
			matrix[8] = matrix[2]
			matrix[2] = temp

			temp = matrix[6]
			matrix[6] = matrix[9]
			matrix[9] = temp

			temp = matrix[3]
			matrix[3] = matrix[12]
			matrix[12] = temp

			temp = matrix[7]
			matrix[7] = matrix[13]
			matrix[13] = temp

			temp = matrix[11]
			matrix[11] = matrix[14]
			matrix[14] = temp
		}
		copyArray(from) {
			let to = this.elements
			for (let i = 0; i < from.length; i++) {
				to[i] = from[i]
			}
		}
		copyMatrix(from) {
			let to = this.elements
			from = from.elements
			for (let i = 0; i < from.length; i++) {
				to[i] = from[i]
			}
		}
	}

	class Plane {
		constructor(nx, ny, nz) {
			this.set(nx, ny, nz)
		}
		set(nx, ny, nz) {
			// Pre-computed chunk offsets to reduce branching during culling
			this.dx = nx > 0 ? 16 : 0
			this.dy = ny > 0
			this.dz = nz > 0 ? 16 : 0

			// Normal vector for the plane
			this.nx = nx
			this.ny = ny
			this.nz = nz
		}
	}

	let defaultTransformation = new Matrix([ -10,0,0,0,0,10,0,0,0,0,-10,0,0,0,0,1 ])
	class Camera {
		constructor() {
			this.x = 0
			this.y = 0
			this.z = 0
			this.rx = 0; // Pitch
			this.ry = 0; // Yaw
			this.currentFov = 0
			this.defaultFov = settings.fov
			this.targetFov = settings.fov
			this.step = 0
			this.lastStep = 0
			this.projection = new Float32Array(5)
			this.transformation = new Matrix()
			this.direction = { x: 1, y: 0, z: 0 }; // Normalized direction vector
			this.frustum = [] // The 5 planes of the viewing frustum (there's no far plane)
			for (let i = 0; i < 5; i++) {
				this.frustum.push(new Plane(1, 0, 0))
			}
		}
		FOV(fov, time) {
			if (fov === this.currentFov) return

			if (!fov) {
				let now = Date.now()
				fov = this.currentFov + this.step * (now - this.lastStep)
				this.lastStep = now
				if (Math.sign(this.targetFov - this.currentFov) !== Math.sign(this.targetFov - fov)) {
					fov = this.targetFov
				}
			}
			else if (time) {
				this.targetFov = fov
				this.step = (fov - this.currentFov) / time
				this.lastStep = Date.now()
				return
			} else {
				this.targetFov = fov
			}

			const tang = Math.tan(fov * Math.PI / 360)
			const scale = 1 / tang
			const near = 1
			const far = 1000000
			this.currentFov = fov; // Store the state of the projection matrix
			this.nearH = near * tang; // This is needed for frustum culling

			this.projection[0] = scale / width * height
			this.projection[1] = scale
			this.projection[2] = -far / (far - near)
			this.projection[3] = -1
			this.projection[4] = -far * near / (far - near)
		}
		transform() {
			this.transformation.copyMatrix(defaultTransformation)
			this.transformation.rotX(this.rx)
			this.transformation.rotY(this.ry)
			this.transformation.translate(-this.x, -this.y, -this.z)
		}
		getMatrix() {
			let proj = this.projection
			let view = this.transformation.elements
			matrix[0]  = proj[0] * view[0]
			matrix[1]  = proj[1] * view[4]
			matrix[2]  = proj[2] * view[8] + proj[3] * view[12]
			matrix[3]  = proj[4] * view[8]
			matrix[4]  = proj[0] * view[1]
			matrix[5]  = proj[1] * view[5]
			matrix[6]  = proj[2] * view[9] + proj[3] * view[13]
			matrix[7]  = proj[4] * view[9]
			matrix[8]  = proj[0] * view[2]
			matrix[9]  = proj[1] * view[6]
			matrix[10] = proj[2] * view[10] + proj[3] * view[14]
			matrix[11] = proj[4] * view[10]
			matrix[12] = proj[0] * view[3]
			matrix[13] = proj[1] * view[7]
			matrix[14] = proj[2] * view[11] + proj[3] * view[15]
			matrix[15] = proj[4] * view[11]
			return matrix
		}
		setDirection() {
			if (this.targetFov !== this.currentFov) {
				this.FOV()
			}
			this.direction.x = -Math.sin(this.ry) * Math.cos(this.rx)
			this.direction.y = Math.sin(this.rx)
			this.direction.z = Math.cos(this.ry) * Math.cos(this.rx)
			this.computeFrustum()
		}
		computeFrustum() {
			let X = vec1
			let dir = this.direction
			X.x = dir.z
			X.y = 0
			X.z = -dir.x
			X.normalize()

			let Y = vec2
			Y.set(dir)
			Y.mult(-1)
			cross(Y, X, Y)

			//Near plane
			this.frustum[0].set(dir.x, dir.y, dir.z)

			let aux = vec3
			aux.set(Y)
			aux.mult(this.nearH)
			aux.add(dir)
			aux.normalize()
			cross(aux, X, aux)
			this.frustum[1].set(aux.x, aux.y, aux.z)

			aux.set(Y)
			aux.mult(-this.nearH)
			aux.add(dir)
			aux.normalize()
			cross(X, aux, aux)
			this.frustum[2].set(aux.x, aux.y, aux.z)

			aux.set(X)
			aux.mult(-this.nearH * width / height)
			aux.add(dir)
			aux.normalize()
			cross(aux, Y, aux)
			this.frustum[3].set(aux.x, aux.y, aux.z)

			aux.set(X)
			aux.mult(this.nearH * width / height)
			aux.add(dir)
			aux.normalize()
			cross(Y, aux, aux)
			this.frustum[4].set(aux.x, aux.y, aux.z)
		}
		canSee(x, y, z, maxY) {
			x -= 0.5
			y -= 0.5
			z -= 0.5
			maxY += 0.5
			let px = 0, py = 0, pz = 0, plane = null
			let cx = p.x, cy = p.y, cz = p.z
			for (let i = 0; i < 5; i++) {
				plane = this.frustum[i]
				px = x + plane.dx
				py = plane.dy ? maxY : y
				pz = z + plane.dz
				if ((px - cx) * plane.nx + (py - cy) * plane.ny + (pz - cz) * plane.nz < 0) {
					return false
				}
			}
			return true
		}
	}

	function trans(matrix, x, y, z) {
		let a = matrix
		a[3] += a[0] * x + a[1] * y + a[2] * z
		a[7] += a[4] * x + a[5] * y + a[6] * z
		a[11] += a[8] * x + a[9] * y + a[10] * z
		a[15] += a[12] * x + a[13] * y + a[14] * z
	}
	function rotX(matrix, angle) {
		// This function is basically multiplying 2 4x4 matrices together,
		// but 1 of them has a bunch of 0's and 1's in it,
		// so I removed all terms that multiplied by 0, and just left off the 1's.
		// mat2 = [1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1]
		let elems = matrix
		let c = Math.cos(angle)
		let s = Math.sin(angle)
		let t = elems[1]
		elems[1] = t * c + elems[2] * s
		elems[2] = t * -s + elems[2] * c
		t = elems[5]
		elems[5] = t * c + elems[6] * s
		elems[6] = t * -s + elems[6] * c
		t = elems[9]
		elems[9] = t * c + elems[10] * s
		elems[10] = t * -s + elems[10] * c
		t = elems[13]
		elems[13] = t * c + elems[14] * s
		elems[14] = t * -s + elems[14] * c
	}
	function rotY(matrix, angle) {
	//source = c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1
		let c = Math.cos(angle)
		let s = Math.sin(angle)
		let elems = matrix
		let t = elems[0]
		elems[0] = t * c + elems[2] * -s
		elems[2] = t * s + elems[2] * c
		t = elems[4]
		elems[4] = t * c + elems[6] * -s
		elems[6] = t * s + elems[6] * c
		t = elems[8]
		elems[8] = t * c + elems[10] * -s
		elems[10] = t * s + elems[10] * c
		t = elems[12]
		elems[12] = t * c + elems[14] * -s
		elems[14] = t * s + elems[14] * c
	}
	function transpose(matrix) {
		let temp = matrix[4]
		matrix[4] = matrix[1]
		matrix[1] = temp

		temp = matrix[8]
		matrix[8] = matrix[2]
		matrix[2] = temp

		temp = matrix[6]
		matrix[6] = matrix[9]
		matrix[9] = temp

		temp = matrix[3]
		matrix[3] = matrix[12]
		matrix[12] = temp

		temp = matrix[7]
		matrix[7] = matrix[13]
		matrix[13] = temp

		temp = matrix[11]
		matrix[11] = matrix[14]
		matrix[14] = temp
	}
	function matMult() {
	//Multiply the projection matrix by the view matrix; this is optimized specifically for these matrices by removing terms that are always 0.
		let proj = projection
		let view = modelView
		matrix[0] = proj[0] * view[0]
		matrix[1] = proj[0] * view[1]
		matrix[2] = proj[0] * view[2]
		matrix[3] = proj[0] * view[3]
		matrix[4] = proj[5] * view[4]
		matrix[5] = proj[5] * view[5]
		matrix[6] = proj[5] * view[6]
		matrix[7] = proj[5] * view[7]
		matrix[8] = proj[10] * view[8] + proj[11] * view[12]
		matrix[9] = proj[10] * view[9] + proj[11] * view[13]
		matrix[10] = proj[10] * view[10] + proj[11] * view[14]
		matrix[11] = proj[10] * view[11] + proj[11] * view[15]
		matrix[12] = proj[14] * view[8]
		matrix[13] = proj[14] * view[9]
		matrix[14] = proj[14] * view[10]
		matrix[15] = proj[14] * view[11]
	}
	function copyArr(a, b) {
		for (let i = 0; i < a.length; i++) {
			b[i] = a[i]
		}
	}
	function FOV(fov) {
		let tang = Math.tan(fov * 0.5 * Math.PI / 180)
		let scale = 1 / tang
		let near = 1
		let far = 1000000
		currentFov = fov

		projection[0] = scale / width * height
		projection[5] = scale
		projection[10] = -far / (far - near)
		projection[11] = -1
		projection[14] = -far * near / (far - near)
	}
	function initModelView(camera, x, y, z, rx, ry) {
		if (camera) {
			camera.transform()
			uniformMatrix("view3d", program3D, "uView", false, camera.getMatrix())
		} else {
			copyArr(defaultModelView, modelView)
			rotX(modelView, rx)
			rotY(modelView, ry)
			trans(modelView, -x, -y, -z)
			matMult()
			transpose(matrix)
			uniformMatrix("view3d", program3D, "uView", false, matrix)
		}
	}

	function timeString(millis) {
		if (millis > 300000000000 || !millis) {
			return "never"
		}
		const SECOND = 1000
		const MINUTE = SECOND * 60
		const HOUR = MINUTE * 60
		const DAY = HOUR * 24
		const YEAR = DAY * 365

		if (millis < MINUTE) {
			return "just now"
		}

		let years = Math.floor(millis / YEAR)
		millis -= years * YEAR

		let days = Math.floor(millis / DAY)
		millis -= days * DAY

		let hours = Math.floor(millis / HOUR)
		millis -= hours * HOUR

		let minutes = Math.floor(millis / MINUTE)

		if (years) {
			return `${years} year${years > 1 ? "s" : ""} and ${days} day${day !== 1 ? "s" : ""} ago`
		}
		if (days) {
			return `${days} day${days > 1 ? "s" : ""} and ${hours} hour${hours !== 1 ? "s" : ""} ago`
		}
		if (hours) {
			return `${hours} hour${hours > 1 ? "s" : ""} and ${minutes} minute${minutes !== 1 ? "s" : ""} ago`
		}
		return `${minutes} minute${minutes > 1 ? "s" : ""} ago`
	}
	function roundBits(number) {
		return Math.round(number * 1000000) / 1000000
	}
	function rayTrace(x, y, z, shape) {
		let cf, cd = 1e9; //Closest face and distance
		let m; //Absolute distance to intersection point
		let ix, iy, iz; //Intersection coords
		let minX, miny, minz, maxX, maxY, maxZ, min, max; //Bounds of face coordinates
		let east = p.direction.x < 0
		let top = p.direction.y < 0
		let north = p.direction.z < 0
		let verts = shape.verts
		let faces = verts[0]

		//Top and bottom faces

		if (top) {
			faces = verts[1]
		}
		if (p.direction.y) {
			for (let face of faces) {
				min = face.min
				minX = min[0]
				minZ = min[2]
				max = face.max
				maxX = max[0]
				maxZ = max[2]
				m = (y + face[1] - p.y) / p.direction.y
				ix = m * p.direction.x + p.x
				iz = m * p.direction.z + p.z
				if (m > 0 && m < cd && ix >= x + minX && ix <= x + maxX && iz >= z + minZ && iz <= z + maxZ) {
					cd = m; //Ray crosses bottom face
					cf = top ? "top" : "bottom"
				}
			}
		}

		//West and East faces
		if (east) {
			faces = verts[4]
		} else {
			faces = verts[5]
		}
		if (p.direction.x) {
			for (let face of faces) {
				min = face.min
				minY = min[1]
				minZ = min[2]
				max = face.max
				maxY = max[1]
				maxZ = max[2]
				m = (x + face[0] - p.x) / p.direction.x
				iy = m * p.direction.y + p.y
				iz = m * p.direction.z + p.z
				if (m > 0 && m < cd && iy >= y + minY && iy <= y + maxY && iz >= z + minZ && iz <= z + maxZ) {
					cd = m
					cf = east ? "east" : "west"
				}
			}
		}

		//South and North faces
		if (north) {
			faces = verts[2]
		} else {
			faces = verts[3]
		}
		if (p.direction.z) {
			for (let face of faces) {
				min = face.min
				minX = min[0]
				minY = min[1]
				max = face.max
				maxX = max[0]
				maxY = max[1]
				m = (z + face[2] - p.z) / p.direction.z
				ix = m * p.direction.x + p.x
				iy = m * p.direction.y + p.y
				if (m > 0 && m < cd && ix >= x + minX && ix <= x + maxX && iy >= y + minY && iy <= y + maxY) {
					cd = m
					cf = north ? "north" : "south"
				}
			}
		}
		return [ cd, cf ]
	}
	function runRayTrace(x, y, z) {
		let block = world.getBlock(x, y, z)
		if (block) {
			let shape = blockData[block].shape
			let rt = rayTrace(x, y, z, blockData[block].shape)

			if (rt[1] && rt[0] < hitBox.closest) {
				hitBox.closest = rt[0]
				hitBox.face = rt[1]
				hitBox.pos = [ x, y, z ]
				hitBox.shape = blockData[block].shape
			}
		}
	}
	function lookingAt() {
		// Checks blocks in front of the player to see which one they're looking at
		hitBox.pos = null
		hitBox.closest = 1e9

		if (p.spectator) {
			return
		}
		let blockState = world.getBlock(p2.x, p2.y, p2.z)
		if (blockState) {
			hitBox.pos = [ p2.x, p2.y, p2.z ]
			hitBox.closest = 0
			hitBox.shape = blockData[blockState].shape
			return
		}

		let pd = p.direction

		// Target block
		let tx = Math.round(pd.x * reach + p.x)
		let ty = Math.round(pd.y * reach + p.y)
		let tz = Math.round(pd.z * reach + p.z)

		let minX = p2.x
		let maxX = 0
		let minY = p2.y
		let maxY = 0
		let minZ = p2.z
		let maxZ = 0

		for (let i = 0; i < reach + 1; i++) {
			if (i > reach) {
				i = reach
			}
			maxX = Math.round(p.x + pd.x * i)
			maxY = Math.round(p.y + pd.y * i)
			maxZ = Math.round(p.z + pd.z * i)
			if (maxX === minX && maxY === minY && maxZ === minZ) {
				continue
			}
			if (minX !== maxX) {
				if (minY !== maxY) {
					if (minZ !== maxZ) {
						runRayTrace(maxX, maxY, maxZ)
					}
					runRayTrace(maxX, maxY, minZ)
				}
				if (minZ !== maxZ) {
					runRayTrace(maxX, minY, maxZ)
				}
				runRayTrace(maxX, minY, minZ)
			}
			if (minY !== maxY) {
				if (minZ !== maxZ) {
					runRayTrace(minX, maxY, maxZ)
				}
				runRayTrace(minX, maxY, minZ)
			}
			if (minZ !== maxZ) {
				runRayTrace(minX, minY, maxZ)
			}
			if (hitBox.pos) {
				return; //The ray has collided; it can't possibly find a closer collision now
			}
			minZ = maxZ
			minY = maxY
			minX = maxX
		}
	}
	let inBox = function(x, y, z, w, h, d) {
		let iy = y - h/2 - p.topH
		let ih = h + p.bottomH + p.topH
		let ix = x - w/2 - p.w
		let iw = w + p.w*2
		let iz = z - d/2 - p.w
		let id = d + p.w*2
		return p.x > ix && p.y > iy && p.z > iz && p.x < ix + iw && p.y < iy + ih && p.z < iz + id
	}
	let onBox = function(x, y, z, w, h, d) {
		let iy = roundBits(y - h/2 - p.topH)
		let ih = roundBits(h + p.bottomH + p.topH)
		let ix = roundBits(x - w/2 - p.w)
		let iw = roundBits(w + p.w*2)
		let iz = roundBits(z - d/2 - p.w)
		let id = roundBits(d + p.w*2)
		return p.x > ix && p.y > iy && p.z > iz && p.x < ix + iw && p.y <= iy + ih && p.z < iz + id
	}
	function collided(x, y, z, vx, vy, vz, block) {
		if(p.spectator) {
			return false
		}
		let verts = blockData[block].shape.verts
		let px = roundBits(p.x - p.w - x)
		let py = roundBits(p.y - p.bottomH - y)
		let pz = roundBits(p.z - p.w - z)
		let pxx = roundBits(p.x + p.w - x)
		let pyy = roundBits(p.y + p.topH - y)
		let pzz = roundBits(p.z + p.w - z)
		let minX, minY, minZ, maxX, maxY, maxZ, min, max

		//Top and bottom faces
		let faces = verts[0]
		if (vy <= 0) {
			faces = verts[1]
		}
		if (!vx && !vz) {
			for (let face of faces) {
				min = face.min
				minX = min[0]
				minZ = min[2]
				max = face.max
				maxX = max[0]
				maxZ = max[2]
				if (face[1] > py && face[1] < pyy && minX < pxx && maxX > px && minZ < pzz && maxZ > pz) {
					if (vy <= 0) {
						p.onGround = true
						p.y = Math.round((face[1] + y + p.bottomH) * 10000) / 10000
						return false
					} else {
						return true
					}
				}
			}
			return false
		}

		//West and East faces
		if (vx < 0) {
			faces = verts[4]
		} else if (vx > 0) {
			faces = verts[5]
		}
		if (vx) {
			let col = false
			for (let face of faces) {
				min = face.min
				minZ = min[2]
				minY = min[1]
				max = face.max
				maxZ = max[2]
				maxY = max[1]
				if (face[0] > px && face[0] < pxx && minY < pyy && maxY > py && minZ < pzz && maxZ > pz) {
					if (maxY - py > 0.5) {
						p.canStepX = false
					}
					col = true
				}
			}
			return col
		}

		//South and North faces
		if (vz < 0) {
			faces = verts[2]
		} else if (vz > 0) {
			faces = verts[3]
		}
		if (vz) {
			let col = false
			for (let face of faces) {
				min = face.min
				minX = min[0]
				minY = min[1]
				max = face.max
				maxX = max[0]
				maxY = max[1]
				if (face[2] > pz && face[2] < pzz && minY < pyy && maxY > py && minX < pxx && maxX > px) {
					if (maxY - py > 0.5) {
						p.canStepZ = false
					}
					col = true
				}
			}
			return col
		}
	}
	let contacts = {
		array: [],
		size: 0,
		add: function(x, y, z, block) {
			if (this.size === this.array.length) {
				this.array.push([ x, y, z, block ])
			} else {
				this.array[this.size][0] = x
				this.array[this.size][1] = y
				this.array[this.size][2] = z
				this.array[this.size][3] = block
			}
			this.size++
		},
		clear: function() {
			this.size = 0
		},
	}
	let resolveContactsAndUpdatePosition = function() {
		let pminX = p2.x - 1
		let pmaxX = p2.x + 1
		let pminY = p2.y - 2
		let pmaxY = p2.y + 1
		let pminZ = p2.z - 1
		let pmaxZ = p2.z + 1
		let block = null
		let vel = p.velocity

		for (let x = pminX; x <= pmaxX; x++) {
			for (let y = pminY; y <= pmaxY; y++) {
				for (let z = pminZ; z <= pmaxZ; z++) {
					let block = world.getBlock(x, y, z)
					if (blockData[block].solid) {
						contacts.add(x, y, z, block)
					}
				}
			}
		}

		let dt = (win.performance.now() - p.lastUpdate) / 33
		dt = dt > 2 ? 2 : dt

		p.previousX = p.x
		p.previousY = p.y
		p.previousZ = p.z

		//Check collisions in the Y direction
		p.onGround = false
		p.canStepX = false
		p.canStepZ = false
		p.y += vel.y * dt
		for (let i = 0; i < contacts.size; i++) {
			block = contacts.array[i]
			if (collided(block[0], block[1], block[2], 0, vel.y, 0, block[3])) {
				p.y = p.previousY
				vel.y = 0
				break
			}
		}
		if (p.y === p.previousY && !p.flying) {
			p.canStepX = true
			p.canStepZ = true
		}

		var sneakLock = false, sneakSafe = false
		if (p.sneaking) {
			for (let i = 0; i < contacts.size; i++) {
				block = contacts.array[i]
				if (onBox(block[0], block[1], block[2], 1, 1, 1)) {
					sneakLock = true
					break
				}
			}
		}

		//Check collisions in the X direction
		p.x += vel.x * dt
		for (let i = 0; i < contacts.size; i++) {
			block = contacts.array[i]
			if (collided(block[0], block[1], block[2], vel.x, 0, 0, block[3])) {
				if (p.canStepX && !world.getBlock(block[0], block[1] + 1, block[2]) && !world.getBlock(block[0], block[1] + 2, block[2])) {
					continue
				}
				p.x = p.previousX
				vel.x = 0
				break
			}
			if (sneakLock && onBox(block[0], block[1], block[2], 1, 1, 1)) {
				sneakSafe = true
			}
		}

		if (sneakLock && !sneakSafe) {
			p.x = p.previousX
			vel.x = 0
		}
		sneakSafe = false

		//Check collisions in the Z direction
		p.z += vel.z * dt
		for (let i = 0; i < contacts.size; i++) {
			block = contacts.array[i]
			if (collided(block[0], block[1], block[2], 0, 0, vel.z, block[3])) {
				if (p.canStepZ && !world.getBlock(block[0], block[1] + 1, block[2]) && !world.getBlock(block[0], block[1] + 2, block[2])) {
					continue
				}
				p.z = p.previousZ
				vel.z = 0
				break
			}
			if (sneakLock && onBox(block[0], block[1], block[2], 1, 1, 1)) {
				sneakSafe = true
			}
		}

		if (sneakLock && !sneakSafe) {
			p.z = p.previousZ
			vel.z = 0
		}

		if (!p.flying) {
			let drag = p.onGround ? 0.5 : 0.85
			p.velocity.z += (p.velocity.z * drag - p.velocity.z) * dt
			p.velocity.x += (p.velocity.x * drag - p.velocity.x) * dt
		} else {
			let drag = 0.9
			p.velocity.z += (p.velocity.z * drag - p.velocity.z) * dt
			p.velocity.x += (p.velocity.x * drag - p.velocity.x) * dt
			p.velocity.y += (p.velocity.y * 0.8 - p.velocity.y) * dt
			if (p.onGround && !p.spectator) {
				p.flying = false
			}
		}

		p.lastUpdate = win.performance.now()
		contacts.clear()
		lookingAt()
	}
	let runGravity = function() {
		if (p.flying) {
			return
		}
		let dt = (win.performance.now() - p.lastUpdate) / 33
		dt = dt > 2 ? 2 : dt
		if(p.onGround) {
			if(Key[" "]) {
				p.velocity.y = p.jumpSpeed
				p.onGround = false
			} else {
				p.velocity.y = 0
			}
		} else {
			p.velocity.y += p.gravityStength * dt
			if(p.velocity.y < -p.maxYVelocity) {
				p.velocity.y = -p.maxYVelocity
			}
		}
	}

	function box2(sides, tex) {
		if (blockFill) {
			let i = 0
			for (let side in Block) {
				if (sides & Block[side]) {
					vertexAttribPointer("aVertex", program3D, "aVertex", 3, sideEdgeBuffers[Sides[side]])
					vertexAttribPointer("aTexture", program3D, "aTexture", 2, texCoordsBuffers[textureMap[tex[i]]])
					gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_INT, 0)
				}
				i++
			}
		}
		if (blockOutlines) {
			vertexAttribPointer("aVertex", program3D, "aVertex", 3, hitBox.shape.buffer)
			vertexAttribPointer("aTexture", program3D, "aTexture", 2, texCoordsBuffers[textureMap.hitbox])
			for (let i = 0; i < hitBox.shape.size; i++) {
				gl.drawArrays(gl.LINE_LOOP, i * 4, 4)
			}
		}
	}
	function block2(x, y, z, t, camera) {
		if (camera) {
			camera.transformation.translate(x, y, z)
			uniformMatrix("view3d", program3D, "uView", false, camera.getMatrix())
		} else {
			//copyArr(modelView, matrix)
			trans(modelView, x, y, z)
			matMult()
			trans(modelView, -x, -y, -z)
			transpose(matrix)
			uniformMatrix("view3d", program3D, "uView", false, matrix)
		}
		box2(0xff, blockData[t].textures)
	}

	function changeWorldBlock(t) {
		let pos = hitBox.pos
		if(pos && pos[1] > 0 && pos[1] < maxHeight) {
			let shape = t && blockData[t].shape
			if (t && shape.rotate) {
				let pi = Math.PI / 4
				if (p.ry <= pi) {} // North; default
				else if (p.ry < 3 * pi) {
					t |= WEST
				} else if (p.ry < 5 * pi) {
					t |= SOUTH
				} else if (p.ry < 7 * pi) {
					t |= EAST
				}
			}

			if (t && shape.flip && hitBox.face !== "top" && (hitBox.face === "bottom" || (p.direction.y * hitBox.closest + p.y) % 1 < 0.5)) {
				t |= FLIP
			}

			world.setBlock(hitBox.pos[0], hitBox.pos[1], hitBox.pos[2], t)
			if (t) {
				p.lastPlace = Date.now()
			} else {
				p.lastBreak = Date.now()
			}
		}
	}
	function newWorldBlock() {
		if(!hitBox.pos || !holding) {
			return
		}
		let pos = hitBox.pos, x= pos[0], y = pos[1], z = pos[2]
		switch(hitBox.face) {
			case "top":
				y += 1
				break
			case "bottom":
				y -= 1
				break
			case "south":
				z -= 1
				break
			case "north":
				z += 1
				break
			case "west":
				x -= 1
				break
			case "east":
				x += 1
				break
		}
		if (!inBox(x, y, z, 1, 1, 1) && !world.getBlock(x, y, z)) {
			pos[0] = x
			pos[1] = y
			pos[2] = z
			changeWorldBlock(holding < 0xff ? (holding | blockMode) : holding)
		}
	}

	// Save the coords for a small sphere used to carve out caves
	let sphere;
	{
		let blocks = []
		let radius = 3.5
		let radsq = radius * radius
		for (let i = -radius; i <= radius; i++) {
			for (let j = -radius; j <= radius; j++) {
				for (let k = -radius; k <= radius; k++) {
					if (i*i + j*j + k*k < radsq) {
						blocks.push(i|0, j|0, k|0)
					}
				}
			}
		}
		sphere = new Int8Array(blocks)
	}

	function isCave(x, y, z) {
		// Generate a 3D rigid multifractal noise shell.
		// Then generate another one with different coordinates.
		// Overlay them on top of each other, and the overlapping parts should form a cave-like structure.
		// This is extremely slow, and requires generating 2 noise values for every single block in the world.
		// TODO: replace with a crawler system of some sort, that will never rely on a head position in un-generated chunks.
		let smooth = 0.02
		let caveSize = 0.0055
		let cave1 = Math.abs(0.5 - caveNoise(x * smooth, y * smooth, z * smooth)) < caveSize
		let cave2 = Math.abs(0.5 - caveNoise(y * smooth, z * smooth, x * smooth)) < caveSize
		return (cave1 && cave2)
	}
	function carveSphere(x, y, z) {
		if (y > 3) {
			for (let i = 0; i < sphere.length; i += 3) {
				world.setBlock(x + sphere[i], y + sphere[i + 1], z + sphere[i + 2], blockIds.air, true)
			}
		}
	}

	let renderedChunks = 0
	function getBlock(x, y, z, blocks) {
		return blocks[((x >> 4) + 1) * 9 + ((y >> 4) + 1) * 3 + (z >> 4) + 1][((x & 15) << 8) + ((y & 15) << 4) + (z & 15)]
	}
	/**
	 * Returns a 1 if the face is exposed and should be drawn, or a 0 if the face is hidden
	 * 
	 * @param {number} x - The X coordinate of the block that may be covering a face
	 * @param {number} y - The Y coordinate of the block that may be covering a face
	 * @param {number} z - The Z coordinate of the block that may be covering a face
	 * @param {Collection} blocks - Some collection of blocks that can return the block at (x, y, z)
	 * @param {number} type - The blockstate of the block that's being considered for face culling
	 * @param {function} func - The function that can be called to return a block from the blocks collection
	*/
	function hideFace(x, y, z, blocks, type, func, sourceDir, dir) {
		let block = func.call(world, x, y, z, blocks)
		if (!block) {
			return 1
		}

		let data = blockData[block]
		let sourceData = blockData[type]

		let sourceRange = 3
		let hiderRange = 3
		if (func !== getBlock || screen === "loading") {
			// getBlock is only used during the optimize phase of worldGen
			sourceRange = sourceData.shape.cull[sourceDir]
			hiderRange = data.shape.cull[dir]
		}

		if ((sourceRange & hiderRange) !== sourceRange || sourceRange === 0 || block !== type && data.transparent || data.transparent && data.shadow) {
			return 1
		}
		return 0
	}
	let getShadows = {
		shade: [ 1, 0.85, 0.7, 0.6, 0.3 ],
		ret: [],
		blocks: [],
		top: function(x, y, z, block) { // Actually the bottom... How did these get flipped?
			let blocks = this.blocks
			let ret = this.ret
			blocks[0] = blockData[getBlock(x-1, y-1, z-1, block)].shadow
			blocks[1] = blockData[getBlock(x, y-1, z-1, block)].shadow
			blocks[2] = blockData[getBlock(x+1, y-1, z-1, block)].shadow
			blocks[3] = blockData[getBlock(x-1, y-1, z, block)].shadow
			blocks[4] = blockData[getBlock(x, y-1, z, block)].shadow
			blocks[5] = blockData[getBlock(x+1, y-1, z, block)].shadow
			blocks[6] = blockData[getBlock(x-1, y-1, z+1, block)].shadow
			blocks[7] = blockData[getBlock(x, y-1, z+1, block)].shadow
			blocks[8] = blockData[getBlock(x+1, y-1, z+1, block)].shadow

			ret[0] = this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]]*0.75
			ret[1] = this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]]*0.75
			ret[2] = this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]]*0.75
			ret[3] = this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]]*0.75
			return ret
		},
		bottom: function(x, y, z, block) { // Actually the top
			let blocks = this.blocks
			let ret = this.ret
			blocks[0] = blockData[getBlock(x-1, y+1, z-1, block)].shadow
			blocks[1] = blockData[getBlock(x, y+1, z-1, block)].shadow
			blocks[2] = blockData[getBlock(x+1, y+1, z-1, block)].shadow
			blocks[3] = blockData[getBlock(x-1, y+1, z, block)].shadow
			blocks[4] = blockData[getBlock(x, y+1, z, block)].shadow
			blocks[5] = blockData[getBlock(x+1, y+1, z, block)].shadow
			blocks[6] = blockData[getBlock(x-1, y+1, z+1, block)].shadow
			blocks[7] = blockData[getBlock(x, y+1, z+1, block)].shadow
			blocks[8] = blockData[getBlock(x+1, y+1, z+1, block)].shadow

			ret[0] = this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]]
			ret[1] = this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]]
			ret[2] = this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]]
			ret[3] = this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]]
			return ret
		},
		north: function(x, y, z, block) {
			let blocks = this.blocks
			let ret = this.ret
			blocks[0] = blockData[getBlock(x-1, y-1, z+1, block)].shadow
			blocks[1] = blockData[getBlock(x, y-1, z+1, block)].shadow
			blocks[2] = blockData[getBlock(x+1, y-1, z+1, block)].shadow
			blocks[3] = blockData[getBlock(x-1, y, z+1, block)].shadow
			blocks[4] = blockData[getBlock(x, y, z+1, block)].shadow
			blocks[5] = blockData[getBlock(x+1, y, z+1, block)].shadow
			blocks[6] = blockData[getBlock(x-1, y+1, z+1, block)].shadow
			blocks[7] = blockData[getBlock(x, y+1, z+1, block)].shadow
			blocks[8] = blockData[getBlock(x+1, y+1, z+1, block)].shadow

			ret[0] = this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]]*0.95
			ret[1] = this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]]*0.95
			ret[2] = this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]]*0.95
			ret[3] = this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]]*0.95
			return ret
		},
		south: function(x, y, z, block) {
			let blocks = this.blocks
			let ret = this.ret
			blocks[0] = blockData[getBlock(x-1, y-1, z-1, block)].shadow
			blocks[1] = blockData[getBlock(x-1, y, z-1, block)].shadow
			blocks[2] = blockData[getBlock(x-1, y+1, z-1, block)].shadow
			blocks[3] = blockData[getBlock(x, y-1, z-1, block)].shadow
			blocks[4] = blockData[getBlock(x, y, z-1, block)].shadow
			blocks[5] = blockData[getBlock(x, y+1, z-1, block)].shadow
			blocks[6] = blockData[getBlock(x+1, y-1, z-1, block)].shadow
			blocks[7] = blockData[getBlock(x+1, y, z-1, block)].shadow
			blocks[8] = blockData[getBlock(x+1, y+1, z-1, block)].shadow

			ret[0] = this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]]*0.95
			ret[1] = this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]]*0.95
			ret[2] = this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]]*0.95
			ret[3] = this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]]*0.95
			return ret
		},
		east: function(x, y, z, block) {
			let blocks = this.blocks
			let ret = this.ret
			blocks[0] = blockData[getBlock(x+1, y-1, z-1, block)].shadow
			blocks[1] = blockData[getBlock(x+1, y, z-1, block)].shadow
			blocks[2] = blockData[getBlock(x+1, y+1, z-1, block)].shadow
			blocks[3] = blockData[getBlock(x+1, y-1, z, block)].shadow
			blocks[4] = blockData[getBlock(x+1, y, z, block)].shadow
			blocks[5] = blockData[getBlock(x+1, y+1, z, block)].shadow
			blocks[6] = blockData[getBlock(x+1, y-1, z+1, block)].shadow
			blocks[7] = blockData[getBlock(x+1, y, z+1, block)].shadow
			blocks[8] = blockData[getBlock(x+1, y+1, z+1, block)].shadow

			ret[0] = this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]]*0.8
			ret[1] = this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]]*0.8
			ret[2] = this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]]*0.8
			ret[3] = this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]]*0.8
			return ret
		},
		west: function(x, y, z, block) {
			let blocks = this.blocks
			let ret = this.ret
			blocks[0] = blockData[getBlock(x-1, y-1, z-1, block)].shadow
			blocks[1] = blockData[getBlock(x-1, y, z-1, block)].shadow
			blocks[2] = blockData[getBlock(x-1, y+1, z-1, block)].shadow
			blocks[3] = blockData[getBlock(x-1, y-1, z, block)].shadow
			blocks[4] = blockData[getBlock(x-1, y, z, block)].shadow
			blocks[5] = blockData[getBlock(x-1, y+1, z, block)].shadow
			blocks[6] = blockData[getBlock(x-1, y-1, z+1, block)].shadow
			blocks[7] = blockData[getBlock(x-1, y, z+1, block)].shadow
			blocks[8] = blockData[getBlock(x-1, y+1, z+1, block)].shadow

			ret[0] = this.shade[blocks[7] + blocks[8] + blocks[4] + blocks[5]]*0.8
			ret[1] = this.shade[blocks[5] + blocks[4] + blocks[2] + blocks[1]]*0.8
			ret[2] = this.shade[blocks[4] + blocks[3] + blocks[1] + blocks[0]]*0.8
			ret[3] = this.shade[blocks[6] + blocks[7] + blocks[3] + blocks[4]]*0.8
			return ret
		},
	}

	function interpolateShadows(shadows, x, y) {
		let sx = (shadows[1] - shadows[0]) * x + shadows[0]
		let sx2 = (shadows[3] - shadows[2]) * x + shadows[2]
		return (sx2 - sx) * y + sx
	}

	class Section {
		constructor(x, y, z, size, chunk) {
			this.x = x
			this.y = y
			this.z = z
			this.size = size
			this.arraySize = size * size * size
			this.blocks = new Int32Array(this.arraySize)
			this.compressed = new Uint8Array(this.arraySize)
			this.renderData = []
			this.renderLength = 0
			this.faces = 0
			this.hasVisibleBlocks = false
			this.chunk = chunk
			this.edited = false
			this.caves = !caves
			this.pallete = [0]
			this.palleteMap = {"0": 0}
			this.palleteSize = 0
		}
		getBlock(x, y, z) {
			let s = this.size
			return this.blocks[x * s * s + y * s + z]
		}
		setBlock(x, y, z, blockId) {
			let s = this.size
			this.blocks[x * s * s + y * s + z] = blockId
		}
		deleteBlock(x, y, z) {
			let s = this.size
			this.blocks[x * s * s + y * s + z] = 0
		}
		optimize() {
			let visible = false
			let pos = 0
			let xx = this.x
			let yy = this.y
			let zz = this.z
			let blockState = 0
			let palleteIndex = 0
			let index = 0
			let s = this.size
			let blocks = this.blocks
			this.hasVisibleBlocks = false
			this.renderLength = 0
			let localBlocks = world.getAdjacentSubchunks(xx, yy, zz)

			//Check all the blocks in the subchunk to see if they're visible.
			for (let i = 0; i < s; i++) {
				for (let j = 0; j < s; j++) {
					for (let k = 0; k < s; k++, index++) {
						blockState = blocks[index]

						if (this.palleteMap[blockState] === undefined) {
							this.palleteMap[blockState] = this.pallete.length
							palleteIndex = this.pallete.length
							this.pallete.push(blockState)
						} else {
							palleteIndex = this.palleteMap[blockState]
						}

						visible = blockState && (hideFace(i-1, j, k, localBlocks, blockState, getBlock, "west", "east")
						| hideFace(i+1, j, k, localBlocks, blockState, getBlock, "east", "west") << 1
						| hideFace(i, j-1, k, localBlocks, blockState, getBlock, "bottom", "top") << 2
						| hideFace(i, j+1, k, localBlocks, blockState, getBlock, "top", "bottom") << 3
						| hideFace(i, j, k-1, localBlocks, blockState, getBlock, "south", "north") << 4
						| hideFace(i, j, k+1, localBlocks, blockState, getBlock, "north", "south") << 5)
						if (visible) {
							pos = (i | j << 4 | k << 8) << 19
							this.renderData[this.renderLength++] = 1 << 31 | pos | visible << 13 | palleteIndex
							this.hasVisibleBlocks = true
						}
					}
				}
			}
		}
		updateBlock(x, y, z, world) {
			if (!world.meshQueue.includes(this.chunk)) {
				world.meshQueue.push(this.chunk)
			}
			let i = x
			let j = y
			let k = z
			let s = this.size
			x += this.x
			y += this.y
			z += this.z
			let blockState = this.blocks[i * s * s + j * s + k]
			let visible = blockState && (hideFace(x-1, y, z, 0, blockState, world.getBlock, "west", "east")
			| hideFace(x+1, y, z, 0, blockState, world.getBlock, "east", "west") << 1
			| hideFace(x, y-1, z, 0, blockState, world.getBlock, "bottom", "top") << 2
			| hideFace(x, y+1, z, 0, blockState, world.getBlock, "top", "bottom") << 3
			| hideFace(x, y, z-1, 0, blockState, world.getBlock, "south", "north") << 4
			| hideFace(x, y, z+1, 0, blockState, world.getBlock, "north", "south") << 5)
			let pos = (i | j << 4 | k << 8) << 19
			let index = -1

			// Find index of current block in this.renderData
			for (let i = 0; i < this.renderLength; i++) {
				if ((this.renderData[i] & 0x7ff80000) === pos) {
					index = i
					break
				}
			}

			// Update pallete
			if (this.palleteMap[blockState] === undefined) {
				this.palleteMap[blockState] = this.pallete.length
				this.pallete.push(blockState)
			}

			if (index < 0 && !visible) {
				// Wasn't visible before, isn't visible after.
				return
			}
			if (!visible) {
				// Was visible before, isn't visible after.
				this.renderData.splice(index, 1)
				this.renderLength--
				this.hasVisibleBlocks = !!this.renderLength
				return
			}
			if (visible && index < 0) {
				// Wasn't visible before, is visible after.
				index = this.renderLength++
				this.hasVisibleBlocks = true
			}
			this.renderData[index] = 1 << 31 | pos | visible << 13 | this.palleteMap[blockState]
		}
		genMesh(barray, index) {
			if (!this.renderLength) {
				return index
			}
			let length = this.renderLength
			let rData = this.renderData
			let x = 0, y = 0, z = 0, loc = 0, data = 0, sides = 0, tex = null, x2 = 0, y2 = 0, z2 = 0, verts = null, texVerts = null, texShapeVerts = null, tx = 0, ty = 0
			let wx = this.x, wy = this.y, wz = this.z
			let blocks = world.getAdjacentSubchunks(wx, wy, wz)
			let block = null

			let shadows = null
			let blockSides = Object.keys(Block)
			let side = ""
			let shapeVerts = null
			let shapeTexVerts = null
			let pallete = this.pallete
			let intShad = interpolateShadows
			
			for (let i = 0; i < length; i++) {
				data = rData[i]
				block = blockData[pallete[data & 0x1fff]]
				tex = block.textures
				sides = data >> 13 & 0x3f
				loc = data >> 19 & 0xfff
				x = loc & 15
				y = loc >> 4 & 15
				z = loc >> 8 & 15

				x2 = x + this.x
				y2 = y + this.y
				z2 = z + this.z

				shapeVerts = block.shape.verts
				shapeTexVerts = block.shape.texVerts

				let texNum = 0
				for (let n = 0; n < 6; n++) {
					side = blockSides[n]
					if (sides & Block[side]) {
						shadows = getShadows[side](x, y, z, blocks)
						let directionalFaces = shapeVerts[Sides[side]]
						// if (directionalFaces.length > 1) {
						// 	let average = (shadows[0] + shadows[1] + shadows[2] + shadows[3]) / 4
						// 	shadows[0] = average
						// 	shadows[1] = average
						// 	shadows[2] = average
						// 	shadows[3] = average
						// }
						for (let facei = 0; facei < directionalFaces.length; facei++) {
							verts = directionalFaces[facei]
							texVerts = textureCoords[textureMap[tex[texNum]]]
							tx = texVerts[0]
							ty = texVerts[1]
							texShapeVerts = shapeTexVerts[n][facei]

							barray[index] = verts[0] + x2
							barray[index+1] = verts[1] + y2
							barray[index+2] = verts[2] + z2
							barray[index+3] = tx + texShapeVerts[0]
							barray[index+4] = ty + texShapeVerts[1]
							barray[index+5] = shadows[0]

							barray[index+6] = verts[3] + x2
							barray[index+7] = verts[4] + y2
							barray[index+8] = verts[5] + z2
							barray[index+9] = tx + texShapeVerts[2]
							barray[index+10] = ty + texShapeVerts[3]
							barray[index+11] = shadows[1]

							barray[index+12] = verts[6] + x2
							barray[index+13] = verts[7] + y2
							barray[index+14] = verts[8] + z2
							barray[index+15] = tx + texShapeVerts[4]
							barray[index+16] = ty + texShapeVerts[5]
							barray[index+17] = shadows[2]

							barray[index+18] = verts[9] + x2
							barray[index+19] = verts[10] + y2
							barray[index+20] = verts[11] + z2
							barray[index+21] = tx + texShapeVerts[6]
							barray[index+22] = ty + texShapeVerts[7]
							barray[index+23] = shadows[3]
							index += 24
						}
					}
					texNum++
				}
			}
			return index
		}
		carveCaves() {
			let wx = this.x + 16, wz = this.z + 16, wy = this.y + 16
			for (let x = this.x, xx = 0; x < wx; x++, xx++) {
				for (let z = this.z, zz = 0; z < wz; z++, zz++) {
					wy = this.chunk.tops[zz * 16 + xx]
					for (let y = this.y; y < wy; y++) {
						if (isCave(x, y, z)) {
							carveSphere(x, y, z)
						}
					}
				}
			}
			this.caves = true
		}
		tick() {
			for (let i = 0; i < 3; i++) {
				let rnd = Math.random() * this.blocks.length | 0
				if ((this.blocks[rnd]) === blockIds.grass) {
					// Spread grass

					let x = (rnd >> 8) + this.x
					let y = (rnd >> 4 & 15) + this.y
					let z = (rnd & 15) + this.z
					if (!blockData[world.getBlock(x, y + 1, z)].transparent) {
						world.setBlock(x, y, z, blockIds.dirt, false)
						return
					}

					let rnd2 = Math.random() * 27 | 0
					let x2 = rnd2 % 3 - 1
					rnd2 = (rnd2 - x2 - 1) / 3
					let y2 = rnd2 % 3 - 1
					rnd2 = (rnd2 - y2 - 1) / 3
					z += rnd2 - 1
					x += x2
					y += y2

					if (world.getBlock(x, y, z) === blockIds.dirt && world.getBlock(x, y + 1, z) === blockIds.air) {
						world.setBlock(x, y, z, blockIds.grass, false)
					}
				}
			}
		}
	}
	let emptySection = new Section(0, 0, 0, 16)
	let fullSection = new Section(0, 0, 0, 16)
	fullSection.blocks.fill(blockIds.bedrock)

	class Chunk {
		constructor(x, z) {
			this.x = x
			this.z = z
			this.maxY = 0
			this.minY = 255
			this.sections = []
			this.cleanSections = []
			this.tops = new Uint8Array(16 * 16); // Store the heighest block at every (x,z) coordinate
			this.optimized = false
			this.generated = false; // Terrain
			this.populated = superflat; // Trees and ores
			this.lazy = false
			this.edited = false
			this.loaded = false
			this.caves = !caves
		}
		getBlock(x, y, z) {
			let s = y >> 4
			return this.sections.length > s ? this.sections[s].getBlock(x, y & 15, z) : 0
		}
		setBlock(x, y, z, blockID, hidden, user) {
			if (!this.sections[y >> 4]) {
				do {
					this.sections.push(new Section(this.x, this.sections.length * 16, this.z, 16, this))
				} while (!this.sections[y >> 4])
			}
			if (user && !this.sections[y >> 4].edited) {
				this.cleanSections[y >> 4] = this.sections[y >> 4].blocks.slice()
				this.sections[y >> 4].edited = true
				this.edited = true
			}
			this.sections[y >> 4].setBlock(x, y & 15, z, blockID, hidden)
		}
		optimize() {
			for (let i = 0; i < this.sections.length; i++) {
				this.sections[i].optimize()
			}
			if (!world.meshQueue.includes(this)) {
				world.meshQueue.push(this)
			}
			this.optimized = true
		}
		render() {
			if (!this.buffer) {
				return
			}
			if (p.canSee(this.x, this.minY, this.z, this.maxY)) {
				renderedChunks++
				gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer)
				gl.vertexAttribPointer(glCache.aVertex, 3, gl.FLOAT, false, 24, 0)
				gl.vertexAttribPointer(glCache.aTexture, 2, gl.FLOAT, false, 24, 12)
				gl.vertexAttribPointer(glCache.aShadow, 1, gl.FLOAT, false, 24, 20)
				gl.drawElements(gl.TRIANGLES, 6 * this.faces, gl.UNSIGNED_INT, 0)
			}
		}
		updateBlock(x, y, z, world, lazy) {
			if (this.buffer) {
				this.lazy = lazy
				if (this.sections.length > y >> 4) {
					this.sections[y >> 4].updateBlock(x, y & 15, z, world)
				}
			}
		}
		deleteBlock(x, y, z, user) {
			if (!this.sections[y >> 4]) {
				return
			}
			if (user && !this.sections[y >> 4].edited) {
				this.cleanSections[y >> 4] = this.sections[y >> 4].blocks.slice()
				this.sections[y >> 4].edited = true
				this.edited = true
			}
			this.sections[y >> 4].deleteBlock(x, y & 15, z)
			this.minY = y < this.minY ? y : this.minY
			this.maxY = y > this.maxY ? y : this.maxY
		}
		carveCaves() {
			for (let i = 0; i < this.sections.length; i++) {
				if (!this.sections[i].caves) {
					this.sections[i].carveCaves()
					if (i + 1 >= this.sections.length) {
						this.caves = true
					}
					return
				}
			}
		}
		populate() {
			randomSeed(hash(this.x, this.z) * 210000000)
			let wx = 0, wz = 0, ground = 0, top = 0, rand = 0, place = false

			for (let i = 0; i < 16; i++) {
				for (let k = 0; k < 16; k++) {
					wx = this.x + i
					wz = this.z + k
					ground = this.tops[k * 16 + i]
					if (trees && random() < 0.005 && this.getBlock(i, ground, k)) {

						top = ground + Math.floor(4.5 + random(2.5))
						rand = Math.floor(random(4096))
						let tree = random() < 0.6 ? blockIds.oakLog : ++top && blockIds.birchLog

						//Center
						for (let j = ground + 1; j <= top; j++) {
							this.setBlock(i, j, k, tree)
						}
						this.setBlock(i, top + 1, k, blockIds.leaves)
						this.setBlock(i, ground, k, blockIds.dirt)

						//Bottom leaves
						for (let x = -2; x <= 2; x++) {
							for (let z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top - 2, wz + z, blockIds.leaves)
										}
									} else {
										world.spawnBlock(wx + x, top - 2, wz + z, blockIds.leaves)
									}
								}
							}
						}

						//2nd layer leaves
						for (let x = -2; x <= 2; x++) {
							for (let z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top - 1, wz + z, blockIds.leaves)
										}
									} else {
										world.spawnBlock(wx + x, top - 1, wz + z, blockIds.leaves)
									}
								}
							}
						}

						//3rd layer leaves
						for (let x = -1; x <= 1; x++) {
							for (let z = -1; z <= 1; z++) {
								if (x || z) {
									if (x & z) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top, wz + z, blockIds.leaves)
										}
									} else {
										world.spawnBlock(wx + x, top, wz + z, blockIds.leaves)
									}
								}
							}
						}

						//Top leaves
						world.spawnBlock(wx + 1, top + 1, wz, blockIds.leaves)
						world.spawnBlock(wx, top + 1, wz - 1, blockIds.leaves)
						world.spawnBlock(wx, top + 1, wz + 1, blockIds.leaves)
						world.spawnBlock(wx - 1, top + 1, wz, blockIds.leaves)
					}

					// Blocks of each per chunk in Minecraft
					// Coal: 185.5
					// Iron: 111.5
					// Gold: 10.4
					// Redstone: 29.1
					// Diamond: 3.7
					// Lapis: 4.1
					ground -= 4
					
					if (random() < 1.3 / 256) {
						let y = random() * 16 | 0 + 1
						y = y < ground ? y : ground
						if (this.getBlock(i, y, k)) {
							this.setBlock(i, y < ground ? y : ground, k, blockIds.emeraldOre)
						}
					}

					if (random() < 3.7 / 256) {
						let y = random() * 16 | 0 + 1
						y = y < ground ? y : ground
						if (this.getBlock(i, y, k)) {
							this.setBlock(i, y < ground ? y : ground, k, blockIds.diamondOre)
						}
					}

					if (random() < 111.5 / 256) {
						let y = random() * 64 | 0 + 1
						y = y < ground ? y : ground
						if (this.getBlock(i, y, k)) {
							this.setBlock(i, y < ground ? y : ground, k, blockIds.ironOre)
						}
					}

					if (random() < 185.5 / 256) {
						let y = random() * ground | 0 + 1
						y = y < ground ? y : ground
						if (this.getBlock(i, y, k)) {
							this.setBlock(i, y < ground ? y : ground, k, blockIds.coalOre)
						}
					}

					if (random() < 10.4 / 256) {
						let y = random() * 32 | 0 + 1
						y = y < ground ? y : ground
						if (this.getBlock(i, y, k)) {
							this.setBlock(i, y < ground ? y : ground, k, blockIds.goldOre)
						}
					}

					if (random() < 29.1 / 256) {
						let y = random() * 16 | 0 + 1
						y = y < ground ? y : ground
						if (this.getBlock(i, y, k)) {
							this.setBlock(i, y < ground ? y : ground, k, blockIds.redstoneOre)
						}
					}

					if (random() < 4.1 / 256) {
						let y = random() * 32 | 0 + 1
						y = y < ground ? y : ground
						if (this.getBlock(i, y, k)) {
							this.setBlock(i, y < ground ? y : ground, k, blockIds.lapisOre)
						}
					}
				}
			}
			
			//Plant gen
{
            for (let i = 0; i < 16; i++) {
	for (let k = 0; k < 16; k++) {
		ground = this.tops[k * 16 + i]
	if (trees && random() < 0.04 && this.getBlock(i, ground, k)) {

        top = ground + Math.floor(4.5 + random(2.5))
	this.setBlock(i, ground + 1, k, blockIds.poppy | FLOWER)
	}		
	}
}
            for (let i = 0; i < 16; i++) {
	for (let k = 0; k < 16; k++) {
		ground = this.tops[k * 16 + i]
	if (trees && random() < 0.02 && this.getBlock(i, ground, k)) {

        top = ground + Math.floor(4.5 + random(2.5))
	this.setBlock(i, ground + 1, k, blockIds.dandelion | FLOWER)
	}		
	}
}
            for (let i = 0; i < 16; i++) {
	for (let k = 0; k < 16; k++) {
		ground = this.tops[k * 16 + i]
	if (trees && random() < 0.009 && this.getBlock(i, ground, k)) {

        top = ground + Math.floor(4.5 + random(2.5))
	this.setBlock(i, ground + 1, k, blockIds.flowerOftheValley | FLOWER)
	}		
	}
}
            for (let i = 0; i < 16; i++) {
	for (let k = 0; k < 16; k++) {
		ground = this.tops[k * 16 + i]
	if (trees && random() < 0.09 && this.getBlock(i, ground, k)) {

        top = ground + Math.floor(4.5 + random(2.5))
	this.setBlock(i, ground + 1, k, blockIds.TallGrass | FLOWER)
	}		
	}
}
}
			this.populated = true
		}
		genMesh() {
			let start = win.performance.now()
			let barray = bigArray
			let index = 0
			for (let i = 0; i < this.sections.length; i++) {
				index = this.sections[i].genMesh(barray, index)
			}
			let arrayDone = win.performance.now()

			if (!this.buffer) {
				this.buffer = gl.createBuffer()
			}
			let data = barray.slice(0, index)

			let maxY = 0
			let minY = 255
			let y = 0
			for (let i = 1; i < data.length; i += 6) {
				y = data[i]
				maxY = Math.max(maxY, y)
				minY = Math.min(minY, y)
			}
			this.maxY = maxY
			this.minY = minY
			this.faces = data.length / 24
			gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer)
			gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW)
			this.lazy = false
		}
		tick() {
			if (this.edited) {
				for (let i = 0; i < this.sections.length; i++) {
					if (this.sections[i].edited) {
						this.sections[i].tick()
					}
				}
			}
		}
		load() {
			let chunkX = this.x >> 4
			let chunkZ = this.z >> 4
			let load = null
			
			for (let i = 0; i < world.loadFrom.length; i++) {
				load = world.loadFrom[i]
				if (load.x === chunkX && load.z === chunkZ) {
					let y = load.y * 16
					for (let j in load.blocks) {
						world.setBlock((j >> 8 & 15) + this.x, (j >> 4 & 15) + y, (j & 15) + this.z, load.blocks[j])
					}
					world.loadFrom.splice(i--, 1)
				}
			}
			this.loaded = true
		}
	}

	let analytics = {
		totalTickTime: 0,
		worstFrameTime: 0,
		totalRenderTime: 0,
		totalFrameTime: 0,
		lastUpdate: 0,
		frames: 1,
		displayedTickTime: "0",
		displayedRenderTime: "0",
		displayedFrameTime: "0",
		displayedwFrameTime: 0,
		fps: 0,
	}
	function chunkDist(c) {
		let dx = p.x - c.x
		let dz = p.z - c.z
		if (dx > 16) {
			dx -= 16
		} else if (dx > 0) {
			dx = 0
		}
		if (dz > 16) {
			dz -= 16
		} else if (dz > 0) {
			dz = 0
		}
		return Math.sqrt(dx * dx + dz * dz)
	}
	function sortChunks(c1, c2) { //Sort the list of chunks based on distance from the player
		let dx1 = p.x - c1.x - 8
		let dy1 = p.z - c1.z - 8
		let dx2 = p.x - c2.x - 8
		let dy2 = p.z - c2.z - 8
		return dx1 * dx1 + dy1 * dy1 - (dx2 * dx2 + dy2 * dy2)
	}
	function fillReqs(x, z) {
		// Chunks must all be loaded first.
		var done = true
		for (let i = x - 2; i <= x + 2; i++) {
			for (let j = z - 2; j <= z + 2; j++) {
				let chunk = world.loaded[(i + world.offsetX) * world.lwidth + j + world.offsetZ]
				if (!chunk.generated) {
					world.generateQueue.push(chunk)
					done = false
				}
				if (!chunk.populated && i >= x - 1 && i <= x + 1 && j >= z - 1 && j <= z + 1) {
					world.populateQueue.push(chunk)
					done = false
				}
			}
		}
		return done
	}
	function maxDist(x, z, x2, z2) {
		let ax = Math.abs(x2 - x)
		let az = Math.abs(z2 - z)
		return Math.max(ax, az)
	}
	function renderFilter(chunk) {
		return maxDist(chunk.x >> 4, chunk.z >> 4, p.cx, p.cz) <= settings.renderDistance
	}

	function debug(message) {
		let ellapsed = performance.now() - debug.start
		if (ellapsed > 30) {
			console.log(message, ellapsed.toFixed(2), "milliseconds")
		}
	}

	let fogDist = 16
	class World {
		constructor() {
			generatedChunks = 0
			fogDist = 16
			p.y = superflat ? 6 : (Math.round(noise(8 * generator.smooth, 8 * generator.smooth) * generator.height) + 2 + generator.extra)

			//Initialize the world's arrays
			this.chunks = []
			this.loaded = []
			this.sortedChunks = []
			this.offsetX = 0
			this.offsetZ = 0
			this.lwidth = 0
			this.chunkGenQueue = []
			this.populateQueue = []
			this.generateQueue = []
			this.meshQueue = []
			this.loadFrom = []
			this.lastChunk = ","
		}
		genChunk(chunk) {
			let x = chunk.x >> 4
			let z = chunk.z >> 4
			let trueX = chunk.x
			let trueZ = chunk.z

			if (chunk.generated) {
				return false
			}
			let hide = !loadString
			let smoothness = generator.smooth
			let hilliness = generator.height
			let gen = 0
			for (let i = 0; i < 16; i++) {
				for (let k = 0; k < 16; k++) {
					gen = superflat ? 4 : Math.round(noise((trueX + i) * smoothness, (trueZ + k) * smoothness) * hilliness) + generator.extra
					chunk.tops[k * 16 + i] = gen

					chunk.setBlock(i, gen, k, blockIds.grass)
					chunk.setBlock(i, gen - 1, k, blockIds.dirt)
					chunk.setBlock(i, gen - 2, k, blockIds.dirt)
					chunk.setBlock(i, gen - 3, k, blockIds.dirt)
					for (let j = 1; j < gen - 3; j++) {
						chunk.setBlock(i, j, k, blockIds.stone)
					}
					chunk.setBlock(i, 0, k, blockIds.bedrock)
				}
			}
			chunk.generated = true
		}
		getAdjacentSubchunks(x, y, z) {
			let minChunkX = x - 16 >> 4
			let maxChunkX = x + 16 >> 4
			let minChunkY = y - 16 >> 4
			let maxChunkY = y + 16 >> 4
			let minChunkZ = z - 16 >> 4
			let maxChunkZ = z + 16 >> 4
			let section = null
			let ret = []
			for (x = minChunkX; x <= maxChunkX; x++) {
				for (let y = minChunkY; y <= maxChunkY; y++) {
					for (z = minChunkZ; z <= maxChunkZ; z++) {
						if (y < 0) {
							ret.push(fullSection.blocks)
						} else if (this.chunks[x] && this.chunks[x][z]) {
							section = this.chunks[x][z].sections[y] || emptySection
							ret.push(section.blocks)
						} else {
							ret.push(emptySection.blocks)
						}
					}
				}
			}
			return ret
		}
		updateBlock(x, y, z, lazy) {
			let chunk = this.chunks[x >> 4] && this.chunks[x >> 4][z >> 4]
			if (chunk && chunk.buffer) {
				chunk.updateBlock(x & 15, y, z & 15, this, lazy)
			}
		}
		getWorldBlock(x, y, z) {
			if (!this.chunks[x >> 4] || !this.chunks[x >> 4][z >> 4]) {
				return blockIds.air
			}
			return this.chunks[x >> 4][z >> 4].getBlock(x & 15, y, z & 15)
		}
		getBlock(x, y, z) {
			let X = (x >> 4) + this.offsetX
			let Z = (z >> 4) + this.offsetZ
			if (y > maxHeight) {
				return blockIds.air
			} else if (y < 0) {
				return blockIds.bedrock
			} else if (X < 0 || X >= this.lwidth || Z < 0 || Z >= this.lwidth) {
				return this.getWorldBlock(x, y, z)
			}
			return this.loaded[X * this.lwidth + Z].getBlock(x & 15, y, z & 15)
		}
		setBlock(x, y, z, blockID, lazy) {
			if (!this.chunks[x >> 4] || !this.chunks[x >> 4][z >> 4]) {
				return
			}
			let chunk = this.chunks[x >> 4][z >> 4]

			let xm = x & 15
			let zm = z & 15
			if (blockID) {
				chunk.setBlock(xm, y, zm, blockID, false, !lazy)
			} else {
				chunk.deleteBlock(xm, y, zm, !lazy)
			}

			if (lazy) {
				return
			}

			//Update the 6 adjacent blocks and 1 changed block
			if (xm && xm !== 15 && zm && zm !== 15) {
				chunk.updateBlock(xm - 1, y, zm, this, lazy)
				chunk.updateBlock(xm + 1, y, zm, this, lazy)
				chunk.updateBlock(xm, y - 1, zm, this, lazy)
				chunk.updateBlock(xm, y + 1, zm, this, lazy)
				chunk.updateBlock(xm, y, zm - 1, this, lazy)
				chunk.updateBlock(xm, y, zm + 1, this, lazy)
			}
			else {
				this.updateBlock(x - 1, y, z, lazy)
				this.updateBlock(x + 1, y, z, lazy)
				this.updateBlock(x, y - 1, z, lazy)
				this.updateBlock(x, y + 1, z, lazy)
				this.updateBlock(x, y, z - 1, lazy)
				this.updateBlock(x, y, z + 1, lazy)
			}

			chunk.updateBlock(xm, y, zm, this, lazy)

			// Update the corner chunks so shadows in adjacent chunks update correctly
			if (xm | zm === 0) { this.updateBlock(x - 1, y, z - 1, lazy); }
			if (xm === 15 && zm === 0) { this.updateBlock(x + 1, y, z - 1, lazy); }
			if (xm === 0 && zm === 15) { this.updateBlock(x - 1, y, z + 1, lazy); }
			if (xm & zm === 15) { this.updateBlock(x + 1, y, z + 1, lazy); }
		}
		spawnBlock(x, y, z, blockID) {
			//Sets a block anywhere without causing block updates around it. Only to be used in world gen.

			let chunkX = x >> 4
			let chunkZ = z >> 4
			if (!this.chunks[chunkX]) {
				this.chunks[chunkX] = []
			}
			let chunk = this.chunks[chunkX][chunkZ]
			if (!chunk) {
				chunk = new Chunk(chunkX * 16, chunkZ * 16)
				this.chunks[chunkX][chunkZ] = chunk
			}
			if (chunk.buffer) {
				//Only used if spawning a block post-gen
				this.setBlock(x, y, z, blockID, true)
			} else if (!chunk.getBlock(x & 15, y, z & 15)) {
				chunk.setBlock(x & 15, y, z & 15, blockID, false)
			}
		}
		tick() {
			let tickStart = win.performance.now()
			let maxChunkX = (p.x >> 4) + settings.renderDistance
			let maxChunkZ = (p.z >> 4) + settings.renderDistance
			let chunk = maxChunkX + "," + maxChunkZ
			if (chunk !== this.lastChunk) {
				this.lastChunk = chunk
				this.loadChunks()
				this.chunkGenQueue.sort(sortChunks)
			}

			if (Key.leftMouse && !Key.control && p.lastBreak < Date.now() - 250 && screen === "play") {
				changeWorldBlock(0)
			}
			if ((Key.rightMouse || Key.leftMouse && Key.control) && p.lastPlace < Date.now() - 250) {
				newWorldBlock()
			}
			if (Key.leftMouse && p.autoBreak && !Key.control) {
				changeWorldBlock(0)
			}

			for (let i = 0; i < this.sortedChunks.length; i++) {
				this.sortedChunks[i].tick()
			}

			do {
				let doneWork = false
				debug.start = performance.now()
				if (this.meshQueue.length) {
					// Update all chunk meshes.
					let len = this.meshQueue.length - 1
					do {
						this.meshQueue.pop().genMesh()
					} while(this.meshQueue.length)
					doneWork = true
					debug("Meshes")
				}

				if (this.generateQueue.length && !doneWork) {
					let chunk = this.generateQueue.pop()
					this.genChunk(chunk)
					doneWork = true
				}
				if (this.populateQueue.length && !doneWork) {
					let chunk = this.populateQueue[this.populateQueue.length - 1]
					if (!chunk.caves) {
						chunk.carveCaves()
						debug("Carve caves")
					} else if (!chunk.populated) {
						chunk.populate()
						this.populateQueue.pop()
					}
					doneWork = true
				}

				if (this.chunkGenQueue.length && !doneWork) {
					let chunk = this.chunkGenQueue[0]
					if (!fillReqs(chunk.x >> 4, chunk.z >> 4)) {}
					else if (!chunk.loaded) {
						chunk.load()
					} else if (!chunk.optimized) {
						chunk.optimize(this)
						debug("Optimize")
					} else if (!chunk.buffer) {
						chunk.genMesh()
						debug("Initial mesh")
					} else {
						this.chunkGenQueue.shift()
						generatedChunks++
					}
					doneWork = true
				}
				if (!doneWork) {
					break
				}
			} while(win.performance.now() - tickStart < 5)
		}
		render() {
			initModelView(p)
			gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT)

			p2.x = Math.round(p.x)
			p2.y = Math.round(p.y)
			p2.z = Math.round(p.z)

			renderedChunks = 0

			let dist = (settings.renderDistance) * 16
			if (this.chunkGenQueue.length) {
				this.chunkGenQueue.sort(sortChunks)
				let chunk = this.chunkGenQueue[0]
				dist = Math.min(dist, chunkDist(chunk))
			}
			if (dist !== fogDist) {
				if (fogDist < dist - 0.1) fogDist += (dist - fogDist) / 120
				else if (fogDist > dist + 0.1) fogDist += (dist - fogDist) / 30
				else fogDist = dist
			}
			gl.uniform3f(glCache.uPos, p.x, p.y, p.z)
			gl.uniform1f(glCache.uDist, fogDist)

			let c = this.sortedChunks
			for (let chunk of c) {
				chunk.render()
			}

			gl.uniform3f(glCache.uPos, 0, 0, 0)

			if(hitBox.pos) {
				blockOutlines = true
				blockFill = false
				block2(hitBox.pos[0], hitBox.pos[1], hitBox.pos[2], 0, p)
				blockOutlines = false
				blockFill = true
			}
		}
		loadChunks() {
			let renderDistance = settings.renderDistance + 2
			let cx = p.x >> 4
			let cz = p.z >> 4
			p.cx = cx
			p.cz = cz
			let minChunkX = cx - renderDistance
			let maxChunkX = cx + renderDistance
			let minChunkZ = cz - renderDistance
			let maxChunkZ = cz + renderDistance

			this.offsetX = -minChunkX
			this.offsetZ = -minChunkZ
			this.lwidth = renderDistance * 2 + 1
			this.chunkGenQueue.length = 0

			if (this.loaded.length > this.lwidth * this.lwidth) {
				this.loaded.length = this.lwidth * this.lwidth
			}

			let i = 0
			for (let x = minChunkX; x <= maxChunkX; x++) {
				for (let z = minChunkZ; z <= maxChunkZ; z++) {
					let chunk
					if (!this.chunks[x]) {
						this.chunks[x] = []
					}
					if (!this.chunks[x][z]) {
						chunk = new Chunk(x * 16, z * 16)
						if (maxDist(cx, cz, x, z) <= settings.renderDistance) {
							this.chunkGenQueue.push(chunk)
						}
						this.chunks[x][z] = chunk
					}
					chunk = this.chunks[x][z]
					if (!chunk.buffer && !this.chunkGenQueue.includes(chunk) && maxDist(cx, cz, x, z) <= settings.renderDistance) {
						this.chunkGenQueue.push(chunk)
					}
					this.loaded[i++] = chunk
				}
			}
			this.sortedChunks = this.loaded.filter(renderFilter)
			this.sortedChunks.sort(sortChunks)
		}
		getSaveString() {
			let edited = []
			for (let x in this.chunks) {
				for (let z in this.chunks[x]) {
					let chunk = this.chunks[x][z]
					if (chunk.edited) {
						for (let y = 0; y < chunk.sections.length; y++) {
							if (chunk.sections[y].edited) {
								edited.push([ chunk.sections[y], chunk.cleanSections[y] ])
							}
						}
					}
				}
			}

			let pallete = {}
			for (let chunks of edited) {
				let changes = false
				chunks[0].blocks.forEach((id, i) => {
					if (id !== chunks[1][i]) {
						pallete[id] = true
						changes = true
					}
				})
				if (!changes) {
					chunks[0].edited = false
				}
			}

			let blocks = Object.keys(pallete).map(n => Number(n))
			pallete = {}
			blocks.forEach((block, index) => pallete[block] = index)

			let rnd = Math.round
			let options = p.flying | superflat << 1 | p.spectator << 2 | caves << 3 | trees << 4

			let str = world.name + ";" + worldSeed.toString(36) + ";"
				+ rnd(p.x).toString(36) + "," + rnd(p.y).toString(36) + "," + rnd(p.z).toString(36) + ","
				+ (p.rx * 100 | 0).toString(36) + "," + (p.ry * 100 | 0).toString(36) + "," + options.toString(36) + ";"
				+ version + ";"
				+ blocks.map(b => b.toString(36)).join(",") + ";"

			for (let i = 0; i < edited.length; i++) {
				if (!edited[i][0].edited) {
					continue
				}
				let real = edited[i][0]
				let blocks = real.blocks
				let original = edited[i][1]
				str += (real.x / 16).toString(36) + "," + (real.y / 16).toString(36) + "," + (real.z / 16).toString(36) + ","
				for (let j = 0; j < original.length; j++) {
					if (blocks[j] !== original[j]) {
						str += (pallete[blocks[j]] << 12 | j).toString(36) + ","
					}
				}
				str = str.substr(0, str.length - 1); //Remove trailing comma
				str += ";"
			}
			if (str.match(/;$/)) str = str.substr(0, str.length - 1)
			return str
		}
		loadSave(str) {
			let data = str.split(";")
			if (!str.includes("Alpha")) {
				return this.loadOldSave(str)
			}

			this.name = data.shift()
			worldSeed = parseInt(data.shift(), 36)
			seedHash(worldSeed)
			caveNoise = openSimplexNoise(worldSeed)
			noiseSeed(worldSeed)

			let playerData = data.shift().split(",")
			p.x = parseInt(playerData[0], 36)
			p.y = parseInt(playerData[1], 36)
			p.z = parseInt(playerData[2], 36)
			p.rx = parseInt(playerData[3], 36) / 100
			p.ry = parseInt(playerData[4], 36) / 100
			let options = parseInt(playerData[5], 36)
			p.flying = options & 1
			p.spectator = options >> 2 & 1
			superflat = options >> 1 & 1
			caves = options >> 3 & 1
			trees = options >> 4 & 1

			let version = data.shift()
			this.version = version

			// if (version.split(" ")[1].split(".").join("") < 70) {
			// 	alert("This save code is for an older version. 0.7.0 or later is needed")
			// }

			let pallete = data.shift().split(",").map(n => parseInt(n, 36))
			this.loadFrom = []

			for (let i = 0; data.length; i++) {
				let blocks = data.shift().split(",")
				this.loadFrom.push({
					x: parseInt(blocks.shift(), 36),
					y: parseInt(blocks.shift(), 36),
					z: parseInt(blocks.shift(), 36),
					blocks: [],
				})
				for (let j = 0; j < blocks.length; j++) {
					let block = parseInt(blocks[j], 36)
					let index = block & 0xffffff
					let pid = block >> 12
					this.loadFrom[i].blocks[index] = pallete[pid]
				}
			}
		}
		loadOldSave(str) {
			let data = str.split(";");
			worldSeed = parseInt(data.shift(), 36);
			this.id = Date.now()
			this.name = "Old World " + (Math.random() * 1000 | 0)
			seedHash(worldSeed);
			caveNoise = openSimplexNoise(worldSeed);
			noiseSeed(worldSeed);
			let playerData = data.shift().split(",");
			p.x = parseInt(playerData[0], 36);
			p.y = parseInt(playerData[1], 36);
			p.z = parseInt(playerData[2], 36);
			p.rx = parseInt(playerData[3], 36) / 100;
			p.ry = parseInt(playerData[4], 36) / 100;
			let editCount = parseInt(data.shift(), 36);

			this.loadFrom = [];

			let coords = data.shift().split(",").map(function(n) {
				return parseInt(n, 36);
			});
			for (let j = 0; j < coords.length; j += 3) {
				this.loadFrom.push({
					x: coords[j],
					y: coords[j + 1],
					z: coords[j + 2],
					blocks: [],
				})
			}

			for (let i = 0; data.length > 0; i++) {
				let blocks = data.shift().split(",");
				for (let j = 0; j < blocks.length; j++) {
					let block = parseInt(blocks[j], 36);
					let index = block >> 8;
					let id = block & 0x7f | (block & 0x80) << 1;
					this.loadFrom[i].blocks[index] = id;
				}
			}
		}
	}

	let defineWorld = function() {
		let tickStart = win.performance.now()
		world.tick()
		analytics.totalTickTime += win.performance.now() - tickStart
		let renderStart = win.performance.now()
		world.render()
		analytics.totalRenderTime += win.performance.now() - renderStart
	}

	let controls = function() {
		move.x = 0
		move.z = 0
		let dt = (win.performance.now() - p.lastUpdate) / 33
		dt = dt > 2 ? 2 : dt

		if(Key.arrowup) move.z += p.speed
		if(Key.arrowdown) move.z -= p.speed
		if(Key.arrowleft) move.x += p.speed
		if(Key.arrowright) move.x -= p.speed
		if (p.flying) {
			if(Key[" "]) p.velocity.y += 0.06 * dt
			if(Key.shift) p.velocity.y -= 0.06 * dt
		}
		if(Key.O) p.ry -= 0.1 * dt
		if(Key.Q) p.ry += 0.1 * dt
		if(Key.J) p.rx += 0.1 * dt
		if(Key.D) p.rx -= 0.1 * dt

		if (!p.sprinting && Key.q && !p.sneaking && Key.w) {
			p.FOV(settings.fov + 10, 250)
			p.sprinting = true
		}

		if(p.sprinting) {
			move.x *= p.sprintSpeed
			move.z *= p.sprintSpeed
		}
		if(p.flying) {
			move.x *= p.flySpeed
			move.z *= p.flySpeed
		}
		if (!move.x && !move.z) {
			if (p.sprinting) {
				p.FOV(settings.fov, 100)
			}
			p.sprinting = false
		} else if(Math.abs(move.x) > 0 && Math.abs(move.z) > 0) {
			move.x *= move.ang
			move.z *= move.ang
		}

		//Update the velocity, rather than the position.
		let co = Math.cos(p.ry)
		let si = Math.sin(p.ry)
		let friction = p.onGround ? 1 : 0.3
		p.velocity.x += (co * move.x - si * move.z) * friction * dt
		p.velocity.z += (si * move.x + co * move.z) * friction * dt

		const TAU = Math.PI * 2
		const PI1_2 = Math.PI / 2
		while(p.ry > TAU) p.ry -= TAU
		while(p.ry < 0)   p.ry += TAU
		if(p.rx > PI1_2)  p.rx = PI1_2
		if(p.rx < -PI1_2) p.rx = -PI1_2

		p.setDirection()
	}

	// Mouse sensitivity variable, used for the settings buttons and in the "mmoved" function
	let mouseS = 300

	class Slider {
		constructor(x, y, w, h, scenes, label, min, max, settingName, callback) {
			this.x = x
			this.y = y
			this.h = h
			this.w = Math.max(w, 350)
			this.name = settingName
			this.scenes = Array.isArray(scenes) ? scenes : [scenes]
			this.label = label
			this.min = min
			this.max = max
			this.sliding = false
			this.callback = callback
		}
		draw() {
			if (!this.scenes.includes(screen)) {
				return
			}
			let current = (settings[this.name] - this.min) / (this.max - this.min)

			// Outline
			ctx.beginPath()
			strokeWeight(2)
			stroke(0)
			fill(85)
			ctx.rect(this.x - this.w / 2, this.y - this.h / 2, this.w, this.h)
			ctx.stroke()
			ctx.fill()

			// Slider bar
			let value = Math.round(settings[this.name])
			ctx.beginPath()
			fill(130)
			let x = this.x - (this.w - 10) / 2 + (this.w - 10) * current - 5
			ctx.fillRect(x, this.y - this.h / 2, 10, this.h)

			//Label
			fill(255, 255, 255)
			textSize(16)
			ctx.textAlign = 'center'
			text(`${this.label}: ${value}`, this.x, this.y + this.h / 8)
		}
		click() {
			if (!mouseDown || !this.scenes.includes(screen)) {
				return false
			}

			if (mouseX > this.x - this.w / 2 && mouseX < this.x + this.w / 2 && mouseY > this.y - this.h / 2 && mouseY < this.y + this.h / 2) {
				let current = (mouseX - this.x + this.w / 2) / this.w
				if (current < 0) current = 0
				if (current > 1) current = 1
				this.sliding = true
				settings[this.name] = current * (this.max - this.min) + this.min
				this.callback(current * (this.max - this.min) + this.min)
				this.draw()
			}
		}
		drag() {
			if (!this.sliding || !this.scenes.includes(screen)) {
				return false
			}

			let current = (mouseX - this.x + this.w / 2) / this.w
			if (current < 0) current = 0
			if (current > 1) current = 1
			settings[this.name] = current * (this.max - this.min) + this.min
			this.callback(current * (this.max - this.min) + this.min)
		}
		release() {
			this.sliding = false
		}

		static draw() {
			for (let slider of Slider.all) {
				slider.draw()
			}
		}
		static click() {
			for (let slider of Slider.all) {
				slider.click()
			}
		}
		static release() {
			for (let slider of Slider.all) {
				slider.release()
			}
		}
		static drag() {
			if (mouseDown) {
				for (let slider of Slider.all) {
					slider.drag()
				}
			}
		}
		static add(x, y, w, h, scenes, label, min, max, defaut, callback) {
			Slider.all.push(new Slider(x, y, w, h, scenes, label, min, max, defaut, callback))
		}
	}
	Slider.all = []
	class Button {
		constructor(x, y, w, h, labels, scenes, callback, disabled, hoverText) {
			this.x = x
			this.y = y
			this.h = h
			this.w = w
			this.index = 0
			this.disabled = disabled || (() => false)
			this.hoverText = !hoverText || typeof hoverText === "string" ? (() => hoverText) : hoverText
			this.scenes = Array.isArray(scenes) ? scenes : [scenes]
			this.labels = Array.isArray(labels) ? labels : [labels]
			this.callback = callback
		}

		mouseIsOver() {
			return mouseX >= this.x - this.w / 2 && mouseX <= this.x + this.w / 2 && mouseY >= this.y - this.h / 2 && mouseY <= this.y + this.h / 2
		}
		draw() {
			if (!this.scenes.includes(screen)) {
				return
			}
			let hovering = this.mouseIsOver()
			let disabled = this.disabled()
			let hoverText = this.hoverText()

			// Outline
			ctx.beginPath()
			if (hovering && !disabled) {
				strokeWeight(7)
				stroke(255)
				cursor(HAND)
			} else {
				strokeWeight(3)
				stroke(0)
			}
			if (disabled) {
				fill(60)
			} else {
				fill(120)
			}
			ctx.rect(this.x - this.w / 2, this.y - this.h / 2, this.w, this.h)
			ctx.stroke()
			ctx.fill()

			//Label
			fill(255)
			textSize(16)
			ctx.textAlign = 'center'
			text(this.labels[this.index], this.x, this.y + this.h / 8)
			
			if (hovering && hoverText) {
				hoverbox.innerText = hoverText
				hoverbox.classList.remove("hidden")
				if (mouseY < height / 2) {
					hoverbox.style.bottom = ""
					hoverbox.style.top = mouseY + 10 + "px"
				} else {
					hoverbox.style.top = ""
					hoverbox.style.bottom = height - mouseY + 10 + "px"
				}
				if (mouseX < width / 2) {
					hoverbox.style.right = ""
					hoverbox.style.left = mouseX + 10 + "px"
				} else {
					hoverbox.style.left = ""
					hoverbox.style.right = width - mouseX + 10 + "px"
				}
			}
		}
		click() {
			if (this.disabled() || !mouseDown || !this.scenes.includes(screen)) {
				return false
			}

			if (this.mouseIsOver()) {
				this.index = (this.index + 1) % this.labels.length
				this.callback(this.labels[this.index])
				return true
			}
		}

		static draw() {
			hoverbox.classList.add("hidden")
			for (let button of Button.all) {
				button.draw()
			}
		}
		static click() {
			for (let button of Button.all) {
				if (button.click()) {
					Button.draw()
					break
				}
			}
		}
		static add(x, y, w, h, labels, scenes, callback, disabled, hoverText) {
			Button.all.push(new Button(x, y, w, h, labels, scenes, callback, disabled, hoverText))
		}
	}
	Button.all = []

	var initEverything
	function initButtons() {
		Button.all = []
		Slider.all = []
		const nothing = () => false
		const always = () => true

		// Main menu buttons
		Button.add(width / 2, height / 2 - 20, 400, 40, "Singleplayer", "main menu", r => changeScene("loadsave menu"))
		Button.add(width / 2, height / 2 + 35, 400, 40, "Multiplayer", "main menu", nothing, always, "Multiplayer isn't possible at this time. But you can go here: https://bit.ly/Ei4baTdk9561QD")
		Button.add(width / 2, height / 2 + 90, 400, 40, "Options", "main menu", r => changeScene("options"))

		// Creation menu buttons
		Button.add(width / 2, 135, 300, 40, ["World Type: Normal", "World Type: Superflat"], "creation menu", r => superflat = r === "World Type: Superflat")
		Button.add(width / 2, 185, 300, 40, ["Trees: On", "Trees: Off"], "creation menu", r => trees = r === "Trees: On", function() {
			if (superflat) {
				this.index = 1
				trees = false
			}
			return superflat
		})
		Button.add(width / 2, 235, 300, 40, ["Caves: On", "Caves: Off"], "creation menu", r => caves = r === "Caves: On", function() {
			if (superflat) {
				this.index = 1
				caves = false
			}
			return superflat
		})
		Button.add(width / 2, 285, 300, 40, "Game Mode: Creative", "creation menu", nothing, always, "Coming Soon\n\nPlease stop asking for survival features. I don't want to half-implement anything, and I don't currently have the systems in place to create a full-featured survival mode. It'll come in due time. said no one ever =( Like seriously, what would u have us do?")
		Button.add(width / 2, 335, 300, 40, "Difficulty: Awesome", "creation menu", nothing, always, "Coming soon\n\nPlease stop asking for mobs. Adding them will take a very long time. I know a lot of people want them, so just be patient. https://minekhan.repl.co/ try that u impatient gamer zombies(don't take it personally)")
		Button.add(width / 2, height - 90, 300, 40, "Create New World", "creation menu", r => {
			world = new World()
			world.id = Date.now()
			let name = boxCenterTop.value || "World"
			let number = ""
			while(true) {
				let match = false
				for (let id in worlds) {
					if (worlds[id].name === name + number) {
						match = true
						break
					}
				}
				if (match) {
					number = number ? number + 1 : 1
				} else {
					name = name + number
					break
				}
			}
			world.name = name.replace(/;/g, "\u037e")
			win.world = world
			world.loadChunks()
			world.chunkGenQueue.sort(sortChunks)
			changeScene("loading")
		})
		Button.add(width / 2, height - 40, 300, 40, "Cancel", "creation menu", r => changeScene(previousScreen))

		// Loadsave menu buttons
		const selected = () => !selectedWorld || !worlds[selectedWorld]
		let w4 = Math.min(width / 4 - 10, 220)
		let x4 = w4 / 2 + 5
		let w2 = Math.min(width / 2 - 10, 450)
		let x2 = w2 / 2 + 5
		let mid = width / 2
		Button.add(mid - 3 * x4, height - 30, w4, 40, "Edit", "loadsave menu", r => changeScene("editworld"), () => (selected() || !worlds[selectedWorld].edited))
		Button.add(mid - x4, height - 30, w4, 40, "Delete", "loadsave menu", r => {
			if (worlds[selectedWorld] && confirm(`Are you sure you want to delete ${worlds[selectedWorld].name}?`)) {
				deleteFromDB(selectedWorld)
				window.worlds.removeChild(document.getElementById(selectedWorld))
				delete worlds[selectedWorld]
				selectedWorld = 0
			}
		}, () => (selected() || !worlds[selectedWorld].edited), "Delete the world forever. Why would you do that =(")
		Button.add(mid + x4, height - 30, w4, 40, "Export", "loadsave menu", r => {
			boxCenterTop.value = worlds[selectedWorld].code
		}, selected, "Export the save code into the text box above for copy/paste.")
		Button.add(mid + 3 * x4, height - 30, w4, 40, "Cancel", "loadsave menu", r => changeScene("main menu"))
		Button.add(mid - x2, height - 75, w2, 40, "Play Selected World", "loadsave menu", r => {
			world = new World()
			win.world = world

			let code
			if (!selectedWorld) {
				code = boxCenterTop.value
			} else {
				let data = worlds[selectedWorld]
				if (data) {
					code = data.code
					world.id = data.id
					world.edited = data.edited
				}
			}
			
			if (code) {
				try {
					world.loadSave(code)
					world.id = world.id || Date.now()
				}
				catch(e) {
					alert("Unable to load save")
					return
				}
				changeScene("loading")
			}
		}, () => !(!selectedWorld && boxCenterTop.value) && !worlds[selectedWorld])
		Button.add(mid + x2, height - 75, w2, 40, "Create New World", "loadsave menu", r => changeScene("creation menu"))

		Button.add(mid, height / 2, w2, 40, "Save", "editworld", r => {
			let w = worlds[selectedWorld]
			w.name = boxCenterTop.value.replace(/;/g, "\u037e")
			let split = w.code.split(";")
			split[0] = w.name
			w.code = split.join(";")
			saveToDB(w.id, w).then(success => {
				initWorldsMenu()
				changeScene("loadsave menu")
			}).catch(e => console.error(e))
		})
		Button.add(mid, height / 2 + 50, w2, 40, "Back", "editworld", r => changeScene(previousScreen))

		// Pause buttons
		Button.add(width / 2, 225, 300, 40, "Resume", "pause", play)
		Button.add(width / 2, 275, 300, 40, "Options", "pause", r => changeScene("options"))
		Button.add(width / 2, 325, 300, 40, "Save", "pause", save, nothing, () => `Save the world to your computer/browser. Doesn't work in incognito.\n\nLast saved ${timeString(Date.now() - world.edited)}.`)
		Button.add(width / 2, 375, 300, 40, "Get Save Code", "pause", r => {
			savebox.classList.remove("hidden")
			saveDirections.classList.remove("hidden")
			savebox.value = world.getSaveString()
		})
		Button.add(width / 2, 425, 300, 40, "Exit Without Saving", "pause", r => {
			savebox.value = world.getSaveString()
			initWorldsMenu()
			changeScene("main menu")
		})
		
		// Options buttons
		Button.add(width / 2, 455, width / 3, 40, "Back", "options", r => changeScene(previousScreen))
		
		// Comingsoon menu buttons
		Button.add(width / 2, 395, width / 3, 40, "Back", "comingsoon menu", r => changeScene(previousScreen))

		// Multiplayer buttons
		Button.add(width / 2, 395, width / 3, 40, "¯\\_(ツ)_/¯", "multiplayer menu", r => changeScene("main menu"))

		// Settings Sliders
		Slider.add(width/2, 245, width / 3, 40, "options", "Render Distance", 1, 32, "renderDistance", val => settings.renderDistance = Math.round(val))
		Slider.add(width/2, 305, width / 3, 40, "options", "FOV", 30, 110, "fov", val => {
			p.FOV(val)
			if (world) {
				p.setDirection()
				world.render()
			}
		})
		Slider.add(width/2, 365, width / 3, 40, "options", "Mouse Sensitivity", 30, 400, "mouseSense", val => settings.mouseSense = val)
	}
	function initTextures() {
		let textureSize = 256
		let scale = 1 / 16
		let texturePixels = new Uint8Array(textureSize * textureSize * 4)
		textureMap = {}
		textureCoords = []

		setPixel = function(textureNum, x, y, r, g, b, a) {
			let texX = textureNum & 15
			let texY = textureNum >> 4
			let offset = (texY * 16 + y) * 1024 + texX * 64 + x * 4
			texturePixels[offset] = r
			texturePixels[offset + 1] = g
			texturePixels[offset + 2] = b
			texturePixels[offset + 3] = a !== undefined ? a : 255
		}
		getPixels = function(str) {
			// var w = parseInt(str.substr(0, 2), 36)
			// var h = parseInt(str.substr(2, 2), 36)
			var colors = []
			var pixels = []
			var dCount = 0
			for (;str[4 + dCount] === "0"; dCount++) {}
			var ccount = parseInt(str.substr(4+dCount, dCount+1), 36)
			for (var i = 0; i < ccount; i++) {
				var num = parseInt(str.substr(5 + 2*dCount + i * 7, 7), 36)
				colors.push([ num >>> 24 & 255, num >>> 16 & 255, num >>> 8 & 255, num & 255 ])
			}
			for (let i = 5 + 2*dCount + ccount * 7; i < str.length; i++) {
				let num = parseInt(str[i], 36)
				pixels.push(colors[num][0], colors[num][1], colors[num][2], colors[num][3])
			}
			return pixels
		};

		{
			// Specify the texture coords for each index
			const s = scale
			for (let i = 0; i < 256; i++) {
				let texX = i & 15
				let texY = i >> 4
				let offsetX = texX * s
				let offsetY = texY * s
				textureCoords.push(new Float32Array([ offsetX, offsetY, offsetX + s, offsetY, offsetX + s, offsetY + s, offsetX, offsetY + s ]))
			}

			// Set all of the textures into 1 big tiled texture
			let n = 0
			for (let i in textures) {
				if (typeof textures[i] === "function") {
					textures[i](n)
				} else if (typeof textures[i] === "string") {
					let pix = getPixels(textures[i])
					for (let j = 0; j < pix.length; j += 4) {
						setPixel(n, j >> 2 & 15, j >> 6, pix[j], pix[j+1], pix[j+2], pix[j+3])
					}
				}
				textureMap[i] = n
				n++
			}

			//Set the hitbox texture to 1 pixel
			let arr = new Float32Array(192)
			for (let i = 0; i < 192; i += 2) {
				arr[i] = textureCoords[textureMap.hitbox][0] + 0.01
				arr[i + 1] = textureCoords[textureMap.hitbox][1] + 0.01
			}
			textureCoords[textureMap.hitbox] = arr
		}

		// Big texture with everything in it
		tex = gl.createTexture()
		gl.activeTexture(gl.TEXTURE0)
		gl.bindTexture(gl.TEXTURE_2D, tex)
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize, textureSize, 0, gl.RGBA, gl.UNSIGNED_BYTE, texturePixels)
		gl.generateMipmap(gl.TEXTURE_2D)
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)
		gl.uniform1i(glCache.uSampler, 0)

		// Dirt texture for the background
		let dirtPixels = new Uint8Array(getPixels(textures.dirt))
		dirtTexture = gl.createTexture()
		gl.activeTexture(gl.TEXTURE1)
		gl.bindTexture(gl.TEXTURE_2D, dirtTexture)
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, dirtPixels)
		gl.generateMipmap(gl.TEXTURE_2D)
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT)
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT)

		genIcons()
	}
	function drawIcon(x, y, id) {
		id = id < 0xff ? (id | blockMode) : id
		x =  x / (3 * height) - 0.1666 * width / height
		y = y / (3 * height) - 0.1666
		initModelView(null, x, y, 0, 0, 0)

		let buffer = blockIcons[id]
		gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
		gl.vertexAttribPointer(glCache.aVertex, 3, gl.FLOAT, false, 24, 0)
		gl.vertexAttribPointer(glCache.aTexture, 2, gl.FLOAT, false, 24, 12)
		gl.vertexAttribPointer(glCache.aShadow, 1, gl.FLOAT, false, 24, 20)
		gl.drawElements(gl.TRIANGLES, blockIcons.lengths[id], gl.UNSIGNED_INT, 0)
	}

	function hotbar() {
		FOV(90)

		for(let i = 0; i < inventory.hotbar.length; i ++) {
			if(inventory.hotbar[i]) {
				let x = width / 2 - inventory.hotbar.length / 2 * inventory.size + (i + 0.5) * inventory.size + 25
				let y = height - inventory.size
				drawIcon(x, y, inventory.hotbar[i])
			}
		}
	}
	function hud() {
		if (p.spectator) {
			return
		}

		hotbar()

		let s = inventory.size
		let x = width / 2 + 0.5
		let y = height / 2 + 0.5

		// Crosshair
		if (!p.spectator) {
			ctx.lineWidth = 2
			ctx.strokeStyle = "rgba(255, 255, 255, 0.6)"
			ctx.beginPath()
			ctx.moveTo(x - 10, y)
			ctx.lineTo(x + 10, y)
			ctx.moveTo(x, y - 10)
			ctx.lineTo(x, y + 10)
			ctx.stroke();
			
		}

		//Hotbar
		x = width / 2 - 9 / 2 * s + 0.5 + 25
		y = height - s * 1.5 + 0.5

		ctx.strokeStyle = "black"
		ctx.lineWidth = 2
		ctx.beginPath()
		ctx.moveTo(x, y)
		ctx.lineTo(x + s * 9, y)
		ctx.moveTo(x, y + s)
		ctx.lineTo(x + s * 9, y + s)
		for(let i = 0; i <= 9; i++) {
			ctx.moveTo(x + i * s, y)
			ctx.lineTo(x + i * s, y + s)
		}
		ctx.stroke()

		ctx.strokeStyle = "white"
		ctx.lineWidth = 2
		ctx.beginPath()

		ctx.strokeRect(width / 2 - 9 / 2 * s + inventory.hotbarSlot * s + 25, height - s * 1.5, s, s)

		let str = "Average Frame Time: " + analytics.displayedFrameTime + "ms\n"
		+ "Worst Frame Time: " + analytics.displayedwFrameTime + "ms\n"
		+ "Render Time: " + analytics.displayedRenderTime + "ms\n"
		+ "Tick Time: " + analytics.displayedTickTime + "ms\n"
		+ "Rendered Chunks: " + renderedChunks.toLocaleString() + " / " + world.loaded.length + "\n"
		+ "Generated Chunks: " + generatedChunks.toLocaleString() + "\n"
		+ "FPS: " + analytics.fps

		if (p.autoBreak) {
			text("Super breaker enabled", 5, height - 89, 12)
		}

		ctx.textAlign = 'right'
		text(p2.x + ", " + p2.y + ", " + p2.z, width - 10, 15, 0)
		ctx.textAlign = 'left'
		text(str, 5, height - 77, 12)
	}
	function drawInv() {
		let x = 0
		let y = 0
		let s = inventory.size
		let s2 = s / 2
		let perRow = 13

		gl.clearColor(0, 0, 0, 0)
		gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT)
		ctx.fillStyle = "rgb(127, 127, 127)"
		ctx.fillRect(0, 0, canvas.width, canvas.height)
		FOV(90)

		// Draw the grid
		ctx.lineWidth = 1
		ctx.strokeStyle = "black"
		ctx.beginPath()
		for (y = 0; y < 10; y++) {
			ctx.moveTo(50.5 - s2, 50.5 - s2 + y * s)
			ctx.lineTo(50.5 - s2 + s * perRow, 50.5 - s2 + y * s)
		}
		y--
		for (x = 0; x < perRow + 1; x++) {
			ctx.moveTo(50.5 - s2 + s * x, 50.5 - s2)
			ctx.lineTo(50.5 - s2 + s * x, 50.5 - s2 + y * s)
		}

		// Hotbar
		x = width / 2 - inventory.hotbar.length / 2 * s + 0.5 + 25
		y = height - s * 1.5 + 0.5
		ctx.moveTo(x, y)
		ctx.lineTo(x + s * 9, y)
		ctx.moveTo(x, y + s)
		ctx.lineTo(x + s * 9, y + s)
		for(let i = 0; i <= inventory.hotbar.length; i ++) {
			ctx.moveTo(x + i * s, y)
			ctx.lineTo(x + i * s, y + s)
		}
		ctx.stroke()

		let overHot = (mouseX - x) / s | 0
		if (mouseX < x + 9 * s && mouseX > x && mouseY > y && mouseY < y + s) {
			x += s * overHot
			ctx.lineWidth = 2
			ctx.strokeStyle = "white"
			ctx.beginPath()
			ctx.strokeRect(x, y, s, s)
		}

		//Box highlight in inv
		let overInv = Math.round((mouseY - 50) / s) * perRow + Math.round((mouseX - 50) / s)
		if (overInv >= 0 && overInv < BLOCK_COUNT - 1 && mouseX < 50 - s2 + perRow * s && mouseX > 50 - s2) {
			x = overInv % perRow * s + 50 - s2
			y = (overInv / perRow | 0) * s + 50 - s2
			ctx.lineWidth = 2
			ctx.strokeStyle = "white"
			ctx.beginPath()
			ctx.strokeRect(x, y, s, s)
		}

		if (inventory.holding) {
			drawIcon(mouseX, mouseY, inventory.holding)
		}
		for (let i = 1; i < BLOCK_COUNT; i++) {
			x = (i - 1) % perRow * s + 50
			y = ((i - 1) / perRow | 0) * s + 50
			drawIcon(x, y, i)
		}

		hotbar()
		//hud()
		ctx.drawImage(gl.canvas, 0, 0)
	}
	function clickInv() {
		let s = inventory.size
		let s2 = s / 2
		let perRow = 13
		let over = Math.round((mouseY - 50) / s) * perRow + Math.round((mouseX - 50) / s)
		let x = width / 2 - 9 / 2 * s + 25
		let y = height - s * 1.5
		let overHot = (mouseX - x) / s | 0
		if (mouseX < x + 9 * s && mouseX > x && mouseY > y && mouseY < y + s) {
			let temp = inventory.hotbar[overHot]
			inventory.hotbar[overHot] = inventory.holding
			inventory.holding = temp
		} else if (over >= 0 && over < BLOCK_COUNT - 1 && mouseX < 50 - s2 + perRow * s && mouseX > 50 - s2) {
			inventory.holding = over + 1
		} else {
			inventory.holding = 0
		}

		drawScreens.inventory()
	}

	let unpauseDelay = 0
	function mmoved(e) {
		let mouseS = settings.mouseSense / 30000
		p.rx -= e.movementY * mouseS
		p.ry += e.movementX * mouseS

		while(p.ry > Math.PI*2) {
			p.ry -= Math.PI*2
		}
		while(p.ry < 0) {
			p.ry += Math.PI*2
		}
		if(p.rx > Math.PI / 2) {
			p.rx = Math.PI / 2
		}
		if(p.rx < -Math.PI / 2) {
			p.rx = -Math.PI / 2
		}
	}
	function trackMouse(e) {
		cursor("")
		mouseX = e.x
		mouseY = e.y
		drawScreens[screen]()
		Button.draw()
		Slider.draw()
		Slider.drag()
	}
	document.onmousemove = trackMouse
	document.onpointerlockchange = function() {
		if (doc.pointerLockElement === canvas) {
			doc.onmousemove = mmoved
		} else {
			doc.onmousemove = trackMouse
			if (screen === "play" && !freezeFrame) {
				changeScene("pause")
				unpauseDelay = Date.now() + 1000
			}
		}
		for (let key in Key) {
			Key[key] = false
		}
	}
	canvas.onmousedown = function(e) {
		mouseX = e.x
		mouseY = e.y
		mouseDown = true
		let block, index
		switch(e.button) {
			case 0:
				Key.leftMouse = true
				break
			case 1:
				Key.middleMouse = true
				if (!hitBox.pos) break
				updateHUD = true
				block = world.getBlock(hitBox.pos[0], hitBox.pos[1], hitBox.pos[2]) & 0x3ff
				index = inventory.hotbar.indexOf(block)
				if (index >= 0) {
					inventory.hotbarSlot = index
				} else {
					inventory.hotbar[inventory.hotbarSlot] = block
				}
				break
			case 2:
				Key.rightMouse = true
				break
		}
		if(screen === "play") {
			if (doc.pointerLockElement !== canvas) {
				getPointer()
				p.lastBreak = Date.now()
			} else {
				place = false
				if(e.button === 0) {
					if(Key.control) {
						place = true
					} else {
						changeWorldBlock(0)
					}
				}
				holding = inventory.hotbar[inventory.hotbarSlot]
				if(e.button === 2 && holding) {
					place = true
				}
				if(place) {
					newWorldBlock()
				}
			}
		} else if (screen === "inventory") {
			clickInv()
		}

		Button.click()
		Slider.click()
	}
	canvas.onmouseup = function(e) {
		switch(e.button) {
			case 0:
				Key.leftMouse = false
				break
			case 1:
				Key.middleMouse = false
				break
			case 2:
				Key.rightMouse = false
				break
		}
		mouseDown = false
		Slider.release()
	}
	canvas.onkeydown = function(e) {
		let k = e.key.toLowerCase()
		if (k === " ") {
			e.preventDefault()
		}
		if (e.repeat || Key[k]) {
			return
		}
		Key[k] = true

		if (k === "t") {
			initTextures()
		}

		if (k === "enter") {
			blockMode = blockMode === CUBE ? SLAB : (blockMode === SLAB ? STAIR : (blockMode === STAIR ? FLOWER : CUBE))
			updateHUD = true
		}

		if (screen === "play") {
			if(k === "p") {
				releasePointer()
				changeScene("pause")
			}

			if(k === "b") {
				p.autoBreak = !p.autoBreak
				updateHUD = true
			}

			if (k === " " && !p.spectator) {
				if (Date.now() < p.lastJump + 400) {
					p.flying ^= true
				} else {
					p.lastJump = Date.now()
				}
			}

			if (k === "z") {
				p.FOV(10, 400)
			}

			if (k === "shift" && !p.flying) {
				p.sneaking = true
				if (p.sprinting) {
					p.FOV(settings.fov, 100)
				}
				p.sprinting = false
				p.speed = 0.01
				p.bottomH = 1.32
			}

			if (k === "l") {
				p.spectator = !p.spectator
				p.flying = true
				p.onGround = false
				updateHUD = true
			}

			if (k === "e") {
				changeScene("inventory")
				releasePointer()
			}

			if (k === ";") {
				releasePointer()
				freezeFrame = true
			}

			if(Number(k)) {
				inventory.hotbarSlot = Number(k) - 1
				holding = inventory.hotbar[inventory.hotbarSlot]
				updateHUD = true
			}
		} else if (screen === "pause") {
			if(k === "p") {
				play()
			}
		} else if (screen === "inventory") {
			if (k === "e") {
				play()
			}
			if (k === "enter") {
				drawScreens.inventory()
			}
		}
	}
	canvas.onkeyup = function(e) {
		let k = e.key.toLowerCase()
		Key[k] = false
		if(k === "escape" && (screen === "pause" || screen === "inventory" || screen === "options" && previousScreen === "pause") && Date.now() > unpauseDelay) {
			play()
		}
		if (screen === "play") {
			if (k === "z") {
				p.FOV(settings.fov, 300)
			}

			if (k === "shift" && p.sneaking) {
				p.sneaking = false
				p.speed = 0.075
				p.bottomH = 1.62
				// p.y += 0.3
			}
		}
	}
	canvas.onblur = function() {
		for (let key in Key) {
			Key[key] = false
		}
		mouseDown = false
		Slider.release()
	}
	canvas.oncontextmenu = function(e) {
		e.preventDefault()
	}
	window.onbeforeunload = e => { 
		if (screen === "play" && Key.control) {
			releasePointer()
			e.preventDefault()
			e.returnValue = "Q is the sprint button; Ctrl + W closes the page."
			return true
		}
	}
	canvas.onwheel = e => {
		e.preventDefault()
		e.stopPropagation()
		if (e.deltaY > 0) {
			inventory.hotbarSlot++
		} else if (e.deltaY < 0) {
			inventory.hotbarSlot--
		}
		if (inventory.hotbarSlot > 8) {
			inventory.hotbarSlot = 0
		} else if (inventory.hotbarSlot < 0) {
			inventory.hotbarSlot = 8
		}

		updateHUD = true
		holding = inventory.hotbar[inventory.hotbarSlot]
	}
	document.onwheel = e => {} // Shouldn't do anything, but it helps with a Khan Academy bug somewhat
	window.onresize = e => {
		width = window.innerWidth
		height = window.innerHeight
		canvas.height = height
		canvas.width = width
		gl.canvas.height = height
		gl.canvas.width = width
		gl.viewport(0, 0, width, height)
		initButtons()
		initBackgrounds()
		inventory.size = 40 * Math.min(width, height) / 600
		genIcons()
		use3d()
		p.FOV(p.currentFov + 0.0001)

		if (screen === "play") {
			play()
		} else {
			drawScreens[screen]()
			Button.draw()
			Slider.draw()
		}
	}

	function use2d() {
		gl.disableVertexAttribArray(glCache.aTexture)
		gl.disableVertexAttribArray(glCache.aShadow)
		gl.disableVertexAttribArray(glCache.aVertex)
		gl.useProgram(program2D)
		
		gl.enableVertexAttribArray(glCache.aVertex2)
		gl.enableVertexAttribArray(glCache.aTexture2)
		gl.enableVertexAttribArray(glCache.aShadow2)
	}
	function use3d() {
		gl.disableVertexAttribArray(glCache.aTexture2)
		gl.disableVertexAttribArray(glCache.aShadow2)
		gl.disableVertexAttribArray(glCache.aVertex2)
		gl.useProgram(program3D)
		
		gl.enableVertexAttribArray(glCache.aVertex)
		gl.enableVertexAttribArray(glCache.aTexture)
		gl.enableVertexAttribArray(glCache.aShadow)
	}

	let maxLoad = 1
	function startLoad() {
		// Runs when the loading screen is opened; cache the player's position
		p2.x = p.x
		p2.y = p.y
		p2.z = p.z
		maxLoad = world.loadFrom.length + 9
	}
	function initWebgl() {
		if (!win.gl) {
			let canv = document.createElement('canvas')
			canv.width = ctx.canvas.width
			canv.height = ctx.canvas.height
			canv.style.position = "absolute"
			canv.style.zIndex = -1
			canv.style.top = "0px"
			canv.style.left = "0px"
			gl = canv.getContext("webgl", { preserveDrawingBuffer: true, antialias: false, premultipliedAlpha: false })
			let ext = gl.getExtension('OES_element_index_uint')
			if (!ext) {
				alert("Please use a supported browser, or update your current browser.")
			}
			gl.viewport(0, 0, canv.width, canv.height)
			gl.enable(gl.DEPTH_TEST)
			gl.enable(gl.BLEND)
			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
			win.gl = gl
		} else {
			gl = win.gl
		}

		if (!document.body.contains(gl.canvas)) {
			document.body.append(gl.canvas)
		}

		modelView = new Float32Array(16)
		glCache = {}
		program3D = createProgramObject(gl, vertexShaderSrc3D, fragmentShaderSrc3D)
		program2D = createProgramObject(gl, vertexShaderSrc2D, fragmentShaderSrc2D)
		
		gl.useProgram(program2D)
		glCache.uSampler2 = gl.getUniformLocation(program2D, "uSampler")
		glCache.aTexture2 = gl.getAttribLocation(program2D, "aTexture")
		glCache.aVertex2 = gl.getAttribLocation(program2D, "aVertex")
		glCache.aShadow2 = gl.getAttribLocation(program2D, "aShadow")

		gl.useProgram(program3D)
		glCache.uSampler = gl.getUniformLocation(program3D, "uSampler")
		glCache.uPos = gl.getUniformLocation(program3D, "uPos")
		glCache.uDist = gl.getUniformLocation(program3D, "uDist")
		glCache.aShadow = gl.getAttribLocation(program3D, "aShadow")
		glCache.aTexture = gl.getAttribLocation(program3D, "aTexture")
		glCache.aVertex = gl.getAttribLocation(program3D, "aVertex")

		gl.uniform1f(glCache.uDist, 1000)

		//Send the block textures to the GPU
		initTextures()
		initShapes()

		// These buffers are only used for drawing the main menu blocks
		sideEdgeBuffers = {}
		for (let side in shapes.cube.verts) {
			let edgeBuffer = gl.createBuffer()
			gl.bindBuffer(gl.ARRAY_BUFFER, edgeBuffer)
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(shapes.cube.verts[side][0]), gl.STATIC_DRAW)
			sideEdgeBuffers[side] = edgeBuffer
		}
		texCoordsBuffers = []
		for (let t in textureCoords) {
			let buff = gl.createBuffer()
			gl.bindBuffer(gl.ARRAY_BUFFER, buff)
			gl.bufferData(gl.ARRAY_BUFFER, textureCoords[t], gl.STATIC_DRAW)
			texCoordsBuffers.push(buff)
		}

		//Bind the Vertex Array Object (VAO) that will be used to draw everything
		indexBuffer = gl.createBuffer()
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexOrder, gl.STATIC_DRAW)

		//Tell it not to render the insides of blocks
		gl.enable(gl.CULL_FACE)
		gl.cullFace(gl.BACK)

		gl.lineWidth(2)
		blockOutlines = false
		gl.enable(gl.POLYGON_OFFSET_FILL)
		gl.polygonOffset(1, 1)
		gl.clearColor(sky[0], sky[1], sky[2], 1.0)
		gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT)
	}
	function initBackgrounds() {
		// Home screen background
		use3d()
		gl.clearColor(sky[0], sky[1], sky[2], 1.0)
		gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT)
		FOV(100)
		const HALF_PI = Math.PI / 2
		initModelView(null, 0, 0.5, 0, -HALF_PI / 25, -HALF_PI / 3)
		gl.disableVertexAttribArray(glCache.aShadow)
		gl.vertexAttrib1f(glCache.aShadow, 1.0)
		
		let blocks = [
[7,4,1,7], [7,4,2,7], [7,4,3,7], [7,4,4,7], [7,5,1,7], [7,5,2,7], 
[7,5,3,7], [6,4,0,7], [6,4,1,7], [6,4,2,7], [6,4,3,7], [6,4,4,7], 
[6,5,0,7], [6,5,1,7], [6,5,2,7], [6,5,3,7], [6,5,4,7], [6,6,3,7], 
[6,6,4,7], [6,7,3,7], [5,0,-1,1], [5,0,0,1], [5,0,1,1], [5,0,2,1], 
[5,1,2,29], [5,2,2,29], [5,3,2,29], [5,4,2,29], [5,5,2,29], [5,6,2,29], 
[5,4,0,7], [5,4,1,7], [5,4,3,7], [5,4,4,7], [5,5,0,7], [5,5,1,7], 
[5,5,3,7], [5,5,4,7], [5,6,1,7], [5,6,3,7], [5,7,1,7], [5,7,2,7], 
[5,7,3,7], [4,-1,-1,1], [4,-1,0,1], [4,-1,1,1], [4,-1,2,1], [4,0,3,1], 
[4,0,4,1], [4,0,5,1], [4,0,6,1], [4,0,7,1], [4,0,8,1], [4,0,9,1], 
[4,0,10,1], [4,4,0,7], [4,4,1,7], [4,4,2,7], [4,4,3,7], [4,4,4,7], 
[4,5,0,7], [4,5,1,7], [4,5,2,7], [4,5,3,7], [4,5,4,7], [4,6,1,7], 
[4,6,2,7], [4,6,3,7], [4,7,4,7], [3,-1,-1,1], [3,-1,0,1], [3,-1,1,1], 
[3,-1,2,1], [3,-1,3,1], [3,-1,4,1], [3,0,5,1], [3,0,6,1], [3,0,7,1], 
[3,0,8,1], [3,0,9,1], [3,0,10,1], [3,4,1,7], [3,4,2,7], [3,4,3,7], 
[3,4,4,7], [3,5,1,7], [3,5,2,7], [3,5,3,7], [2,-1,-1,1], [2,-1,0,1], 
[2,-1,1,1], [2,-1,2,1], [2,-1,3,1], [2,-1,4,1], [2,-1,5,1], [2,-1,6,1], 
[2,-1,7,1], [2,0,8,1], [2,0,9,1], [2,0,10,1], [1,-2,-1,1], [1,-2,0,1], 
[1,-2,1,1], [1,-2,2,1], [1,-2,3,1], [1,-1,4,1], [1,-1,5,1], [1,-1,6,1], 
[1,-1,7,1], [1,-1,8,1], [1,-1,9,1], [1,-1,10,1], [0,-2,-1,1], [0,-2,0,1], 
[0,-2,1,1], [0,-2,2,1], [0,-2,3,1], [0,-2,4,1], [0,-2,5,1], [0,-1,6,1], 
[0,-1,7,1], [0,-1,8,1], [0,-1,9,1], [0,-1,10,1], [-1,-2,-1,1], 
[-1,-2,0,1], [-1,-2,1,1], [-1,-2,2,1], [-1,-2,3,1], [-1,-2,4,1], 
[-1,-2,5,1], [-1,-2,6,1], [-1,-2,7,1], [-1,-1,8,1], [-1,-1,9,1], 
[-1,-1,10,1], [-2,-2,-1,1], [-2,-2,0,1], [-2,-2,1,1], [-2,-2,2,1], 
[-2,-2,3,1], [-2,-2,4,1], [-2,-2,5,1], [-2,-2,6,1], [-2,-2,7,1], 
[-2,-2,8,1], [-2,-2,9,1], [-2,-1,10,1], [-3,-2,-1,1], [-3,-2,0,1], 
[-3,-2,1,1], [-3,-2,2,1], [-3,-2,3,1], [-3,-2,4,1], [-3,-2,5,1], 
[-3,-2,6,1], [-3,-2,7,1], [-3,-2,8,1], [-3,-2,9,1], [-3,-2,10,1], 
[-3,-2,11,1], [-3,-2,12,1], [-4,-2,-1,1], [-4,-2,0,1], [-4,-2,1,1], 
[-4,-2,2,1], [-4,-2,3,1], [-4,-2,4,1], [-4,-2,5,1], [-4,-2,6,1], 
[-4,-2,7,1], [-4,-2,8,1], [-4,-2,9,1], [-4,-2,10,1], [-4,-2,11,1], 
[-4,-2,12,1], [-5,-2,-1,1], [-5,-2,0,1], [-5,-2,1,1], [-5,-2,2,1], 
[-5,-2,3,1], [-5,-2,4,1], [-5,-2,5,1], [-5,-2,6,1], [-5,-2,7,1], [-5,-2,8,1], 
[-5,-2,9,1], [-5,-2,10,1], [-5,-2,11,1], [-5,-2,12,1], [-6,-2,-1,1], 
[-6,-2,0,1], [-6,-2,1,1], [-6,-2,2,1], [-6,-2,3,1], [-6,-2,4,1], 
[-6,-2,5,1], [-6,-2,6,1], [-6,-2,7,1], [-6,-2,8,1], [-6,-2,9,1], 
[-6,-2,10,1], [-6,-2,11,1], [-7,-2,3,1], [-7,-2,4,1], [-7,-2,5,1], 
[-7,-2,6,1], [-7,-2,7,1], [-7,-2,8,1], [-7,-2,9,1], [-8,-2,2,1], [-8,-2,3,1], 
[-8,-2,4,1], [-8,-2,5,1], [-8,-2,6,1], [-8,-2,7,1], [-8,-2,8,1]
		]
		
		for (let i = 0; i < blocks.length; i += 1) {
			block2(blocks[i][0], blocks[i][1], blocks[i][2], blocks[i][3])
		}
		
		gl.enableVertexAttribArray(glCache.aShadow)
		let pixels = new Uint8Array(width * height * 4)
		gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels)
		mainbg = ctx.createImageData(width, height)
		let w = width * 4
		for (let i = 0; i < pixels.length; i += 4) {
			let x = i % w
			let y = height - Math.floor(i / w) - 1
			let j = y * w + x
			mainbg.data[j] = pixels[i]
			mainbg.data[j + 1] = pixels[i + 1]
			mainbg.data[j + 2] = pixels[i + 2]
			mainbg.data[j + 3] = pixels[i + 3]
		}

		// Dirt background
		use2d()
		let aspect = width / height
		let stack = height / 96
		let bright = 0.4
		if (dirtBuffer) {
			gl.deleteBuffer(dirtBuffer)
		}
		dirtBuffer = gl.createBuffer()
		gl.bindBuffer(gl.ARRAY_BUFFER, dirtBuffer)
		let bgCoords = new Float32Array([
			-1, -1, 0, stack, bright,
			1, -1, stack * aspect, stack, bright,
			1, 1, stack * aspect, 0, bright,
			-1, 1, 0, 0, bright
		])
		gl.bufferData(gl.ARRAY_BUFFER, bgCoords, gl.STATIC_DRAW)
		gl.uniform1i(glCache.uSampler2, 1)
		gl.clearColor(0, 0, 0, 1)
		gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT)
		gl.vertexAttribPointer(glCache.aVertex2, 2, gl.FLOAT, false, 20, 0)
		gl.vertexAttribPointer(glCache.aTexture2, 2, gl.FLOAT, false, 20, 8)
		gl.vertexAttribPointer(glCache.aShadow2, 1, gl.FLOAT, false, 20, 16)
		gl.drawArrays(gl.TRIANGLE_FAN, 0, 4)
		pixels = new Uint8Array(width * height * 4)
		gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels)
		dirtbg = ctx.createImageData(width, height)
		dirtbg.data.set(pixels)
	}
	function initPlayer() {
		p = new Camera()
		p.speed = 1
		p.velocity = new PVector(0, 0, 0)
		p.pos = new Float32Array(3)
		p.sprintSpeed = 1
		p.flySpeed = 5
		p.x = 8
		p.y = superflat ? 6 : (Math.round(noise(8 * generator.smooth, 8 * generator.smooth) * generator.height) + 2 + generator.extra)
		p.z = 8
		p.previousX = 8
		p.previousY = 70
		p.previousZ = 8
		p.w = 3 / 8
		p.bottomH = 1.62
		p.topH = 0.18
		p.onGround = false
		p.jumpSpeed = 0.3
		p.sprinting = false
		p.maxYVelocity = 1.5
		p.gravityStength = -0.032
		p.lastUpdate = win.performance.now()
		p.lastBreak = Date.now()
		p.lastPlace = Date.now()
		p.lastJump = Date.now()
		p.autoBreak = false
		p.flying = false
		p.sneaking = false
		p.spectator = false
		
		win.player = p
		win.p2 = p2
	}
	function initWorldsMenu() {
		while (window.worlds.firstChild) {
			window.worlds.removeChild(window.worlds.firstChild)
		}
		selectedWorld = 0
		window.boxCenterTop.value = ""

		const deselect = () => {
			let elem = document.getElementsByClassName("selected")
			if (elem && elem[0]) {
				elem[0].classList.remove("selected")
			}
		}

		function addWorld(name, version, size, id, edited) {
			let div = doc.createElement("div")
			div.className = "world"
			div.onclick = e => {
				deselect()
				div.classList.add("selected")
				selectedWorld = id
			}
			let br = "<br>"
			div.id = id
			div.innerHTML = "<strong>" + name + "</strong>" + br
			
			if (edited){
				let str = (new Date(edited).toLocaleDateString(undefined, {
					year: "numeric",
					month: "short",
					day: "numeric",
					hour: "numeric",
					minute: "2-digit"
				}))
				div.innerHTML += str + br
			}
			div.innerHTML += version + br
			div.innerHTML += `${size.toLocaleString()} bytes used`
			
			window.worlds.appendChild(div)
		}

		worlds = {}
		if (loadString) {
			try {
				let tempWorld = new World()
				tempWorld.loadSave(loadString)
				let now = Date.now()
				addWorld(`${tempWorld.name} (Pre-loaded)`, tempWorld.version, loadString.length, now)
				worlds[now] = {
					code: loadString,
					id: now
				}
			}
			catch(e) {
				console.log("Unable to load hardcoded save.")
				console.error(e)
			}
		}
		loadFromDB().then(res => {
			if(res && res.length) {
				let index = res.findIndex(obj => obj.id === "settings")
				if (index >= 0) {
					Object.assign(settings, res[index].data) // Stored data overrides any hardcoded settings
					p.FOV(settings.fov)
					res.splice(index, 1)
				}
			}
			
			if (res && res.length) {
				res = res.map(d => d.data).filter(d => d && d.code).sort((a, b) => b.edited - a.edited)
				for (let data of res) {
					addWorld(data.name, data.version, (data.code.length + 60), data.id, data.edited)
					worlds[data.id] = data
				}
			}
			window.worlds.onclick = Button.draw
			window.boxCenterTop.onkeyup = Button.draw
		}).catch(e => console.error(e))

		superflat = false
		trees = true
		caves = true
	}
	
	function initEverything() {
		console.log("Initializing world.")

		worldSeed = Math.random() * 2000000000 | 0
		seedHash(worldSeed)
		caveNoise = openSimplexNoise(worldSeed)
		noiseSeed(worldSeed)

		generatedChunks = 0

		initPlayer()
		initWebgl()

		if (win.location.origin === "https://www.kasandbox.org" && (loadString || MineKhan.toString().length !== 183240)) {
			// Prevent Ctrl F
			message.innerHTML = '.oot lanigiro eht tuo kcehc ot>rb<erus eb ,siht ekil uoy fI>rb<.dralliW yb >a/<nahKeniM>"wen_"=tegrat "8676731005517465/cm/sc/gro.ymedacanahk.www//:sptth"=ferh a< fo>rb<ffo-nips a si margorp sihT'.split("").reverse().join("")
		}

		initBackgrounds()
		
		drawScreens[screen]()
		Button.draw()
		Slider.draw()

		p.FOV(settings.fov)
		initWorldsMenu()
		initButtons()
	}

	// Define all the scene draw functions
	(function() {
		function title() {
			let title = "MINECRAFT"
			let subtext = "The best place to play!"
			let font = "VT323,monospace"
			strokeWeight(1)
			ctx.textAlign = 'center'

			ctx.font = "bold 120px " + font
			fill(30)
			text(title, width / 2, 158)
			fill(40)
			text(title, width / 2, 155)
			ctx.font = "bold 121px " + font
			fill(50)
			text(title, width / 2, 152)
			fill(70)
			text(title, width / 2, 150)
			fill(90)
			ctx.font = "bold 122px " + font
			text(title, width / 2, 148)
			fill(110)
			text(title, width / 2, 145)
            
			ctx.font = "bold 32px " + font
		    fill(50)	
			text(subtext, width / 2-1, 180)	
			text(subtext, width / 2+1, 180)	
			text(subtext, width / 2, 179)	
			text(subtext, width / 2, 181)	
			ctx.font = "bold 32px " + font	
			fill(150)	
			text(subtext, width / 2, 180)
		}
		
		
		const clear = () => ctx.clearRect(0, 0, canvas.width, canvas.height)
		const dirt = () => ctx.putImageData(dirtbg, 0, 0)

		drawScreens["main menu"] = () => {
			ctx.putImageData(mainbg, 0, 0)
			title()
			fill(220)
			ctx.font = "20px VT323"
			ctx.textAlign = 'left'
			text("Minecraft " + version, width - (width - 2), height - 2)
		}

		drawScreens.play = () => {
			controls()
			runGravity()
			resolveContactsAndUpdatePosition()

			if (updateHUD) {
				clear()
				gl.clearColor(0, 0, 0, 0)
				gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT)
				hud()
				ctx.drawImage(gl.canvas, 0, 0)
				updateHUD = false
				freezeFrame = false

				gl.clearColor(sky[0], sky[1], sky[2], 1.0)
			}
			defineWorld()
		}

		drawScreens.loading = () => {
			// This is really stupid, but it basically works by teleporting the player around to each chunk I'd like to load.
			// If chunks loaded from a save aren't generated, they're deleted from the save, so this loads them all.

			let sub = maxLoad - world.loadFrom.length - 9
			let standing = true
			if (world.loadFrom.length) {
				let load = world.loadFrom[0]
				p.x = load.x * 16
				p.y = load.y * 16
				p.z = load.z * 16
				standing = false
			} else {
				p.x = p2.x
				p.y = p2.y
				p.z = p2.z

				let cx = p.x >> 4
				let cz = p.z >> 4

				for (let x = cx - 1; x <= cx + 1; x++) {
					for (let z = cz - 1; z <= cz + 1; z++) {
						if (!world.chunks[x] || !world.chunks[x][z] || !world.chunks[x][z].buffer) {
							standing = false
						} else {
							sub++
						}
					}
				}
			}

			if (standing) {
				play()
				return
			}

			world.tick()

			let progress = Math.round(100 * sub / maxLoad)
			dirt()
			fill(255)
			textSize(30)
			ctx.textAlign = "center"
			text(`Loading... ${progress}% complete (${sub} / ${maxLoad})`, width / 2, height / 2)
		}

		drawScreens.inventory = drawInv

		drawScreens.pause = () => {
			strokeWeight(1)
			clear()
			ctx.drawImage(gl.canvas, 0, 0)

			textSize(60)
			fill(0, 0, 0)
			ctx.textAlign = 'center'
			text("Paused", width / 2, 60)
		}

		drawScreens.options = () => {
			clear()
		}
		drawScreens["creation menu"] = () => {
			dirt()
			ctx.textAlign = 'center'
			textSize(20)
			fill(255)
			text("Create New World", width / 2, 20)
		}
		drawScreens["loadsave menu"] = () => {
			dirt()
			ctx.textAlign = 'center'
			textSize(20)
			fill(255)
			text("Select World", width / 2, 20)
		}
		drawScreens.editworld = dirt
	})()

	// Give the font time to load and redraw the homescreen
	setTimeout(e => {
		drawScreens[screen]()
		Button.draw()
		Slider.draw()
	}, 100)

	let debugMenu = false
	function gameLoop() {
		let frameStart = win.performance.now()
		if (!gl) {
			initEverything()
			releasePointer()
		}

		if (screen === "play" || screen === "loading") {
			drawScreens[screen]()
		}

		if (Date.now() - analytics.lastUpdate > 500 && analytics.frames) {
			analytics.displayedTickTime = (analytics.totalTickTime / analytics.frames).toFixed(1)
			analytics.displayedRenderTime = (analytics.totalRenderTime / analytics.frames).toFixed(1)
			analytics.displayedFrameTime = (analytics.totalFrameTime / analytics.frames).toFixed(1)
			analytics.fps = Math.round(analytics.frames * 1000 / (Date.now() - analytics.lastUpdate))
			analytics.displayedwFrameTime = analytics.worstFrameTime.toFixed(1)
			analytics.frames = 0
			analytics.totalRenderTime = 0
			analytics.totalTickTime = 0
			analytics.totalFrameTime = 0
			analytics.worstFrameTime = 0
			analytics.lastUpdate = Date.now()
			updateHUD = true
		}

		analytics.frames++
		analytics.totalFrameTime += win.performance.now() - frameStart
		analytics.worstFrameTime = Math.max(win.performance.now() - frameStart, analytics.worstFrameTime)
		win.raf = requestAnimationFrame(gameLoop)
	}
	return gameLoop
}

init = MineKhan()
if (window.parent.raf) {
	window.cancelAnimationFrame(window.parent.raf)
	console.log("Canceled", window.parent.raf)
}
init()


	</script>
	</body>
</html>
